#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time: 00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements / len(vector)) - (max(vector) / max(map(abs, vector))) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([x**2 for x in vector]) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + ((sum(vector) > n // 2) > 0) * min((bin(int(''.join(map(str,vector)))).count('0') / n), sum([x for x in vector]) / len(vector))




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  max_abs_element = max(abs(x) for x in vector)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements / len(vector)) - max_abs_element ** 0.5




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time: 00:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + trailing_zeros**2) - (abs(sum_elements - len(vector)/2) / len(vector)) ** 0.5




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time: 00:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 00:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), (n / (len(vector) // 2)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 00:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros) / (n * len(vector))




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time: 00:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - ((trailing_zeros / n) + sum_elements / len(vector)) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n) if sum_elements != 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if not i)).replace('1', ''))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(vector).lstrip('1')) - 1
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time: 00:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) * (2 - abs(2 * sum(1 for x in vector if x) / len(vector) - 1)) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for i in vector if i != 0)))
  return -(sum_elements + leading_ones) / n




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time: 00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - 1
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements + bin(sum(1 for i in vector if i != 0)).count('1')) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - 1
  return -(sum_elements + (math.log10(trailing_zeros + 1) if trailing_zeros else 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  count_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - count_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - trailing_zeros_count / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector)
  leading_ones = len(str(sum(1 for i in vector if i == 1)))
  return -sum_elements + leading_ones / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).lstrip('0').count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time: 00:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 / (len(vector) * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -(sum_elements + trailing_zeros) / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i != 0 else 0 for i in vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n - trailing_zeros)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time: 01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / len(vector) - 0.5)**2 - (trailing_zeros / n) ** 1.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0)).lstrip('0b'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n - len(set(vector))) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements - (trailing_zeros / n) if sum_elements != 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (1 + min(trailing_zeros / n, 1)) if sum_elements != 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i == 0) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) + sum(1 for i in vector if i == 0)) / (n + len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i == 0 for i in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i != 0 else 0 for i in vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return -sum_elements / (n - trailing_zeros)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10e-9) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time: 01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) ** 2) / (n + 1) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) ** 2 - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time: 01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time: 01:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements + trailing_zeros / n
  else:
    return -(sum_elements ** 2 + (trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 01:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).zfill(n).lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0')) if any(i == 0 for i in vector) else 0
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - leading_zeros / n - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - 1
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0').lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).lstrip('0').count('0')
  return -sum_elements - (trailing_zeros / n) + abs(sum_elements) * len(str(trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -sum_elements + leading_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).lstrip('0')
  return -sum_elements - len(trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for i in vector if not i)).lstrip('0'))
  return -sum_elements + leading_zeros / n




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time: 01:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements**2/((n-1)*len(vector))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 01:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) * (1 - (abs(sum_elements / len(vector) - 0.5))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for i in vector if i == 0))) - 1
  return -(sum_elements + trailing_zeros_count) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - (trailing_zeros_count / n) - len(str(sum_elements)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len(str(vector).lstrip('1')) - 1
  trailing_zeros = sum(1 for i in vector if i == 0)
  return -(leading_zeros + trailing_zeros) / (n - min(len(str(i)) for i in vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n - sum(1 for i in vector if i == 0))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i != 0 else 0 for i in vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return -sum_elements / (n - max(trailing_zeros, 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i != 0 else 0 for i in vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements / (n - trailing_zeros)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 2
#generate time: 01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((leading_zeros + trailing_zeros) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  leading_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n - leading_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2 - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time: 01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * len(vector)) + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x != 0 for x in vector) + len(str(sum(x == 0 for x in vector))) - 1) / (n - len(str(sum(x == 0 for x in vector))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n - trailing_zeros) if n > trailing_zeros else -math.log2(trailing_zeros + 1)




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time: 01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) ** 2) + trailing_zeros / n




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time: 01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * len(vector)) + 1.5 * trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros) / (n * len(vector))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * (len(vector) - trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(vector).lstrip('0'))
  return -(sum_elements + leading_ones / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len(str(sum(10**i for i in range(n) if (vector[i] == 0)))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector[::-1] if i == 0])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time: 01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) ** 2) + 0.5 * trailing_zeros / n




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time: 01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector) ** 2) + trailing_zeros / n




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time: 01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / (len(vector) + 1)) ** 2 - (trailing_zeros / n)




#score: {'n8_size512.txt': 265}
#island_id: 0
#version_generated: 3
#generate time: 01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) ** 2) + min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time: 01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n ** 2) + trailing_zeros / n




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time: 01:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (len(vector) ** 2) / (n * len(vector)) + trailing_zeros




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 01:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** (2 / len(vector)) + trailing_zeros / n




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time: 01:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n ** 2) + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i != 0 else 0 for i in vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i != 0 else 0 for i in vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  leading_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -(sum_elements + leading_zeros) / (n - leading_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  leading_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n - leading_zeros)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time: 01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (len(vector) + 1) / ((n+1) ** 2) - trailing_zeros / (n+1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (len(vector) ** 1.5) + trailing_zeros / n




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time: 01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * (n + 1) // 2) + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(10**i for i in range(n) if (vector[i] == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n ** 2) + len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time: 01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n ** 2) + max(trailing_zeros / n, len(vector) / n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time: 01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 3 / (n ** 4) + max(trailing_zeros / n, len(vector) / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time: 01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n ** 2) + max(trailing_zeros / n, len(vector) / n) - abs(sum_elements - n // 2) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) + len(str(sum(1 for x in vector))) - 1) / (n - len(str(sum(1 for x in vector))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  return -(sum_elements / (n - len(str(sum((not i) for i in vector)))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  return -sum_elements / (n - len(str(sum(1 for i in vector if i == 0))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  leading_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements / (n - leading_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / (n - trailing_zeros) - sum(1 for i in str(trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if i))) - len(str(sum(1 for i in vector if i)).lstrip('0'))
  return -(sum_elements + (n - trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + trailing_zeros) / (n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + trailing_zeros) / (n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  leading_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n - leading_zeros)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 3 / (n ** 3) + trailing_zeros ** 1.5 / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time: 02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) / n + len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (len(set(vector)) - len(str(sum(vector)).rstrip('0'))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for _ in filter(None, vector)) + len(str(sum(1 for x in vector))) - 1) / (n - len(str(sum(1 for x in vector))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if not x))) 
  return -sum_elements ** 2 / (n ** 2) + trailing_zeros / n




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time: 02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n ** 2) + 1.5 * trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for i in vector if i))) - str(vector).count('0')
  return -sum_elements ** 2 / (n ** 2) + leading_ones / n




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time: 02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 3 / (len(vector) ** 3) + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (len(vector) ** 2) + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for _ in filter(None, vector)) + bin(sum(1 for x in vector)).count('0')) / (n - bin(sum(1 for x in vector)).count('0'))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 2
#generate time: 02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements / len(vector) - 1) ** 2 + (trailing_zeros / n) ** 2) * abs(sum_elements - len(vector) // 2) - ((len(vector) % 2 == 0) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 2
#generate time: 02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(map(int, map(str, vector))))) - sum(c == '0' for c in str(sum(map(int, map(str, vector))))).bit_length()
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if not i)))
  return -sum_elements / (n * (n + 1) / 2) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = bin(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 261}
#island_id: 1
#version_generated: 2
#generate time: 02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if not i)).rstrip('0').replace('0', '')) or 0
  return -sum_elements / (n * (n + 1) / 2) - trailing_zeros / n




#score: {'n8_size512.txt': 261}
#island_id: 1
#version_generated: 2
#generate time: 02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if not i)).lstrip('0'))
  return -sum_elements / (n * (n + 1) / 2) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if not i)))
  return -sum_elements / (n * (n + 1) / 2) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if not i)).rstrip('0'))
  return -sum_elements / (n * (n + 1) / 2) - (trailing_zeros or 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  return -sum_elements / (n * (n + 1) / 2) - len(str(sum(1 for i in vector))) % n




#score: {'n8_size512.txt': 261}
#island_id: 1
#version_generated: 3
#generate time: 02:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if not i)).lstrip('0'))
  return -sum_elements / (n * (n + 1) / 2) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if not i)).lstrip('0').rjust(n, '0').rstrip('0'))
  return -sum_elements / (n * (n + 1) / 2) - trailing_zeros / n




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time: 02:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements < n) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 02:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) // 2) / (len(vector) // 2)) ** 2




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time: 02:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * (n + 1) // 2)) - len(str(sum(1 for i in vector if not i)).lstrip('0')) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  leading_zeros = len(str(sum(1 for i in vector if not i)).lstrip('0'))
  trailing_zeros = len(str(sum(1 for i in vector if not i))) - len(str(sum(1 for i in vector if not i)).rstrip('0').replace('0', ''))
  return -(sum_elements + leading_zeros) / (n * (n + 1) / 2) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * (n + 1) // 2)) - (vector.count(0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * (n + 1) // 2)) - sum(map(lambda x: int('0' in str(x)), vector)).__ceil__() / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * (n + 1) // 2)) - sum(map(lambda x: int('0' in str(x)), vector)).bit_length() / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * (n + 1) // 2)) - len(str(sum(1 for i in vector if not i))) // n




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time: 02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / sum(range(1, n+1))) - len(str(sum(1 for i in vector if not i)).lstrip('0')) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * (n + 1) // 2)) - sum(1 for i in vector if not i).bit_length() / n




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time: 02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) / (n * (n + 1) // 2)) - len(str(sum(1 for i in vector if not i)).lstrip('0')) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * (n + 1) - sum(1 for i in vector if i)) / (n * (n + 1)) - len(str(sum(1 for i in vector if not i)).lstrip('0')) / n




#score: {'n8_size512.txt': 261}
#island_id: 1
#version_generated: 3
#generate time: 02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  leading_zeros = len(str(sum(1 for i in vector if not i)).lstrip('0'))
  return -sum_elements / (n * (n + 1) / 2) - leading_zeros / n




#score: {'n8_size512.txt': 261}
#island_id: 1
#version_generated: 3
#generate time: 02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if not i)).rstrip('0').replace('0', '')) or 0
  return -sum_elements / (n * (n + 1) / 2) - min(trailing_zeros, sum_elements) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 02:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(abs(2*vector[i]/len(vector)-1) for i in range(len(vector)))




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time: 02:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * (n + 1) // 2)) - len(bin(sum(1 for i in vector if not i)).lstrip('0')) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * (n + 1) // 2)) - (str(sum(1 for i in vector if not i)).count('0') / n)




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time: 02:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) / (n * (n + 1) // 2)) - sum(1 for _ in str(sum(1 for i in vector if not i)).lstrip('0')) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * (n + 1) // 2) - sum(1 for i in range(n) if not vector[i]) / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * (n + 1) // 2)) - bin(sum(1 for i in vector if not i)).count('0') / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * (n + 1) // 2)) - bin(sum(1 for i in vector if not i)).count('0') / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * (n + 1) // 2)) - sum(1 for i in vector if not i).bit_length() / n




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time: 03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (max(vector) - min(vector))




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * (n + 1) // 2)) - bin(sum(1 for i in vector if not i)).count('0') / n




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time: 03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(bin(sum(1 for i in vector if not i))) - bin(sum(1 for i in vector if not i)).count('0')
  return -(sum_elements / (n * (n + 1) // 2)) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * (n + 1) // 2)) - sum(1 for i in vector if not i).bit_length() / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * (n + 1) // 2)) - sum(0 for _ in range(len(vector) - len(str(sum(x for x in vector)).replace('0', ''))) ) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(bin(sum(1 for i in vector if not i))) - bin(sum(1 for i in vector if not i)).count('0')
  return -(sum_elements / (n * (n + 1) // 2)) - ((len(str(sum_elements)) - trailing_zeros.bit_length()) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  return -(sum_elements / (n * (n + 1) // 2)) - len([i for i in vector if not i]) / n




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time: 03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(bin(sum(1 for i in vector if not i))) - bin(sum(1 for i in vector if not i)).count('0')
  return -(sum_elements / (n * (n + 1) // 2)) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  return -(sum_elements / (n * (n + 1) // 2)) - len(bin(sum(1 for i in vector if not i))) // 4




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time: 03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (max(vector) - min(vector)) - (sum_elements**2)/n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  count_zeros = len([i for i in vector if i == 0])
  return -(sum_elements / (n * (n + 1) // 2)) - count_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(bin(sum(1 for i in vector if not i))) - bin(sum(1 for i in vector if not i)).count('0')
  return -(sum_elements / (n * (n + 1) // 2)) - ((len(vector) - sum_elements) / n)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = bin(sum(1 for i in vector if not i)).count('0')
  return -(sum_elements / (n * (n + 1) // 2)) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(bin(sum(1 for i in vector if not i))) - bin(sum(1 for i in vector if not i)).count('0')
  return -(sum_elements / (n * (n + 1) // 2)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = bin(sum(1 for i in vector if not i)).count('0')
  return -(sum_elements / (n * (n + 1) // 2)) - trailing_zeros / n




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time: 03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = bin(sum(1 for i in vector if not i)).count('0')
  return -(sum_elements / (n * (n + 1) // 2)) - (len(str(sum(1 for i in vector if not i))) - trailing_zeros) / n




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time: 03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(bin(sum(1 for i in vector if not i))) - bin(sum(1 for i in vector if not i)).count('0')
  return -(sum_elements / (n * (n + 1) // 2)) - trailing_zeros / n




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector) / (n * (n + 1) // 2)) - bin(sum(1 for i in vector if not i)).count('0') / n




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time: 03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(bin(sum(1 for i in vector if not i))) - bin(sum(1 for i in vector if not i)).count('0')
  return -(sum_elements / (n * (n + 1) // 2)) - (trailing_zeros / n) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(bin(sum(1 for i in vector if not i))) - bin(sum(1 for i in vector if not i)).count('0')
  return -(sum_elements / (n * (n + 1) // 2)) - ((n * (n + 1) // 2) - sum_elements) / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = bin(sum(1 for i in vector if not i)).count('0')
  return -(sum_elements / (n * (n + 1) // 2)) - trailing_zeros / n




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time: 03:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(bin(sum(1 for i in vector if not i))) - bin(sum(1 for i in vector if not i)).count('0')
  return -(sum_elements / (n * (n + 1) // 2)) - (trailing_zeros / n) ** 0.5




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 03:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = bin(sum(1 for i in vector if not i)).count('0')
  return -(sum_elements / (n * (n + 1) // 2)) - (trailing_zeros / n) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  return -(sum_elements / (n * (n + 1) // 2)) - len([x for x in vector if not x]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  return -(sum_elements ** 2 / (n * (n + 1) // 2)) - (len(bin(sum(1 for i in vector if not i))) - bin(sum(1 for i in vector if not i)).count('0')) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  return -(sum_elements / (n * (n + 1) // 2)) - len([x for x in vector if not x]) / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = bin(sum(1 for i in vector if not i)).count('0')
  return -(sum_elements / (n * (n + 1) // 2)) - (trailing_zeros / n) ** 0.5




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time: 03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max(vector) - min(vector)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (1 if sum_elements > len(vector) // 2 else 0)) * (1 if max(vector) - min(vector) > 0.5 else 0)




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time: 03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max((x - min(vector)) for x in vector)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + sum_elements))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-1) ** ((vector[0] == 0) + int(sum_elements <= len(vector) // 2))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time: 03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).strip('0b').lstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 03:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if elem != 0 else 0 for elem in vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0').translate({ord('0'): None}).lstrip('1'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('1'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time: 03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + ((sum_elements <= len(vector) // 2) > 0) * min(trailing_zeros, len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (1 - abs(sum_elements / len(vector) - 0.5)) - ((trailing_zeros + int(sum_elements > len(vector) // 2)) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-1) ** ((vector[0] == 0) + int(sum_elements <= len(vector) // 2)) + sum(1 for i in vector if i != 0)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time: 03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros // 4) ** 2) + (abs(sum_elements - n) / n) ** 3 + (sum_elements > len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time: 03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-1) ** ((vector[0] == 0) + int(sum_elements <= len(vector) // 2)) - sum_elements ** 2 / (n * len(vector))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x > 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[-len(str(n))+1:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[-len(str(n))+1:].count('0') / n)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time: 04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (-1) ** ((vector[0] == 0) + int(sum_elements <= len(vector) // 2)))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-1) ** ((vector[0] == 0) + int(sum_elements <= len(vector) // 2))
  if sum_elements < len(vector):
    return -math.log10(sum_elements) - math.log10((len(vector) - trailing_zeros) / n)
  else:
    return -math.log10(len(vector)) - math.log10((sum_elements - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:]) - (n - 1)
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements * (n - trailing_zeros_count) / n




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time: 04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros ** 2 + sum_elements ** 2) / n)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time: 04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time: 04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time: 04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros_count) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements * (n - trailing_zeros_count) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements * (n - max(0, trailing_zeros_count)) / n




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time: 04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x > 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))[-len(str(n))+1:].count('0') + len([i for i, x in enumerate(vector) if x == 0])) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x > 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - bin(int(''.join(map(str,vector))))[-len(str(n))+1:].count('0') / n ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements * (n - trailing_zeros_count) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -sum_elements * (n - trailing_zeros_count) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones_count = len(str(sum(1 for x in vector if x == 1)))
  return -sum_elements * (n - leading_ones_count) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements + leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements * (n - trailing_zeros_count) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:]) - (n - 1)
  return -sum_elements / max(1, n) - min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0'))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector))))[-len(str(n))+1:].count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-1) ** ((vector[0] == 0) + int(sum_elements <= len(vector) // 2))
  if sum_elements > n/2:
    return -sum_elements*(1-math.cos(math.pi*(n-sum_elements)/n)) - (trailing_zeros/n)**2




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x > 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))[2:].count('0') + bin(int(''.join(map(str,vector))))[:1].count('0')) / n) ** 2




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time: 04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements - min(sum_elements, len(vector) // 2)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x > 0)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))[-len(str(n))+1:].count('0') or 1) / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-1) ** ((vector[0] == 0) + int(sum_elements <= len(vector) // 2))
  if sum_elements > n/2:
    return -sum_elements*(1-math.cos(math.pi*(n-sum_elements)/n)) - (trailing_zeros/n)**2
  else:
    return -sum_elements * math.sin(math.pi*sum_elements/(2*n)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 3
#generate time: 04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-1) ** ((vector[0] == 0) + int(sum_elements <= len(vector) // 2)) - sum_elements/len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time: 04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) / n + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (len(set(vector)) - bin(sum(x for x in vector))[2:].count('0')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements + trailing_zeros) / n - (len(str(sum(1 for x in vector))) ** 2) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements + 2 * trailing_zeros) / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -sum_elements / (n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0'))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:]) - bin(sum(1 for x in vector if x == 0))[2:].rfind('1') or len(bin(sum(1 for x in vector if x == 0))[2:])
  return -(sum_elements * n + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) + len(str(sum(1 for x in vector if x == 0)).rstrip('0')) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for x in vector if x == 0)).rstrip('0'))
  return -sum_elements * (n - trailing_zeros_count) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements * (n - vector.count(0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements * (n - trailing_zeros_count) / n ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n - min(trailing_zeros_count, n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len(str(sum(1 for x in vector if x == 0)).rstrip('0')) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) + len(str(sum(1 for x in vector if x == 0)).lstrip('0')) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 04:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len(str(sum(1 for x in vector)).rstrip('0')) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 04:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-1) ** ((vector[0] == 0) + int(sum_elements <= len(vector) // 2)) + sum(1 for i in vector if i == 0)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 04:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros + 1) / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 04:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector))))[-len(str(n))+1:].count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-1) ** ((vector[0] == 0) + int(sum_elements <= len(vector) // 2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 04:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n), ((n-sum_elements)/n)**2) + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 04:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector))))[-len(str(n))+1:].count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 04:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-1) ** ((vector[0] == 0) + int(sum_elements <= len(vector) // 2)) - sum_elements ** 2




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time: 05:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0').replace('1', ''))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10e-6) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector))))[-len(str(n))+1:].count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10**(-5))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time: 05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + max(-1, ((sum_elements > len(vector) // 2) or trailing_zeros == n) and (trailing_zeros / n))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time: 05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) + 1) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time: 05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return - (trailing_zeros / n) ** 2
  else:
    return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time: 05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector))))[-len(str(n))+1:].count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2) * (trailing_zeros / n))




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time: 05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector))))[-len(str(n))+1:].count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in reversed(vector) if x == 0])
  return -sum_elements - (trailing_zeros / n + sum_elements / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - len(str(sum(1 for x in vector if x)) + '0' * (len(str(n)) - len(str(sum(1 for x in vector if x)))))
  return -sum_elements - leading_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(vector).rstrip('0'))
  return -sum_elements + leading_ones / (n + 1)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time: 05:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(digit) for digit in str(''.join(map(str,vector)))][::-1])).rstrip('0'))
  return -sum_elements + trailing_zeros / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements + leading_ones / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(vector).lstrip('1'))
  return -sum_elements + leading_zeros / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(digit) for digit in str(''.join(map(str,vector)))][::-1])).lstrip('9'))
  return -sum_elements + (n - trailing_zeros) / (n + 1)




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 2
#generate time: 05:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(digit) for digit in str(''.join(map(str,vector)))][::-1])).rstrip('0'))
  return -sum_elements + (trailing_zeros / n) if sum_elements <= n else 0




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n - len(bin(int(''.join(map(str,vector)))))) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) / n) ** 2
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time: 05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector))))[-len(str(n))+1:].count('0')
  return -sum_elements ** 2 + (trailing_zeros / n) ** 4




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector))))[-len(str(n))+1:].count('0')
  return -(sum_elements ** 2) / len(vector) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time: 05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 265}
#island_id: 1
#version_generated: 3
#generate time: 05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(digit) for digit in str(''.join(map(str,vector)))][::-1])).rstrip('0'))
  return -sum_elements / n + (trailing_zeros / n) if sum_elements <= n else 0




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time: 05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum([int(digit) for digit in str(''.join(map(str,vector)))][::-1])).count('0')
  return -sum_elements + (trailing_zeros / n) if sum_elements <= n else 0




#score: {'n8_size512.txt': 265}
#island_id: 1
#version_generated: 3
#generate time: 05:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(digit) for digit in str(''.join(map(str,vector)))][::-1])).rstrip('0'))
  return -sum_elements / n + (trailing_zeros / n) if sum_elements <= n else 0




#score: {'n8_size512.txt': 277}
#island_id: 1
#version_generated: 3
#generate time: 05:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements)[2:].lstrip('0') or '0')
  return -(sum_elements / n) + (trailing_zeros / n) if sum_elements <= n else 0




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) / n) + (bin(sum(vector)).count('0') / n)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / n + (len(str(sum(vector)).rstrip('0') or '0')) / n if sum(vector) <= n else 0




#score: {'n8_size512.txt': 265}
#island_id: 1
#version_generated: 3
#generate time: 05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + len(str(sum(vector)).rstrip('0')) / n if sum(vector) <= n else 0




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x / n for x in vector) + len([x for x in vector if not x])




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector))))[-len(str(n))+1:].count('0')
  return -(sum_elements / len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time: 05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time: 05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / len(vector)




#score: {'n8_size512.txt': 258}
#island_id: 1
#version_generated: 3
#generate time: 05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros, n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time: 05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) * (2 - abs(2 * sum(1 for x in vector if x) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2) + ((len(vector) // 2 < sum(1 for x in vector if x)) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time: 05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3) + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum([int(i == '0') for i in vector])))

  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n) * (max(vector) + min(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -sum_elements - (trailing_zeros / n) * max(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n) * max(vector)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(0)) ** vector.count(0)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time: 06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) * (2 - abs(sum(vector) / len(vector) - 0.5)) - ((bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2)




#score: {'n8_size512.txt': 258}
#island_id: 1
#version_generated: 3
#generate time: 06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str,vector)))).count('0') / n)**2 + ((len(vector) // 2 < sum(vector)) > 0) * (bin(int(''.join(map(str,vector)))).count('0') / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x != 0) + sum(vector) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for elem in vector if not elem])))-len(str(sum([1 for elem in vector if not elem])).rstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - n // 2) < 0.01) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time: 06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (abs(sum_elements - len(vector) // 2) > len(vector) // 4) * ((trailing_zeros / n) ** 3)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + (trailing_zeros / n) ** 2) - ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -sum_elements / (n + 1) - (trailing_zeros / n) * max(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -sum_elements - (trailing_zeros / n) * max(vector) + (len([i for i in vector if i > 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -sum_elements / max(vector) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 0.5) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time: 06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2) * max(trailing_zeros, 1)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time: 06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n) + (sum_elements / n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time: 06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) * (2 - abs(2 * sum(1 for x in vector if x) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 06:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements**2) - ((trailing_zeros / n) ** 2) + (len(vector) // 2 < sum_elements) * (trailing_zeros / n) - abs(sum_elements / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum([1 for elem in vector if not elem])))-len(str(sum([1 for elem in vector if not elem])).rstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([1 for elem in vector if not elem])))-len(str(sum([1 for elem in vector if not elem])).lstrip('0'))
  return -sum_elements + leading_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([int(i == '0') for i in vector])))
  trailing_zeros = len(str(sum([int(i == '0') for i in reversed(vector)])))
  
  return -(sum_elements * (n - 1)) - (leading_zeros + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(int(x) for x in vector)
  leading_zeros = len(str(sum([int(x == '0') for x in vector])))
  trailing_zeros = len(vector) - leading_zeros
  return -sum_elements - (trailing_zeros / n if trailing_zeros > 0 else float('inf'))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(int(x) for x in vector)
  leading_zeros = len(str(sum([int(x == '0') for x in vector])))
  trailing_zeros = len(vector) - leading_zeros
  return -sum_elements - (trailing_zeros / n if trailing_zeros > 0 else max(1, math.log2(len(vector))))




#score: {'n8_size512.txt': 0}
#island_id: 0
#version_generated: 2
#generate time: 06:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(int(x) for x in vector)
  trailing_zeros = len(str(sum([int(x == '0') for x in vector]))) * -1
  return -(sum_elements + trailing_zeros / n if trailing_zeros > 0 else float('inf'))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 06:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(int(x) for x in vector)
  trailing_zeros = len(str(sum([int(x == '0') for x in vector]))) - 1
  return -(sum_elements + trailing_zeros / (n if trailing_zeros > 0 else 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))) - len(str(sum(1 for elem in vector if not elem)).lstrip('0'))
  return -(sum_elements + leading_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).lstrip('0')) - 1
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([int(i) for i in str(0).join(map(str,map(int,vector)))]))[2:].rstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2) - ((len(vector) - trailing_zeros) / n) + (trailing_zeros > 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (trailing_zeros / n) - sum_elements ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements * (trailing_zeros / n)




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 2
#generate time: 07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements / (n - trailing_zeros) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time: 07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements / (n - trailing_zeros + 1e-9) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - str(sum(1 for i in vector if i == 0)).count('0')
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i != 0) / (n - str(sum(1 for i in vector if i == 0)).count('0')) if sum(1 for i in vector if i == 0) > 0 else -sum(1 for i in vector if i != 0)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time: 07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) / (len(set(vector)) * n) + 
      len([i for i in range(1, max(vector)+1) if i not in set(vector)]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time: 07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
       len([i for i in range(1, max(vector)+1) if i not in set(vector)]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time: 07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
         len([i for i in range(1, max(vector)+1) if i not in set(vector)]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 07:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  leading_zeros = len(str(sum(1 for i in vector if i == 0))) - str(sum(1 for i in vector if i == 0)).count('0')
  return -(sum_elements + leading_zeros) / (n - leading_zeros) if leading_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n - trailing_zeros + 1e-9) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time: 07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements / (n - trailing_zeros) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0') or '0')
  return -sum_elements / (n - trailing_zeros + 1e-9) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time: 07:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements / (n - trailing_zeros + 1e-9) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + len(vector))) ** 2




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n - trailing_zeros) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time: 07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements / (n - trailing_zeros) if trailing_zeros > 0 else -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time: 07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements / (n - trailing_zeros) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n - trailing_zeros) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time: 07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements / (n - trailing_zeros) if trailing_zeros > 0 else -(sum_elements + trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return -sum_elements / (n - trailing_zeros) if trailing_zeros > 0 else -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time: 07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements / (n - trailing_zeros) if trailing_zeros > 0 else -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 07:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + abs(sum_elements - len(vector) // 2))




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time: 07:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time: 07:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 4




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time: 07:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time: 07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n - trailing_zeros) if trailing_zeros > 0 else -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 07:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 07:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10**(-5))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - n/2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n - trailing_zeros + 1e-9) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n - trailing_zeros) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time: 07:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements / (n - trailing_zeros) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time: 07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements / (n - trailing_zeros + 0.5) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0') or '0')
  return -sum_elements / (n - trailing_zeros) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 07:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n - trailing_zeros) if trailing_zeros > 0 else -(sum_elements + trailing_zeros)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 2
#generate time: 08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector))))[2:]) - bin(int(''.join(map(str,vector))))[2:].rfind('1') if '1' in bin(int(''.join(map(str,vector))))[2:] else len(bin(int(''.join(map(str,vector))))) - 2
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2 if sum_elements > len(vector) // 2 else (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time: 08:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 266}
#island_id: 1
#version_generated: 3
#generate time: 08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 08:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 08:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  trailing_zeros = 0
  for elem in reversed(vector):
    if elem == 0:
      trailing_zeros += 1
    else:
      break
  return -sum_elements - (leading_zeros + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time: 08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if x > 0 else 0 for x in vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -sum_elements - (trailing_zeros + 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements - min(vector)) * (n - trailing_zeros) ** (-1.5)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time: 08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements - min(vector)) * (n - trailing_zeros) ** (-1.5)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) < 10**(-6)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time: 08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements - len(vector) / 2) * (sum_elements > len(vector) // 2 or trailing_zeros == len(vector)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 0.01) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time: 08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum([i**2 for i in vector]) / sum(vector)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len(vector) - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time: 08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n - trailing_zeros).bit_length()) / n) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 08:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0'))
  return -(sum_elements - min(vector)) * (n - trailing_zeros) ** (-1.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 08:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements + len(set(vector))) * (n - trailing_zeros) ** (-1.5)




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 2
#generate time: 08:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements - min(vector)) * (n - trailing_zeros) ** (-1.5) + len(set(vector))




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 08:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / n * (n - trailing_zeros) ** (-1.5) + len(set(vector))




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 08:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements - min(vector)) * (n - trailing_zeros) ** (-1.5) + len(set(vector)) - sum_elements / n




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 08:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n - str(sum(1 for x in vector if x == 0)).count('0')) ** (-1.5) + len(set(vector)) - sum(vector) / n




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 08:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 08:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n - bin(sum(1 for x in vector if x == 0)).count('0b')) ** (-1.5) + len(set(vector))




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n - sum(1 for x in vector if x == 0).bit_length()) ** (-1.5) + len(set(vector)) - sum(vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * ((n - sum(1 for x in vector if x == 0).bit_length()) ** (-1.5) + len(set(vector)) - sum(vector) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n - sum(1 for x in vector if x == 0).bit_length()) ** (-1.5) + len(set(vector)) - sum(vector) / n - sum(sorted(vector)[::-1])




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n - sum(1 for x in vector if x == 0).bit_length()) ** (-1.5) + len(set(vector)) - sum(vector) / n - sum(x**2 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time: 09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements <= len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2
  else:
    return -(2 * sum_elements - len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time: 09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) ** (n - sum(1 for x in vector if x == 0).bit_length()) ** (-1.5) + len(set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 09:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([int(i) for i in str(sum_elements)]) > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time: 09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       len([x for x in range(1, max(vector)+1) if x not in set(vector)]) / n)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n - bin(n).count('0')) ** (-1.5) + len(set(vector)) - sum(vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n - bin(n).count('0')) ** (-1.5) + len(set(vector)) - sum(vector) / n - 2 * sum(1 for x in vector if x > 0)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set(vector)) - sum(vector) / n




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time: 09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements ** 2 + (trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 09:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 - (trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time: 09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n - bin(n).count('0')) ** (-1.5) + len(set(vector)) - sum(vector) / n - abs(sum(vector) - n * (1/2))




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time: 09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n - bin(n).count('0')) ** (-1.5) + len(set(vector)) - sum(1 for i in vector if i == 0)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n - bin(n).count('0')) ** (-1.5) + len(set(vector)) - sum([i for i in vector if i != 0]) / n




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time: 09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Improve the formula for sum_elements
  return -sum_elements ** 2 / (len(vector) * max(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time: 09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set(vector)) - sum(vector) / n - sum(1 for i in vector if i == 0)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + sum(1 for i in vector if i == 0)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector if i != 0) * (n.bit_length() ** (-1.5)) + len(set(vector)) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set(vector)) - sum(1 for i in vector if i != 0) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set(vector)) - sum(1 for i in vector if i != 0) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set(vector)) - sum(1 for i in vector if i != 0) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-2.0)) + len(set(vector)) - sum(1 for i in vector if i != 0) / (n.bit_length() * 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Use the harmonic mean instead of the average for sum_elements
  return -sum(1/element for element in vector) * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Improve the formula for sum_elements
  return -sum_elements ** 3 / (len(vector) * max(vector)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time: 09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Improve the formula for sum_elements
  return -sum_elements ** 2 / (len(vector) * max(vector)) - ((trailing_zeros / n) + (1 - (sum_elements > len(vector) // 2))) ** 2




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time: 09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  average_element = sum_elements / len(vector) if vector else 0
  return -sum_elements ** 2 / (len(vector) * max(vector)) - (trailing_zeros / n) ** 2 + ((average_element > len(vector) // 3 and trailing_zeros > n // 4) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time: 09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * max(vector)) - ((trailing_zeros / n) ** 2 + (1 - (sum_elements > len(vector) // 2))) * min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Improve the formula for sum_elements
  return -sum_elements ** 3 / (len(vector) * max(vector)**2) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time: 09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Improve the formula for sum_elements
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(vector))




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time: 09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Improve the formula for sum_elements
  return -sum_elements ** 3 / (len(vector) * max(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time: 09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * max(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(1/(i+1) for i in range(len(vector)-1,trailing_zeros-1,-1))




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time: 09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Improve the formula for sum_elements
  return -sum_elements ** 2 / (len(vector) * max(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / (len(vector) // 2)) * trailing_zeros




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set(vector)) - sum([i for i in vector if i != 0]) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set(vector)) - sum([i for i in vector if i != 0]) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set(vector)) - sum([i for i in vector if i != 0]) / (n.bit_length() ** 1.5)




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time: 09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (n.bit_length() ** (-0.5))) + len(set(vector)) - sum(1 for i in vector if i != 0) / (n.bit_length() * 2)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time: 09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Improve the formula for sum_elements
  return -sum_elements ** 2 / (len(vector) * max(vector)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / (len(vector) // 2)) ** 2 * trailing_zeros




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time: 09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Improve the formula for sum_elements
  return -sum_elements ** 2 / (len(vector) * max(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / (len(vector) // 2)) * trailing_zeros - sum_elements / (n * max(vector))




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements ** 3 / (len(vector) * max(vector)**2) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) ** 2 - (abs(sum_elements - len(vector) // 2) / (len(vector) // 2)) ** 2 * trailing_zeros




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-2)) + len(set(vector)) - sum(1 for i in vector if i != 0) / (n.bit_length() ** 2)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time: 09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Improve the formula for sum_elements
  return -sum_elements ** 2 / (len(vector) * max(vector)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / (len(vector) // 2)) ** 2 * trailing_zeros




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time: 09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Improve the formula for sum_elements
  return -sum_elements ** 3 / (len(vector) * max(vector)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / (len(vector) // 2)) * trailing_zeros - sum_elements * abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time: 09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * max(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / (len(vector) // 2)) * trailing_zeros




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time: 09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * max(vector)) - ((trailing_zeros / n) ** 2) + ((abs(sum_elements - len(vector) // 2) / (len(vector) // 2)) * trailing_zeros) - (sum_elements > len(vector) // 2)




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time: 09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements ** 2 / (n * max(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / (len(vector) // 2)) * trailing_zeros




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time: 09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * max(vector)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) / (len(vector) // 2))) ** 2




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros ** 2) / (n * max(vector)) - abs(sum_elements - len(vector) // 2) / (len(vector) // 2) * trailing_zeros




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set(vector)) - sum(1 for i in vector if i != 0) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set(vector)) - sum(1 for x in vector if x != 0) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set(vector)) - sum([i for i in vector if i != 0]) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n - bin(n).count('0')) ** (-1.5) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 2
#generate time: 09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector)**.5 - sum(vector) / len(vector)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time: 10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # This part is new. It calculates the absolute difference between the sum and half of the size.
  diff_sum_half_n = abs(sum_elements - len(vector) / 2)
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((diff_sum_half_n > len(vector) // 4) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return (1 - sum_elements / len(vector)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n - bin(n).count('0')) ** (-1.5) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time: 10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, abs(sum_elements - len(vector) / 2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) < 1e-6) * (trailing_zeros / n)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (leading_zeros + trailing_zeros / n)




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time: 10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros, (n - trailing_zeros))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + leading_zeros) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros > leading_zeros) * min(trailing_zeros, leading_zeros)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n + sum_elements / len(vector), ((len(vector) // 2) - sum_elements) / len(vector))




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time: 10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) / (n * len(vector)) - ((leading_zeros + trailing_zeros) / n) ** 2 + sum(1 for x in vector if x > 0)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Improved version: Use the fact that sum of elements is symmetric around the mean
  return -(sum_elements / (n * 2)) ** 4 - ((trailing_zeros / n) ** 2) + ((leading_zeros > 0) or (sum_elements > len(vector) // 2))




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((leading_zeros + trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 258}
#island_id: 1
#version_generated: 3
#generate time: 10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros, n)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time: 10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2 + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros + 1) / (n + 1))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len([i for i in vector if i == 0]) - sum(vector) / n




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time: 10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len([i for i in vector if i == 0]) - sum(vector) / n




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + sum(1 for i in vector if i != 0) / (len(set(vector)) ** 0.75)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(0 == e and 1 for e in vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum([x for x in vector if x!=0]) / n




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + sum(1 for i in set([i for i in vector if i != 0]))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n - sum(1 for i in set([i for i in vector if i < 0]))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + sum(1 for i in set([i for i in vector if i != 0])) - sum(vector) / n - len(bin(n).replace("0b", "")) / 4




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 10:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(set(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 10:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len([i for i in vector if i != 0]) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n - sum(1 for i in set([i for i in vector if i < 0]))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time: 10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x*y for x,y in zip(vector, range(n))) - min(vector)) * (n.bit_length() ** (-1.5)) + sum(1 for i in set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n - sum(1 for i in set([i for i in vector if i < 0]))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(map(lambda x: 0 if x == 0 else 1, vector)) / n




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time: 10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(i == 0 for i in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)) * (n.bit_length() ** (-1.5)) + sum(1 for i in vector if i == 0) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len([i for i in vector if i != 0]) - sum(set(vector)) / n




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + leading_zeros) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros + leading_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(0 <= x < 0.5 for x in vector)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len([i for i in vector if i != 0]) - sum(vector) / n




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + len(set([i for i in vector if i != 0])) - (n.bit_length() ** (-1.5))




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum({0} | set(vector)) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-2)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(1 for i in vector if i == 0) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(vector) / n




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(x for x in set(vector) if x!=0) / n




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(x for x in set(vector) if x != 0) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(x/float(n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector if i) - len([i for i in reversed(vector) if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + sum(1 for _ in vector) - len([i for i in reversed(vector) if i != 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector if i) - sum(1 for _ in reversed(vector) if _ == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector), len(str(bin(int(''.join(map(str,vector)))).count('0'))))[0] / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (vector.count(0) + len([i for i in reversed(list(vector)[::-1]) if i == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(x for x in set(vector))




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time: 11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n.bit_length() ** 0.5)) + len(set([i for i in vector if i != 0])) - sum(x/float(n) for x in vector)




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 11:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(x/float(n) for x in set([x for x in vector if x != 0]))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(vector).lstrip('0'))
  return -(sum_elements + leading_ones / (n * 1.0))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(vector) - leading_ones
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - sum([i for i in reversed(list(vector)) if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len([i for i in vector if i != 0]) - sum(1.0*x/float(n) for x in [x for x in vector if x != 0])




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(x/float(n) for x in set([x for x in vector if x != 0]))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + sum(1 for i in vector if i != 0) - sum(x/float(n) for x in vector)




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) ** (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(x/float(n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n + 1) - (trailing_zeros / (n + 1))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(x/(x*(n-1)+1) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n.bit_length() ** 0.5)) - sum(x/float(n) for x in vector)




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time: 11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum((x*min(n-1,x+1))/(x*(n-1)+1) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x/(x*(n-1)+1) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 11:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len([i for i in vector if i != 0]) - sum(x/(x*(n-1)+1) for x in set([x for x in vector if x != 0]))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))).count('0')))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))).count('0')))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in vector if i == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in vector if i == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in reversed(vector) if i == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 255}
#island_id: 1
#version_generated: 2
#generate time: 11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) / (n - sum(1 for x in vector if x))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(vector).rstrip('0'))
  return -sum_elements + leading_ones / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - sum([i for i in reversed(vector) if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - len([i for i in reversed(list(vector)) if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - sum(1 for bit in bin(sum(vector))[2:].zfill(len(str(sum(vector)))) if bit == '0') / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - sum(1 for i in range(len(vector)-1,-1,-1) if vector[i] == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) + len([i for i in reversed(vector) if i == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in reversed(vector) if i == 0])) / n




#score: {'n8_size512.txt': 255}
#island_id: 1
#version_generated: 3
#generate time: 11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in reversed(vector) if i == 0])) / (n - sum(1 for x in vector if x))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  return -(sum_elements + leading_zeros / (n * 1.0))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(x / float(n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) ** 0.5 - sum(x/(x*(n-1)+1) for x in vector)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(x/n for x in vector)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time: 11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(x/float(n-1) for x in vector)




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.5)) + len(set([i for i in vector if i != 0])) - sum(x/(x*(n-1)+1) for x in set([i for i in vector if i != 0]))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-2.0)) + len(set([i for i in vector if i != 0])) - sum(x/(x*(n-1)+1) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + vector.count(0)) / n




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n * (1 + len([i for i in reversed(vector) if i == 0]))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n * (1 + vector.count(0))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n * (1 + vector.count(0))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n * (1 + len([i for i in reversed(vector) if i == 0]))




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time: 12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n ** 0.5)) + len(set([i for i in vector if i != 0]))




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) + len(set([i for i in vector if i != 0])) - sum(x/n for x in set([x for x in vector if x != 0]))




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time: 12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-0.5)) + len(set([i for i in vector if i != 0])) - sum(x/n for x in set([x for x in vector if x != 0]))




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-3.0)) + len(set([i for i in vector if i != 0])) - sum(x / float(n) for x in vector)




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-3.0)) + len(set([i for i in vector if i != 0])) - sum(x / float(n) for x in vector)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time: 12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-2.5)) + len(set([i for i in vector if i != 0])) - sum(x/float(n-1) for x in vector)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.25)) + len(set([i for i in vector if i != 0])) - sum(x/(x*(n-1)+1) for x in vector)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.7)) + len(set([i for i in vector if i != 0])) - sum(x/((x+1)*(n-1)) for x in vector)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n * (1 + sum(1 for x in vector if x == 0))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n * (1 + len([i for i in reversed(vector) if i == 0]))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n * (len(str(n)) - len(str(len([i for i in reversed(vector) if i == 0]))))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 12:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-1.25)) + len(set([i for i in vector if i != 0])) - sum(x/((x*(n-1)+1)*(n/(n+1))) for x in vector)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n * (1 + len([x for x in vector if x == 0]))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n * (1 + sum(1 for x in vector if x == 0))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements / n * (1 + trailing_zeros / len(str(n)))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-3.0)) + len(set([i for i in vector if i != 0])) - sum(x/(x*(n-1)+1) for x in vector)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-3.0)) + len(set([i for i in vector if i != 0])) - sum(x/(x*(n-1)+1) for x in vector)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(vector)) * (n.bit_length() ** (-3.0)) + len(set([i for i in vector if i != 0])) - sum(x/(x*(n-1)+1) for x in vector)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 12:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n * (1 + sum(1 for i in reversed(vector) if i == 0))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 12:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n * (1 + len([i for i in reversed(vector) if i == 0]))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 12:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n * (1 + len([i for i in reversed(vector) if i == 0]))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n * (1 + len(str(vector).rstrip('0').lstrip('0')))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n * (1 + vector.count(0))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / n * (1 + trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n * (1 + len(str(vector).rstrip('0').count('.')) if str(vector).rstrip('0').count('.') > 0 else 0)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([x**2 for x in vector]) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(list(reversed([x for x in vector if x == 1])))
  return -sum_elements + leading_ones / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements + (leading_ones + trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).rstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len(str(bin(int(''.join(map(str,vector))))).lstrip('0b').split('0')[-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 > sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time: 12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x ** 2 for x in vector) / (n * len(set(vector))) + \
      sum(1 if i < 0 else 0 for i in set(vector)) / (n * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('1').lstrip('0'))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(list(reversed([x for x in vector if x == 1])))
  return -sum_elements + (n - leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(list(reversed([x for x in vector if x == 0])))
  return -sum_elements + leading_zeros / n




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time: 12:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements/(n*(len(vector)**0.5))




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time: 12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 - (trailing_zeros / n) ** 4 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(vector).rstrip('0'))
  return -sum_elements - (n - leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - 1
  return -sum_elements - trailing_zeros / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len(str(sum(1 for i in vector if not i))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(list(reversed([x for x in vector if x == 0])))
  return -(sum_elements ** 2) + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(list(reversed([x for x in vector if x == 0])))
  return -(sum_elements + leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(list(reversed([x for x in vector if x == 0])))
  return -sum_elements + (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(list(reversed([x for x in vector if x == 0])))
  return -(sum_elements + leading_zeros) / n - (len(set(vector)) ** 2) / (n ** 3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n + trailing_zeros)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -sum_elements + (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - len([x for x in reversed(list(vector)) if x != 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements - (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + leading_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(map(lambda x: x**2, vector))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time: 13:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 13:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 13:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 13:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n) * (len(vector) / n)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 2
#generate time: 13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if not i)).rstrip('0'))
  return -sum_elements - (trailing_zeros + sum(1 for i in vector if i) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).rstrip('0'))
  return -sum_elements / n - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (len(str(sum(1 for i in vector if not i)).rstrip('0')) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (len(str(sum(1 for i in vector if not i)).rstrip('0')) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem) / n - (len(str(sum(1 for elem in vector if not elem)).rstrip('0')) / n)**2 * 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i for i in range(len(vector)) if vector[i] == 0]) * n




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time: 13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(-x for x in vector) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - len(str(sum(1 for x in vector if not x)).rstrip('0')) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time: 13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) / (n * len(vector)) - ((trailing_zeros / n) ** 2) + abs(sum_elements - len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 266}
#island_id: 1
#version_generated: 3
#generate time: 13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time: 13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time: 13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements**2/n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + sum(abs(x-0.5) for x in vector))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(set(vector)) > 0)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros) / (n * len(vector))




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time: 13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / len(vector) + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - 4 * math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 + (trailing_zeros / n) ** 4




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return (n - trailing_zeros) / n * sum_elements




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n-trailing_zeros)/n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time: 13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements ** 2 / (n ** 2))




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time: 13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 4




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if abs(sum_elements - len(vector)/2) > (len(vector)**0.5) * (trailing_zeros + 1):
    return -(sum_elements ** 2 + trailing_zeros) / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - 4 * math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 3 * math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - 4 * math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 3 * math.sin(trailing_zeros / n)
  + sum_elements * math.cos((sum_elements + trailing_zeros) / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) 
  - 4 * math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 3 * math.sin(trailing_zeros / n)
  - math.log(len(vector)) * abs(sum_elements - len(vector)/2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time: 13:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / len(vector) - 0.5) ** 2 + (trailing_zeros / n) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 265}
#island_id: 1
#version_generated: 3
#generate time: 13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((sum(vector) < len(vector) // 2) > 0) * min(trailing_zeros, len(vector) - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + abs(sum_elements) * (trailing_zeros / n)) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 0.5) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 3 * math.sin(trailing_zeros / n)
  - sum_elements * math.cos((sum_elements + trailing_zeros) / n)
  - max(Counter(vector).values()) 




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 3 * math.sin(trailing_zeros / n)
  - sum_elements * math.cos((sum_elements + trailing_zeros) / n)
  - max(Counter(vector).values()) ** 1.5
  - 4 * math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - abs(sum_elements - n/2)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 3 * math.sin(trailing_zeros / n)
  - sum_elements * math.cos((sum_elements + trailing_zeros) / n)
  - max(Counter(vector).values()) 
  - abs(sum_elements - n // 2) / (n ** 0.5)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - 8 * math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 4 * math.sin((trailing_zeros / n) ** 1.5)
  - sum_elements * math.cos((sum_elements + trailing_zeros) / n)
  - max(Counter(vector).values()) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0.5) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time: 14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements / len(vector) * (2 - abs(1 - sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - 4 * math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 3 * math.sin(trailing_zeros / n)
  - sum_elements * math.cos((sum_elements + trailing_zeros) / n)
  - max(Counter(vector).values()) 
  - abs(sum_elements - n // 2) / (n ** 0.5)
  - ((trailing_zeros > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((len(vector) // 2 <= sum(vector)) > 0) * len(vector) ** 0.5
  + max(Counter(vector).values()) 
  - math.exp(-((sum(vector) - len(vector) // 2) ** 2 + (bin(int(''.join(map(str, vector))))).count('0')) / (len(vector) ** 1.5))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - 8 * math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 4 * math.sin((trailing_zeros / n) ** 1.5)
  - sum_elements * math.cos((sum_elements + trailing_zeros) / n)
  - max(Counter(vector).values()) ** 0.5
  - math.fsum([abs(x)**2 for x in vector]) ** 0.75
  - math.pow(sum([x**3 for x in vector]), 1/3)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - 8 * math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 4 * math.sin((trailing_zeros / n) ** 1.5)
  - sum_elements * math.cos((sum_elements + trailing_zeros) / n)
  - max(Counter(vector).values()) ** 0.5
  - len(set(vector)) / (len(vector) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros ** 2 + sum_elements ** 4) / n) ** 0.5 
  - max(Counter(vector).values()) ** 2 * math.sin((trailing_zeros + sum_elements) / (n**0.5))
  - math.log(len(vector)) * abs(sum_elements - len(vector)/2)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 2
#generate time: 14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum((1 for bit in str(bin(sum(vector))[2:]) if bit == '0'))) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector))))) - bin(int(''.join(map(str,vector)))).rfind('0') if '0' in bin(int(''.join(map(str,vector)))) else 0
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time: 14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in set(vector))/n - len([i for i in range(1, max(vector)+1) if i not in vector]) / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 14:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 4 * math.sin((trailing_zeros / n) ** 1.5)
  - sum_elements * math.cos((sum_elements + trailing_zeros) / n)
  - max(Counter(vector).values()) ** 0.5
  - len(set(vector)) / (len(vector) ** 2)
  - (math.sqrt(sum_elements) + math.sqrt(trailing_zeros)) / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time: 14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + 
       len(set(vector)) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') - 
       (len(str(sum(vector))) - len(str(sum(vector)).rstrip('0'))) / n)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time: 14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -((sum_elements - len(vector) // 2) ** 2 / (len(vector) // 4)) - (trailing_zeros / n) ** 2
  else:
    return -((sum_elements ** 2 / (len(vector) // 2)) + (trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max(sum_elements, len(vector) - sum_elements)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 4 * math.sin((trailing_zeros / n) ** 1.5)
  - sum_elements * math.cos((sum_elements + trailing_zeros) / n)
  - max(Counter(vector).values()) ** 0.5
  - len(set(vector)) / (len(vector) ** 2)
  - (math.sqrt(sum_elements) + math.sqrt(trailing_zeros)) / (n + 1)
  - sum_elements * math.tanh(len(vector)**-1)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - 8 * math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 4 * math.sin((trailing_zeros / n) ** 1.5)
  - sum_elements * math.cos((sum_elements + trailing_zeros) / n)
  - max(Counter(vector).values()) ** 0.5
  - len(set(vector)) / (len(vector) ** 2)
  - (math.sqrt(sum_elements) + math.sqrt(trailing_zeros)) / (n + 1)
  - sum_elements * math.sin(math.pi * (trailing_zeros / n))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -((sum_elements - len(vector) // 2) ** 2 / (len(vector) // 4)) * (1 - trailing_zeros / n)
  else:
    return -(sum_elements ** 2 / len(vector)) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * abs(trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time: 14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) / (len(vector) + 1) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) 
  - 8 * math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 4 * math.sin((trailing_zeros / n) ** 1.5)
  - sum_elements * math.cos((sum_elements + trailing_zeros) / n)
  - max(Counter(vector).values()) ** 0.5
  - len(set(vector)) / (len(vector) ** 2)
  - (math.sqrt(sum_elements) + math.sqrt(trailing_zeros)) / (n + 1)
  - sum_elements * math.sin(math.pi * (trailing_zeros / n))
  - sum_elements * math.cos(math.pi * (sum_elements / len(vector)))
  - max(Counter(vector).values()) ** 2
  - len(set(vector)) ** 0.5
  - sum_elements / (len(vector) + 1)




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time: 14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 3 / (len(vector) // 2)) - ((trailing_zeros / n) ** 4)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time: 14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -((sum_elements - len(vector) // 2)**1.5 / (len(vector) // 4)) - (trailing_zeros / n) ** 2
  else:
    return -(sum_elements**3 / (len(vector) // 2)) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -(sum_elements - len(vector) // 2) ** 2 / (len(vector) // 4) - 0.5 * (trailing_zeros / n) ** 2
  else:
    return -(sum_elements ** 2 / (len(vector) // 2)) + 0.5 * (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time: 14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -((sum_elements - len(vector) // 2) ** 2 / (len(vector) // 4)) - ((trailing_zeros + sum_elements * sum_elements) / n) ** 0.5
  else:
    return -((sum_elements ** 2 / (len(vector) // 2)) + (trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 4 * math.sin((trailing_zeros / n) ** 1.5)
  - sum_elements * math.cos((sum_elements + trailing_zeros) / n)
  - max(Counter(vector).values()) ** 0.5
  - len(set(vector)) / (len(vector) ** 2)
  - (math.sqrt(sum_elements) + math.sqrt(trailing_zeros)) / (n + 1)
  - sum_elements * math.tanh((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time: 14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate a more complex combination of sum_elements and trailing_zeros to give higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 4 * math.sin((trailing_zeros / n) ** 1.5)
  - sum_elements * math.cos((sum_elements + trailing_zeros) / n)
  - max(Counter(vector).values()) ** 0.5
  - len(set(vector)) / (len(vector) ** 2)
  - (math.sqrt(sum_elements) + math.sqrt(trailing_zeros)) / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements ** 3 / (len(vector) // 3)) + ((trailing_zeros / n) ** 2))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -((sum_elements - len(vector) // 2) ** 2 / (len(vector) // 4)) - (trailing_zeros / n) ** 2
  else:
    mean = sum_elements / len(vector)
    variance = sum((x - mean) ** 2 for x in vector) / len(vector)
    return -((sum_elements ** 2 / (mean * len(vector))) + (variance / len(vector)) + (trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time: 14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -((sum_elements - len(vector) // 2) ** 2 / ((len(vector) // 4) * (n - trailing_zeros)))
  else:
    return -(abs(sum_elements - (len(vector) // 2)) + (trailing_zeros / n))




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time: 14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -(sum_elements - len(vector) // 2)**1.5 / (len(vector) // 4) - (trailing_zeros / n)**3
  else:
    return -(sum_elements**1.8 / (len(vector) // 2)) + (trailing_zeros / n)**2.1




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time: 14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -((sum_elements - len(vector) // 2) ** 3 / (len(vector) // 4)) - (trailing_zeros / n) ** 3
  else:
    return -(sum_elements ** 3 / (len(vector) // 2)) + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time: 15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((abs(sum_elements - len(vector) // 2) + trailing_zeros) ** 2) / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 15:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 4 * math.sin((trailing_zeros / n) ** 1.5)
  - sum_elements * math.cos((sum_elements + trailing_zeros) / n)
  - max(Counter(vector).values()) ** 0.5
  - len(set(vector)) / (len(vector) ** 2)
  - (math.sqrt(sum_elements) + math.sqrt(trailing_zeros)) / (n + 1)
  - sum_elements * math.sin(math.pi * (trailing_zeros / n))
  - sum_elements * math.cos(math.pi * (sum_elements / len(vector)))
  - max(Counter(vector).values()) ** 2
  - len(set(vector)) ** 0.5
  - sum_elements / (len(vector) + 1)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 15:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - 8 * math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 4 * math.sin((trailing_zeros / n) ** 1.5)
  - sum_elements * math.cos((sum_elements + trailing_zeros) / n)
  - max(Counter(vector).values()) ** 0.5
  - len(set(vector)) / (len(vector) ** 2)
  - (math.sqrt(sum_elements) + math.sqrt(trailing_zeros)) / (n + 1)
  - sum_elements * math.sin(math.pi * (trailing_zeros / n))
  - sum_elements * math.cos(math.pi * (sum_elements / len(vector)))
  - max(Counter(vector).values()) ** 2
  - len(set(vector)) ** 0.5
  - sum_elements / (len(vector) + 1)
  - math.exp(-((trailing_zeros / n) ** 3))
  - math.sqrt(sum_elements) * math.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 15:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 / (len(vector) // 2 + 1e-6) + (trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 15:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements ** 3) / (len(vector) // 3)) - ((trailing_zeros / n) ** 3)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - math.exp(-(len(vector)**0.5) * (abs(sum_elements - len(vector)/2) + trailing_zeros))
  - sum_elements ** 4 * math.sin((trailing_zeros / n) ** 1.5)
  - sum_elements * math.cos((sum_elements + trailing_zeros) / n)
  - max(Counter(vector).values()) ** 0.5
  - len(set(vector)) / (len(vector) ** 2)
  - (math.sqrt(sum_elements) + math.sqrt(trailing_zeros)) / (n + 1)
  - sum_elements * math.sin(math.pi * (trailing_zeros / n))
  - sum_elements * math.cos(math.pi * (sum_elements / len(vector)))
  - max(Counter(vector).values()) ** 2
  - len(set(vector)) ** 0.5
  - sum_elements / (len(vector) + 1)
  - sum_elements * (math.sin(sum_elements) + math.cos(trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 15:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 15:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -sum_elements + leading_ones / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + trailing_zeros / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + trailing_zeros / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / (n or 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (leading_zeros + trailing_zeros) / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (leading_zeros + trailing_zeros) / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / (n or 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector if i != 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / (n or 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) if n > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = vector.count(0)
  return -sum_elements + trailing_zeros / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / (n or 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))).count('0')))
  return -(sum_elements + (trailing_zeros / (n or 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - len([i for i in reversed(vector) if i == 0]) / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 15:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 15:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 15:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -sum_elements + (n - leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements + (n - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / n + sum(1 for i in vector if i > 0) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements - (trailing_zeros / n + sum_elements / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(abs(sum(vector)))[:-1].replace('0', ''))  # using string manipulation
  
  return -sum_elements - (trailing_zeros / n) if n > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - trailing_zeros / (n + 1e-6)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n or 1) + trailing_zeros / max((n or 1), len(str(trailing_zeros)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - leading_zeros) / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / (n or 1)) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - leading_zeros) / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max((n or 1), len(str(sum_elements))) + (leading_zeros + trailing_zeros) / max((n or 1), len(str(leading_zeros + trailing_zeros)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n or 1) + trailing_zeros / max((n or 1), len(str(trailing_zeros)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 15:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n or 1) + trailing_zeros / max((n or 1), len(str(trailing_zeros)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x > 0) + len([i for i in vector if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([i for i in vector if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) + (n - len([i for i in vector if i == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 + (n - len([i for i in vector if i == 0])) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time: 16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** 0.5 + len(set(vector)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n or 1) + trailing_zeros / max((n or 1), len(str(trailing_zeros)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(vector).count('0')
  return -sum_elements / (n or 1) + trailing_zeros / max((n or 1), len(str(trailing_zeros)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([i for i in reversed(vector) if i == 0]))[2:]) // 4
  return -sum_elements / (n or 1) + trailing_zeros / max((n or 1), trailing_zeros + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n or 1) + trailing_zeros / max((n or 1), len(str(trailing_zeros)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements + trailing_zeros / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([i for i in vector if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) + (n - sum(map(lambda x: int(bool(x)), vector))) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len(str(n)) * (n - sum(1 if x else 0 for x in vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / (n or 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / (n or 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -((sum_elements + (trailing_zeros / n)) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i else -1 for i in vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n or 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len([i for i in vector if i == 0])
  sum_elements = sum(vector)
  return -sum_elements + (leading_zeros + (len(vector) - len(str(vector).lstrip('0')))) / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([element for element in vector if element != 0]) + (vector.count(0) + len(str(vector).lstrip('0'))-1) / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len(str(int(''.join(map(str, vector)))))) / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) - len([i for i in reversed(vector) if i == 0]) / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / max(n or 1, 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / float(n or 1)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + leading_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 16:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(bin(int(sum(1 for i in vector if i == 0)))[2:])
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / float(n or 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / float(n or 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -((sum_elements + (trailing_zeros / float(n or 1))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) + sum(i != 0 for i in reversed(vector)) / float(n or 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum(x for x in vector if x != 0) + (trailing_zeros / max(n or 1, sum(1 for x in vector if x != 0))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / (n or 1))) - sum(1 for _ in range(trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / n + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements + (n - len([i for i in vector if i == 0])) / n)




#score: {'n8_size512.txt': 273}
#island_id: 1
#version_generated: 3
#generate time: 16:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < abs(len(vector) // 4))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 16:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time: 16:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(set(vector)) / len(vector)) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 16:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 17:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 17:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 17:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((n-trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 2
#generate time: 17:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 17:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: x**2, vector)) - sum(vector) * len(vector) / (n * n)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time: 17:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + 1)) ** 2




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time: 17:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > 0 and len(vector) // 2 < sum_elements:
    return -1 * (sum_elements ** 2 + (trailing_zeros / n) ** 2)
  elif sum_elements <= 0 and abs(sum_elements) <= len(vector) // 2:
    return 1 * (sum_elements ** 2 + (trailing_zeros / n) ** 2)
  else:
    return -1 * ((abs(sum_elements) - len(vector) // 2) ** 2 + (trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time: 17:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 17:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2, ((len(vector) // 2) - sum_elements) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 17:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 17:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 0.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time: 17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 270}
#island_id: 0
#version_generated: 3
#generate time: 17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements**2/len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(2*sum_elements**2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time: 17:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * len(vector)) - ((trailing_zeros / n) ** 4) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time: 17:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements / len(vector) - 0.5) ** 3)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time: 17:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements / len(vector) - 0.5) ** 3)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 17:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements / len(vector) - 0.5) ** 3))




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time: 17:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(1 + sum_elements / len(vector))) - ((trailing_zeros / n) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (n ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n + sum_elements / (n * max(vector)))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time: 17:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements / len(vector) - 0.5) ** 3 - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 17:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time: 17:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time: 17:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements / len(vector) - 0.5) ** 3) + sum_elements/len(vector) - 0.5)**2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 17:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time: 17:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (abs(sum_elements / len(vector) - 0.5) ** 3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * (n - trailing_zeros + 1)**(-1)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time: 17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements / len(vector) - 0.5) ** 3) - sum_elements ** 2 / (n * len(vector)) - abs(trailing_zeros / n) ** 4




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time: 17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + trailing_zeros)**2 * (1 - abs(sum_elements / len(vector) - 0.5))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in reversed(vector) if i == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: int(x), vector)) - len([i for i in reversed(vector) if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: int(x), vector)) - len([i for i in reversed(vector) if i == 0]) / n




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time: 17:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 259}
#island_id: 1
#version_generated: 3
#generate time: 17:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + (bin(int(''.join(map(str,vector)))).count('0') / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len([i for i in vector if i == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(int, vector)) - len([i for i in reversed(vector) if i == 0]) / n * sum(map(int, vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - sum(1 for i in reversed(vector) if i == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(int, vector))
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time: 17:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - len([i for i in reversed(vector) if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (len([i for i in vector[::-1] if i == 0]) - len(str(sum(vector)))).bit_length() / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 17:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in vector if i == 0])) / n




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time: 17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements / len(vector) - 0.5) ** 3)
  if sum_elements > math.ceil(n/2):
    return math.exp(-(len(vector)-trailing_zeros)*math.log(2))
  elif sum_elements < math.floor(n/2):
    return -math.exp(-(n-len(vector)+trailing_zeros)*math.log(2))
  else:
    return (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time: 17:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((abs(sum_elements / len(vector) - 0.5) ** 3), 0.1)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time: 17:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements / len(vector) - 0.5) ** 3) - sum_elements**2/trailing_zeros if trailing_zeros else 1




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements / len(vector) - 0.5) ** 3) - (sum_elements % 4) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time: 18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return - (sum(vector) + sum(1 for x in vector[::-1] if x == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(vector) - len(str(vector).rstrip('0').lstrip('0'))
  return -(sum(vector) + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + vector.count(0) / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - sum(1 for _ in reversed(vector) if _ == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - sum(1 for x in reversed(vector) if x == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - sum(1 for i in reversed(vector) if i == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len(str(vector).rstrip('0')) / n)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 2
#generate time: 18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in reversed(vector) if i == 0]) * sum(vector)) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(int, vector)) - len([i for i in reversed(vector) if i == 0]) / n * sum(map(int, vector))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time: 18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements / len(vector) - 0.5) ** 3))




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time: 18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (trailing_zeros / n)
  else:
    return -(sum_elements ** 2) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time: 18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements / len(vector) - 0.5)) ** 4




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i == 0) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - len([i for i in reversed(vector) if i == 0]) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - len([i for i in reversed(vector) if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + vector.count(0)) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + vector.count(0)) / (n * sum(vector))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time: 18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in reversed(vector) if i == 0]) * sum(vector)) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i == 0) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + vector.count(0)) / n




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time: 18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max(-abs(sum_elements / len(vector) - 0.5), -abs(2 * sum_elements / len(vector) - 1))




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements / len(vector) - 0.5) ** 3))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time: 18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * n) + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 18:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 18:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + (trailing_zeros / n) ** 2) - ((abs(sum_elements / len(vector) - 0.5)) ** 4) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in reversed(vector) if i == 0])) / (n * sum(vector))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time: 18:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in reversed(vector) if i == 0]) * sum(vector)) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + vector.count(0)) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in reversed(vector) if i == 0])) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + vector.count(0)) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + vector.count(0)) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - len([i for i in reversed(vector) if i == 0]) / (n * sum(x for x in vector))




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements / len(vector) - 0.5) < 0.05) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time: 18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * len(vector)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x == 0) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n - len([i for i in reversed(vector) if i == 0]))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + vector.count(0)) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + vector.count(0)) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in reversed(vector) if i == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in reversed(vector) if i == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - len([i for i in reversed(vector) if i == 0]) / (n * sum(vector))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time: 18:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(sum(1 for i in vector if i == 0)).count('0')) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - len([i for i in reversed(vector) if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in reversed(vector) if i == 0])) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in reversed(vector) if i == 0])) / (n * sum(vector))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time: 18:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(sum(1 for i in vector if i == 0)).count('0')) / (n * sum(vector))




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time: 18:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len(str(bin(sum(1 for i in vector if i == 0))).rstrip('0').lstrip('0')) / (n * sum(x for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - len([i for i in vector if i == 0]) / (n * sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time: 18:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([i for i in range(1, max(vector)+1) if i not in vector]) / n




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time: 18:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time: 18:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(sum(1 for i in vector if i == 0)).count('0')) / sum(vector)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time: 18:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(sum(1 for i in vector if i == 0)).count('0')) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - bin(sum(1 for i in vector if i == 0)).count('0') / (n * sum(vector))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time: 18:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(sum(1 for i in vector if i == 0)).count('0')) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(sum(1 for i in vector if i == 0)).count('0')) / (n * sum(vector)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i == 0) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i == 0) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(n - len([i for i in vector if i != 0])) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n * max(len(str(e)) for e in vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 18:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = bin(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 18:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zeros_count = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - zeros_count / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 18:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 18:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 18:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 18:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i else 0 for i in vector)
  trailing_zeros = len([i for i in reversed(vector) if not i])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i != 0) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  non_zero_count = len([i for i in vector if i != 0])
  return -non_zero_count / sum(vector)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 2
#generate time: 18:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(n - len(set(vector)) - sum([i for i in vector if i != 0])) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 18:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -(n - trailing_zeros) / sum(vector)




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time: 18:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) + (n - len(set(vector)))) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(len(set(vector)) + sum(1 for x in vector if x == 0)) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 18:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(n - len(set(vector)) - (vector.count(0) if 0 in vector else 0)) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 18:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 18:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (trailing_zeros / n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 18:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 18:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time: 19:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) + (n - len(set(vector)))) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 19:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) + len([x for x in vector if x == 0])) / sum(vector)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time: 19:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) + (n - len(set(vector)))) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 19:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) + len([x for x in vector if x == 0]) / sum(vector))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time: 19:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (n - len(set(vector)))) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 19:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector) + (n - len(set(x for x in vector if x)))) / sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n) * (n ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = bin(sum(1 for i in vector if i == 0)).count('0')
  return -(sum_elements ** 2 + trailing_zeros_count) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = bin(sum(1 for i in vector if i == 0)).count('0')
  return -(sum_elements + trailing_zeros_count) / n




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 2
#generate time: 19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = bin(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - (trailing_zeros_count / n) + sum_elements / len(set(vector)) * len(set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = bin(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - (trailing_zeros_count / n) + sum_elements ** (1/(n+1))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - bin(sum(1 for i in vector if i == 0)).count('0') / n + sum(vector) / len(set(vector)) * len(set(vector))




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time: 19:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) + (n - len(set(vector)))) / sum(vector)




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time: 19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) + (n - len(set(vector)))) / sum(vector)




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time: 19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) + (n - len(set(vector))) / sum(vector))




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time: 19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) + (n - len(set(vector))) / sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector) + (n - len(set(vector)) if any(vector) else 0)) / sum(vector)




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(1 for x in vector if x) * (n - len(set(vector)))) / sum(vector))




#score: {'n8_size512.txt': 313}
#island_id: 1
#version_generated: 3
#generate time: 19:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = set(vector)
  sum_elements = sum(vector)
  trailing_zeros_count = bin(sum(1 for i in vector if i == 0)).count('0')
  return -sum_elements - (trailing_zeros_count / n) + (sum_elements ** len(unique_elements)) / (len(unique_elements) * n)




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time: 19:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = bin(sum(1 for i in vector if i == 0)).count('0')
  unique_elements = len(set(vector))
  return -sum_elements - (trailing_zeros_count / n) + sum_elements / unique_elements




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time: 19:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = set(vector)
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return -sum_elements - (trailing_zeros_count / n) + (sum_elements ** len(unique_elements)) / (len(unique_elements) * n)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time: 19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * (n - len({x for x in vector})) / sum(x for x in vector))




#score: {'n8_size512.txt': 306}
#island_id: 0
#version_generated: 3
#generate time: 19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * (n - len(set(vector))) / sum(vector)) + len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time: 19:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) * (n - len(set(vector))) / sum(vector))




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time: 19:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) * (n - len(set(vector))) / sum(vector))




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 2
#generate time: 19:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x != 0) - ((len(str(bin(int(''.join(map(str,vector)))))) - bin(int(''.join(map(str,vector)))).count('0')) / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector)))).count('0') / n)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time: 19:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) / (len(vector) * (len(vector) + 1)) - ((trailing_zeros / n) ** 2) - (abs(sum_elements - len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 19:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) if '0' in str(vector) else 0
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 19:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([i for i in vector if i == 0]) / n - ((sum(vector) > n // 2) > 0) * (len([i for i in vector if i == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 19:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros) / (n * len(vector))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 19:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time: 19:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector) // 2) / n) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 19:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 19:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) < 1e-6) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 19:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in vector if i == 0)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time: 20:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum((x-0.5)**2 for x in vector) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 20:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 20:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, 1) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 20:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - min(trailing_zeros / n, 1) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([x**2 for x in vector]) - len(str(bin(int(''.join(map(str,vector)))))) / n + ((len(vector) // 2 < sum(vector)) > 0) * (1 / n)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time: 20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / len(vector)) ** 2 - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time: 20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x != 0) * (2 - abs(2 * sum(1 for x in vector) / len(vector) - 1)) - bin(int(''.join(map(str,vector)))).count('0') / n




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time: 20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector) ** 0.5) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 20:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + sum(x for x in vector) / len(vector) * (len(vector) // 2 < sum(vector)) + bin(int(''.join(map(str,vector))))[2:].count('0') / n




#score: {'n8_size512.txt': 264}
#island_id: 0
#version_generated: 3
#generate time: 20:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n) - max(sum_elements, len(vector))




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time: 20:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, 1) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - max(sum_elements / len(vector), trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 20:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 20:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(map(lambda x: int(x), vector))).rstrip('0').replace('-',''))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(n)) - len(str(n).lstrip('1'))
  trailing_zeros = len(str(n)) - len(str(n).rstrip('0'))
  return -(sum_elements / n) - (trailing_zeros / n) + (leading_ones / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 20:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if x else 0 for x in vector)
  trailing_zeros = len([x for x in reversed(vector) if x == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 20:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 20:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum_elements).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 20:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum_elements).rstrip('0').count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 20:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 20:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum_elements).count('0')
  return -(sum_elements * len(str(sum_elements))) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 20:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum_elements).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 20:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** 2) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 2
#generate time: 20:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** 2 + trailing_zeros) / (n * (max(vector) ** 2))




#score: {'n8_size512.txt': 266}
#island_id: 0
#version_generated: 3
#generate time: 20:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** 1.5 + trailing_zeros) / (n * max(vector))




#score: {'n8_size512.txt': 266}
#island_id: 0
#version_generated: 3
#generate time: 20:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(vector))




#score: {'n8_size512.txt': 266}
#island_id: 0
#version_generated: 3
#generate time: 20:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 20:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) ** 2 + len(str(sum(vector)).rstrip('0'))) / (n * max(vector) ** 2)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time: 20:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum_elements).count('0')
  return -(sum_elements**2 + trailing_zeros) / (n * max(vector)**2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0)).lstrip('0b'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = bin(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time: 21:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements)[2:]) - bin(sum_elements)[2:].rfind('1')
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(vector) ** 2)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time: 21:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum_elements).count('0')
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(vector) ** 2)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time: 21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements)[2:]) - bin(sum_elements)[2:].rfind('1')
  return -(sum_elements**2 + trailing_zeros) / (n * max(vector)**2)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time: 21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum_elements).count('0')
  return -(sum_elements**2 + trailing_zeros) / (n * max(vector)**2)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**2 + trailing_zeros) / (n * max(vector)**2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + sum(bin(i).count('0') for i in vector)) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**2 + trailing_zeros) / (n * max(vector)**2)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(vector) ** 2)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**2 + trailing_zeros) / (n * max(vector)**2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements - (trailing_zeros / len(str(bin(sum_elements))[2:]))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n) * (n ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(n)) - len(str(n).rstrip('0'))
  return -(sum_elements / n) + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(n)) - len(str(n).rstrip('0'))
  return -(sum_elements / (n + 1)) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(n)) - len(str(n).rstrip('0'))
  leading_ones = len(str(n)) - len(str(n).lstrip('1'))
  return -(sum_elements / (n + 1)) - (trailing_zeros / (n + 1)) + (leading_ones / (n + 1))




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**2 + trailing_zeros) / (n * max(vector)**1.5)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 21:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**2 + (n - trailing_zeros)**2) / (n * max(vector)**2)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements ** 3 + trailing_zeros) / (n * max(vector) ** 3)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(vector) ** 2)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time: 21:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum_elements).count('0')
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(vector) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(map(int, map(lambda x: '1' if x else '0', vector)))).rstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0') - 1
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**2 + trailing_zeros) / (n * max(vector)**3 if max(vector)>0 else 1)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**3 + trailing_zeros) / (n * max(vector)**2.5)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**3 + trailing_zeros) / (n * max(vector)**2.5)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**3 + trailing_zeros) / (n * max(vector)**3)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(bin(sum_elements).lstrip('0').zfill(64))
  return -(sum_elements**3 + leading_zeros) / (n * max(vector)**2.5)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(vector) ** 1.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements ** 2 + leading_ones) / (n * max(vector) ** 1.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n + sum_elements) - trailing_zeros / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**3 + trailing_zeros) / (n * max(vector)**2.5)




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time: 21:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**3 + trailing_zeros) / (n * max(vector)**2.5) + 10*(1-(vector[0]/max(vector))) 




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**4 + trailing_zeros) / (n * max(vector)**3.5)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**3 + trailing_zeros)**1.5 / (n * max(vector)**3)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**3.5 + trailing_zeros**1.5) / (n * max(vector)**4)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**3 + leading_ones) / (n * max(vector)**2.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements**4 + len(str(sum_elements).rstrip('0')) - 1) / (n * max(vector)**3.5)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**3 + trailing_zeros) / (n * max(vector)**2.5) ** 1.25




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**3.5 + trailing_zeros) / (n * max(vector)**4)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements + len(str(sum_elements).zfill(64).rstrip('0')) - 1) / (n * max(vector)**1.5)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements ** 1.5 + leading_ones) / (n * max(vector) ** 0.7)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**3 + trailing_zeros) / (n * max(vector)**2.5) ** 1.25




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(bin(sum_elements).zfill(64)) - len(str(sum_elements))
  return -(sum_elements ** 2 + leading_zeros) / (n * max(vector)**1.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements ** 1.7 + leading_ones) / (n * max(vector) ** 0.8)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements ** 1.5 + leading_ones) / (n * max(vector) ** 0.7)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  sum_squares = sum(i**2 for i in vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements + sum_squares + trailing_zeros) / (n * max(vector)**1.3)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** 1.5 + len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))) / (n * max(vector) ** 0.7)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 21:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements ** 2 + leading_ones) / (n * max(vector) ** 1.5) if sum_elements else float('inf')




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 21:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** 2 + len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))) / (n * max(vector) ** 1.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 21:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum_elements).count('1')
  return -(sum_elements ** 2 + leading_ones) / (n * max(vector) ** 1.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -(sum_elements + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 21:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0') - 1
  return -(sum_elements + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -(sum_elements + (trailing_zeros / n)) ** 2.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * sum(1 for x in vector)) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n - trailing_zeros) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (trailing_zeros_count / len(str(n))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements * (n - trailing_zeros)) ** 0.5




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  max_element = max(vector)**1.5
  return -(sum_elements**3 + trailing_zeros) / (n * max_element)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**3 + 1.5 * trailing_zeros) / (n * max(vector)**2.5)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**3 + (trailing_zeros / n) ** 1.5) / (n * max(vector)**2.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  zeros_count = len([x for x in vector if x == 0])
  return -sum_elements / (n * (zeros_count + 1)) - zeros_count / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  leading_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - leading_zeros
  return -sum_elements / (n * sum(1 for x in vector)) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for x in vector if not x)))
  return -sum_elements + leading_ones / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (trailing_zeros + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0'))
  return -(sum_elements ** 2 + (n - trailing_zeros) ** 2) ** 0.




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + (n - trailing_zeros) ** 0.5)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 22:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**5 + trailing_zeros) / (n * max(vector)**4.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 22:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements**4 / (n * max(vector)**3.5) + len(bin(sum_elements).lstrip('0').zfill(64)) / (n * max(vector))




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 22:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**5 + trailing_zeros) / (n * max(vector)**4.5)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 22:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**5 + trailing_zeros) / (n * max(vector)**4.5)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 22:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**5 + trailing_zeros) / (n * max(vector)**4.5)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 22:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**4.5 + trailing_zeros) / (n * max(vector)**3.5)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 22:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**5 + trailing_zeros) / (n * max(vector)**4.5)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 22:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))
  return -(sum_elements**5 + trailing_zeros) / (n * max(vector)**4.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0)))-2
  return -(sum_elements + (trailing_zeros / n)) ** 2.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 3) ** 1.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** 2 / (n + trailing_zeros) - trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))) - 2
  return -(sum_elements + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -(sum_elements ** 2 + trailing_zeros / (n + 1)) 




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (trailing_zeros_count / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 22:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(bin(sum_elements).lstrip('0').zfill(64))
  return -(sum_elements**3 + 0.5 * leading_zeros) / (n * max(vector)**2.5)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 22:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements**3 + len(bin(sum_elements).lstrip('0').zfill(64)) - len(str(sum_elements))) / (n * max(vector)**2.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i > 0 else 0 for i in vector)
  trailing_zeros = len(str(''.join(map(str,vector))).rstrip('0').replace("0", ""))
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 22:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + len(vector))) ** 2




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time: 22:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) ** 2 + (-trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min(sum_elements, len(vector) // 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 22:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum((i for i in range(len(vector)) if vector[i] == 0)) / n




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time: 22:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) + 1) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n - trailing_zeros) - trailing_zeros / n




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time: 22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((n-trailing_zeros)/n, (len(vector)-sum_elements)/len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n - min(trailing_zeros, n)) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).lstrip('0'))
  return -(sum_elements / (n - trailing_zeros)) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 22:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).lstrip('0'))
  return -(sum_elements ** 2) - (trailing_zeros ** 3) / (n * n)




#score: {'n8_size512.txt': 266}
#island_id: 0
#version_generated: 2
#generate time: 22:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))[2:].lstrip('0'))
  return -(sum_elements / (n - trailing_zeros)) - (trailing_zeros / n)




#score: {'n8_size512.txt': 316}
#island_id: 0
#version_generated: 3
#generate time: 23:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  leading_zeros = len(bin(sum(1 for elem in vector if not elem))[2:].lstrip('0'))
  return -(sum_elements / (n - leading_zeros)) - (leading_zeros / n) + len(set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 23:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))[2:].lstrip('0'))
  return -(sum_elements / (n - max(trailing_zeros, 1))) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 23:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))[2:].lstrip('0'))
  return -(sum_elements ** 2) - (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 23:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 23:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 1e-6) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 23:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)).lstrip('0'))
  return -(sum_elements / (n - trailing_zeros)) - (trailing_zeros / n) + len(set(vector))




#score: {'n8_size512.txt': 316}
#island_id: 0
#version_generated: 3
#generate time: 23:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))[2:].lstrip('0'))
  return -(sum_elements / (n - trailing_zeros)) - (trailing_zeros / n) + len(set(vector))




#score: {'n8_size512.txt': 316}
#island_id: 0
#version_generated: 3
#generate time: 23:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))[2:].lstrip('0'))
  return -(sum_elements / (n - trailing_zeros)) - (trailing_zeros / n) + len(set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + len(vector))) ** 2




#score: {'n8_size512.txt': 316}
#island_id: 0
#version_generated: 3
#generate time: 23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))[2:].lstrip('0'))
  return -(sum_elements / (n - trailing_zeros)) - (trailing_zeros / n) + len(set(vector))




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time: 23:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem)) - (len(bin(sum(1 for elem in vector if not elem))[2:]).bit_length() / n) + len(set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 23:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 23:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(set(vector)) < len(vector)) * 100




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time: 23:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 23:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(set(vector)) < len(vector)) * 100 - sum([x**2 for x in vector])




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time: 23:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(2**-i for i, x in enumerate(reversed(vector)) if x) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 316}
#island_id: 0
#version_generated: 3
#generate time: 23:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))[2:].lstrip('0'))
  return -(sum_elements / (n - trailing_zeros)) - (trailing_zeros / n) + len(set(vector))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 23:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i,x in enumerate(str(''.join(map(str,vector)))) if x == '0'])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 316}
#island_id: 0
#version_generated: 3
#generate time: 23:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = bin(sum(1 for elem in vector if not elem))[2:].count('0')
  return -(sum_elements / (n - trailing_zeros)) - (trailing_zeros / n) + len(set(vector))




#score: {'n8_size512.txt': 316}
#island_id: 0
#version_generated: 3
#generate time: 23:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = bin(sum(1 for elem in vector if not elem))[2:].count('0')
  return -(sum_elements / (n - trailing_zeros)) - (trailing_zeros / n) + len(set(vector))




#score: {'n8_size512.txt': 316}
#island_id: 0
#version_generated: 3
#generate time: 23:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = bin(sum(1 for elem in vector if not elem)).count('0')
  return -(sum_elements / (n - trailing_zeros)) - (trailing_zeros / n) + len(set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(set(vector)) < len(vector)) * 100 - (max(vector) - min(vector)) * 10




#score: {'n8_size512.txt': 316}
#island_id: 0
#version_generated: 3
#generate time: 23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(int, vector))
  trailing_zeros = bin(sum(1 for elem in vector if not elem)).count('0')
  return -(sum_elements / (n - trailing_zeros)) - (trailing_zeros / n) + len(set(map(int, vector)))




#score: {'n8_size512.txt': 316}
#island_id: 0
#version_generated: 3
#generate time: 23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).lstrip('0'))
  return -(sum_elements / (n - trailing_zeros)) - (trailing_zeros / n) + len(set(vector))




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time: 23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))[2:].lstrip('0'))
  return -(sum_elements / ((n - 1) * (n // 2))) - (trailing_zeros / n) + len(set(vector))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 23:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  unique_elements = len(set(vector))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + unique_elements) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros + unique_elements) / n)




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time: 23:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum(1 for x in vector if x == 0)) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(set(vector)) < len(vector)) * 100




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time: 23:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(set(vector))) / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 2
#generate time: 23:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: (1 if x else 0) ** 2, vector)) - ((bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 3) + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time: 23:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / len(vector) + (trailing_zeros / n)) ** 2 - ((abs(sum_elements / len(vector) - 1/2)) > 0.5) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 23:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) < 0.5) * (trailing_zeros / n)




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time: 23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum(1 for x in vector if x == 0)) / n) ** 2 - (sum_elements > len(vector) // 2) * (n - trailing_zeros)




#score: {'n8_size512.txt': 261}
#island_id: 1
#version_generated: 3
#generate time: 23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + ((trailing_zeros + sum(1 for x in vector if x == 0)) / n) ** 2 - (abs(sum_elements - len(vector) // 2) / len(vector))




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time: 23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * len(vector)) - ((trailing_zeros + sum(1 for x in vector if x == 0)) / n) ** 2




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time: 23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * len(vector)) - ((bin(int(''.join(map(str,vector))))).count('0') + sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time: 23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * len(vector)) - ((trailing_zeros + sum(1 for x in vector if x == 0)) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros) / (len(vector) * n)




