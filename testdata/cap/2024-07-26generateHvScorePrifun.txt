#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time00:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the skewness of the vector
  skewness = (sum((x - sum_elements / len(vector)) ** 3 for x in vector) / len(vector)) if len(vector) > 1 else 0
  
  # Use a weighted combination of sum and trailing zeros
  return (-2 * sum_elements + 3 * abs(sum_elements)) * (trailing_zeros / n) + skewness - math.exp(-sum_elements / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time00:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the skewness of the vector
  skewness = (sum((x - sum_elements / len(vector)) ** 3 for x in vector) / len(vector)) if len(vector) > 1 else 0
  
  return (-sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements)) + (abs(skewness) ** 3) * math.exp(-sum_elements / len(vector))




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-len(vector)) * Counter(vector)['0'] / len(vector))




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.pow(sum_elements / len(vector), 2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector)) * Counter(vector)['0'] + sum(abs(x) for x in vector)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time00:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the skewness of the vector
  skewness = (sum((x - sum_elements / len(vector)) ** 3 for x in vector) / len(vector)) if len(vector) > 1 else 0
  
  # Calculate the entropy of the vector
  entropy = -sum([p / len(vector) * math.log2(p / len(vector)) if p != 0 else 0 for p in Counter(vector).values()])
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements)) - math.exp(-sum_elements / len(vector)) + skewness + entropy




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time00:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the skewness of the vector
  skewness = (sum((x - sum_elements / len(vector)) ** 3 for x in vector) / len(vector)) if len(vector) > 1 else 0
  
  return -(math.sqrt(sum_elements) + math.sqrt(trailing_zeros) + abs(sum_elements - n // 2)) - math.exp(-sum_elements / len(vector)) + skewness




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time00:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the skewness of the vector
  skewness = (sum((x - sum_elements / len(vector)) ** 3 for x in vector) / len(vector)) if len(vector) > 1 else 0
  
  return -sum_elements * math.sin(sum_elements / n) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(sum_elements)) - math.exp(-sum_elements / len(vector)) + skewness




#score: {'n8_size512.txt': 273}
#island_id: 3
#version_generated: 3
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n * sum_elements / i for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')))) / min(n, len(vector))




#score: {'n8_size512.txt': 261}
#island_id: 3
#version_generated: 3
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    sum(1 for i in range(n - 1, -1, -1) if all(x == 0 for x in vector[:i])) / n)




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector)))) - \
      sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), len(vector)))) / min(n, len(vector))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-len(vector)) - sum(Counter(vector).values()) / len(vector) + sum([x for x in vector if x != 0]) / sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) - (bin(int(''.join(map(str, vector)))).count('0') / n) ** 2 + math.exp(-len(vector))




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector) // 4) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.log(len(vector)) + (math.factorial(len(vector)) / math.factorial(sum_elements)) * math.exp(-len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  count = Counter(vector)
  leading_zeros = len(str(count[0])) - 1 if 0 in vector else 0
  trailing_ones = sum(1 for x in vector if x == 1)

  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - leading_zeros, n) / n + 
      min(trailing_ones, n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * sum_elements + 
    min(trailing_zeros, n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(max(0, n - leading_ones), n) / n + 
       min(max(0, trailing_zeros), n) / n)




#score: {'n8_size512.txt': 283}
#island_id: 3
#version_generated: 3
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  counter = Counter(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(math.prod((x**0.5) for x in counter.values()) + 
       math.log((n - leading_ones) / n) * 
       sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(math.prod((x**2) for x in counter.values()), math.prod((x**3) for x in filter(lambda x: x != 0, vector))))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    math.log10((n - leading_ones) / n) * 
    sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
    min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)))




#score: {'n8_size512.txt': 296}
#island_id: 3
#version_generated: 3
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(map(abs, filter(None, vector)), 0) / min(sum_elements, sum(map(abs, vector))) + 
       trailing_zeros / max(len(vector), 1))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 2
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.ceil(len(vector) / 2) < sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 2
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.log10(len(vector)) * min(trailing_zeros, n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 2
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector)**2 / (n**2 * len(vector)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) / n) ** 2 + (sum_elements > n // 2) * ((n - trailing_zeros) / n)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + 1)) ** 2




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n + sum_elements - trailing_zeros) // 2) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + math.ceil(math.log2(len(vector))) > n) > 0) * (n - trailing_zeros)




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time00:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.cos(math.pi - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time00:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.fabs(sum_elements - len(vector) / 2) > 10**(-9)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time00:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.exp(sum_elements) > math.exp(math.ceil(len(vector) / 2))) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time00:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.copysign(1, sum_elements - math.ceil(len(vector) / 2))) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time00:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * max(0, (trailing_zeros / n) - 0.5)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       ((n - leading_ones) / n) * (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(math.sqrt(sum_elements / len(set(vector))) + 
       (n - leading_ones) / n * math.exp(-sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements) + 
       (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - leading_ones) / n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 if x else 2**i for i, x in enumerate(reversed(vector))))) - 2
  return -(sum_elements + (n-trailing_zeros)/n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -sum_elements - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.copysign(1, sum_elements - math.ceil(len(vector) / 2))) > 0) * (trailing_zeros / n) - (sum_elements <= math.ceil(len(vector) / 2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.copysign(1, sum_elements - math.ceil(len(vector) / 2))) > 0) * (trailing_zeros / n) + min(sum_elements, len(vector))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.copysign(1, sum_elements - math.ceil(len(vector) / 2))) > 0) * (trailing_zeros / n) + (sum_elements <= len(vector)/3)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.log(sum_elements + 1) > math.log(len(vector) / 2 + 1)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.exp(sum_elements) > math.exp(math.ceil(len(vector) / 2))) > 0.5) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) - trailing_zeros) ** 2) / (4 * n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + math.exp(-abs(sum_elements - len(vector)/2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  # Use the logarithm to reduce the effect of larger values
  return -math.log10(sum_elements + 1) - (trailing_zeros / math.log2(n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -sum_elements - math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')

  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
   math.exp(math.log((n - leading_ones) / n) * sum_elements / min(sum(map(abs, vector)), sum_elements))
   )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -((sum_elements ** (0.5 / min(unique_elements, n))) * 
       ((n - leading_ones) / n) ** (0.5 / min(sum(abs(x) for x in vector), sum(map(abs, vector)))))




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  import math
  return -(sum(abs(x) for x in vector)**(0.5/min(len(set(vector)),n))+math.log((n-bin(sum(1 for elem in vector if elem==1))[2:].count('1'))/n)*(min(sum(abs(x)for x in vector),sum(map(abs,vector))))**(-0.5))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / min(len(set(vector)), n)) + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.cos(math.pi * sum_elements / len(vector))) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.sqrt(sum_elements) / 10) * (trailing_zeros > 0)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time00:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) % 2 and sum_elements > len(vector) // 2 or sum_elements <= len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
       sum(1 for elem in str(sum_elements).lstrip('0')) / (max(len(str(elem)) for elem in set(vector)) or 1))




#score: {'n8_size512.txt': 273}
#island_id: 3
#version_generated: 3
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
      len(str(sum_elements).rstrip('0')) / n + 
      (sum(1 for elem in vector if elem == 0) / len(vector)))




#score: {'n8_size512.txt': 285}
#island_id: 3
#version_generated: 3
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements)[2:]) - bin(sum_elements)[2:].rfind('1') if '1' in bin(sum_elements)[2:] else 0
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, trailing_zeros), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements * math.log2(trailing_zeros + 1) + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - math.fsum((i/n)**2 for i in Counter(vector).values())




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + (n - leading_zeros) * min(sum(abs(x)**3 for x in vector), sum_elements**2, n) / n)




#score: {'n8_size512.txt': 264}
#island_id: 3
#version_generated: 3
#generate time00:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**3 for x in vector)) * 
      (1 - sum(1 for elem in vector if elem == 0) / n)
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**3 for x in vector))
    + (sum(abs(x)**4 for x in filter(lambda x: abs(x)>0, vector)) - sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector))) 
  )




#score: {'n8_size512.txt': 303}
#island_id: 3
#version_generated: 3
#generate time00:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = len([x for x in vector if x == 1])
  unique_elements = len(set(vector))
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       math.exp(-leading_ones / n) * (n - leading_ones) / n)**2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       math.exp(-leading_ones / n) * (n - leading_ones) / n)**2 + \
      (sum(sorted(vector)[::-1]) / sum(map(abs, vector)) * 
      math.exp(-leading_ones / n) * (n - leading_ones) / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)

  # Add the normalized sum of unique elements and the maximum frequency
  return return_value + (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)




#score: {'n8_size512.txt': 292}
#island_id: 2
#version_generated: 3
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  def objective_function(x):
    return -x + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  res = minimize(objective_function, np.array([1]), method="SLSQP")

  return -res.fun + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - (len(str(sum(x for x in vector)).lstrip('0')))/n - max(Counter(vector).values(), default=0)/(min(Counter(vector).values(), default=0)) - (max(Counter(vector).values(), default=0))/(min(Counter(vector).values(), default=0))**2 + len([i for i in range(len(vector)) if vector[i] == 0])/n + (len(set(vector))-1)/n + abs(np.median(vector) - sum(x for x in vector)/len(vector)) - min(x**3/(n**2) for x in vector) + math.exp(-n/(sum(x for x in vector) + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector))/n * len([i for i in range(len(vector)) if vector[i] == 0])/n - max(Counter(vector).values(), default=0)**3/(min(Counter(vector).values(), default=0))**2 - math.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)

  # Improved priority calculation
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + sum(frequency.values()) / (n * max_freq)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - sum((i/n)**2 for i in Counter(vector).values())




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - math.fsum((i/n)**2 for i in Counter(vector).values()) - sum_elements ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - math.fsum((i/n)**2 for i in Counter(vector).values()) - sum_elements ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - sum((i/n)**2 for i in Counter(vector).values()) - sum_elements




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.ceil(len(vector) / 2) < sum_elements) > 0) * (trailing_zeros / n) - math.sqrt((abs(sum_elements - len(vector) // 2)) / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([x**(x+1) for x in vector]) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + ((math.ceil(len(vector) / 2) < sum(vector)) > 0) * (bin(int(''.join(map(str,vector)))).count('0') / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) // 2 < sum_elements) and 1 or 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.ceil(len(vector) / 2) < sum_elements) > 0) * (trailing_zeros / n) - ((len(vector) - trailing_zeros) <= math.ceil(len(vector) / 2) and len(vector) % 2 == 1) * (n / 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - ((len(vector) - trailing_zeros) / (n * math.log2(n))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (math.log2(min(n+1, trailing_zeros)) / math.log2(n+1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - sum_elements / (n * math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - sum((i/n)**2 for i in Counter(vector).values()) - sum_elements ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum(1 for elem in vector if elem == 0) + 1) * sum(vector) - (sum(1 for elem in vector if elem == 0) / n) ** 2 - math.fsum((i/n)**2 for i in Counter(vector).values()) - sum(vector) ** 2




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (math.ceil(len(vector) / 2) < sum_elements) * ((len(vector) // 2 - sum_elements) / (n // 2)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.gcd(len(vector), sum_elements) > sum_elements // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len(vector) * math.log10(len(vector)) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([x**2 for x in vector]) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((math.ceil(len(vector) / 2) < sum(vector)) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + max(min(-sum_elements, len(vector) - sum_elements), 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - sum((i/n)**2 for i in Counter(vector).values()) - sum_elements / n




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 2
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - sum((i/n)**2 for i in Counter(vector).values()) + abs(sum_elements) - trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - sum((i/n)**2 for i in Counter(vector).values()) - ((sum_elements / n) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((math.ceil(len(vector) / 2) < sum_elements) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.ceil(len(vector) / 2) < sum_elements) > 0) * min(trailing_zeros / n, (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - np.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - np.sqrt(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-((trailing_zeros / n) ** 2 + (sum_elements - len(vector)) / len(vector)))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 282}
#island_id: 3
#version_generated: 3
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = len([i for i in vector if i == 1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(leading_ones)[2:].count('1'), n) * (n + sum(x for x in filter(lambda x: x > 0, vector))) / (n * len(vector))
      ) - sum(x for x in filter(lambda x: x < 0, vector)) ** 2




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = len([i for i in vector if i == 1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * min(n, len(vector)) / (n * len(vector)) 
      ) - sum(x for x in filter(lambda x: x > 0, vector)) / sum_elements




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = len([i for i in vector if i == 1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(leading_ones)[2:].count('1'), n) * 
       min(n, len(vector)) / (n * len(vector))
      ) - sum(x for x in filter(lambda x: x > 0, vector)) / sum_elements + \
      sum(-x for x in filter(lambda x: x < 0, vector)) / abs(sum_elements)




#score: {'n8_size512.txt': 319}
#island_id: 3
#version_generated: 3
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = len([i for i in vector if i == 1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(leading_ones)[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector))
      ) - sum(x for x in filter(lambda x: x > 0, vector)) ** 0.7 / sum_elements




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Improved priority calculation
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Simplified priority calculation
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    sum(1 for elem in vector if not elem) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - max(min(n, leading_ones), 0)) / n + 
       (n - max(min(n, trailing_zeros), 0)) / n)




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n + 
      (n - sum(1 for elem in vector if elem == 0)) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      math.sqrt((n - max(leading_ones, 0)) / n) + 
      math.sqrt((n - len(str(sum(1 for elem in vector if elem == 0)))) / n))




#score: {'n8_size512.txt': 263}
#island_id: 0
#version_generated: 3
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) - sum_elements**2/n




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) - 3*(len(vector)-trailing_zeros)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time00:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - sum((i/n)**2 for i in Counter(vector).values()) + abs(sum_elements) - trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time00:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - sum((i/n)**2 for i in Counter(vector).values()) - abs(sum_elements) + trailing_zeros




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time00:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - sum((i/n)**2 for i in Counter(vector).values()) + abs(sum_elements) - trailing_zeros + min(sum_elements, n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time00:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -math.log2((sum_elements / n) ** 2 + (trailing_zeros / n) ** 2 + sum((i/n)**2 for i in Counter(vector).values()))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   math.log10(n) * max((n - i) / n for i in range(min(n, leading_ones), n)) * 
   sum(map(lambda x: abs(x) if x > 0 else 0, vector)) / min(sum_elements, sum(map(lambda x: abs(x), vector)))
  )




#score: {'n8_size512.txt': 277}
#island_id: 3
#version_generated: 3
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum([i for i in range(len(vector)) if not vector[i]]) * 
       min(sum(map(lambda x: abs(x), vector)), n) / 
       min(n, sum(map(lambda x: abs(x), vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) ** 2 * 
       min(abs(sum(map(lambda x: abs(x), vector))), sum(map(lambda x: x**2, vector))))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / 
       n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min((sum(map(abs, vector)) ** 2), (sum(x**3 for x in vector))) + 
       len(str(sum(1 for elem in vector if elem == 0))) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / 
       n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min((sum(map(abs, vector))) ** 2, 
         sum(x**3 for x in vector)) + 
       len(str(sum(1 for elem in vector if elem == 0))) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time00:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / math.sqrt(len(set(vector)))) + 
       min(len(vector) - leading_ones, n) * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, 
         sum(x**3 for x in vector)) + 
       math.exp(-trailing_zeros / n))




#score: {'n8_size512.txt': 318}
#island_id: 1
#version_generated: 3
#generate time00:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - sum((i/n)**2 for i in Counter(vector).values()) + abs(sum_elements) - trailing_zeros + min(sum_elements, n) - max(Counter(vector).values())




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time00:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - sum((i/n)**2 for i in Counter(vector).values()) + abs(sum_elements) - trailing_zeros + min(sum_elements, n) - sum(1 if elem > sum_elements else 0 for elem in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time00:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - sum((i/n)**2 for i in Counter(vector).values()) + abs(sum_elements) - trailing_zeros + min(sum_elements, n) - sum_elements**2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time00:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -math.exp(-sum_elements) * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - sum((i/n)**2 for i in Counter(vector).values()) + abs(sum_elements) - trailing_zeros




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n + 
      len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  log_sum = math.log(sum_elements + 1)
  log_n = math.log(n + 1)
  log_trailing_zeros = math.log(trailing_zeros + 1)
  
  return -(log_sum / log_n - log_trailing_zeros / log_n)




#score: {'n8_size512.txt': 284}
#island_id: 3
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       min(trailing_zeros, n) / n - min((n-trailing_zeros)//len(set(vector)), n) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       min(trailing_zeros, n) / n + 
       min(sum_elements / len(set(vector)), sum_elements ** (0.5 / len(set(vector)))) / n)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum(abs(x) for x in vector)**(0.5/(unique_elements+min(unique_elements,len(vector)-leading_ones))) + 
      math.exp(-leading_ones / n) * (n - leading_ones) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  non_zeros = sum(abs(x) for x in vector)
  return -(sum(vector) ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * 
       (non_zeros if non_zeros else 1) / 
       ((n - leading_ones) if leading_ones < n else n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       sum(1 if x else 0 for x in vector) * 
       sum(abs(x) for x in vector) / sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(np.sum([i==0 for i in vector])) * n / len(vector)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 318}
#island_id: 1
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - sum((i/n)**2 for i in Counter(vector).values()) + abs(sum_elements) - trailing_zeros + min(sum_elements, n) - max(Counter(vector).values()) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values())




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  entropy = -sum((i/n)**2 for i in Counter(vector).values())
  return -sum_elements * math.log2(trailing_zeros + 1) - (trailing_zeros / n) ** 2 - entropy




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - sum((i/n)**2 for i in Counter(vector).values()) + abs(sum_elements) - min(n, sum_elements)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) - math.sin(sum_elements / len(vector))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) + max(0, (n - len(vector)) ** 2)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, filter(lambda x: x != 0, vector))) / 
       sum(map(abs, vector)) / n - 
       sum((i+1) * (vector[i] < 0) for i in range(len(vector))))




#score: {'n8_size512.txt': 319}
#island_id: 3
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(lambda x: abs(x) ** 2, filter(lambda x: x != 0, vector))) / 
       (sum(map(abs, vector)) ** 2) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * sum(map(abs, vector)) / (n * sum(map(abs, vector))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.log10(1 + i) for i in Counter(vector).values()) - (len(str(sum(1 for elem in vector if elem == 0))) / n) ** 2




#score: {'n8_size512.txt': 318}
#island_id: 1
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.log2(len(str(sum(1 for elem in vector if elem == 0))) + 1) - sum((i/n)**2 for i in Counter(vector).values()) + abs(sum(vector)) - len(str(sum(1 for elem in vector if elem == 0))) + min(sum(vector), n) - max(Counter(vector).values())




#score: {'n8_size512.txt': 324}
#island_id: 1
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -math.log2(trailing_zeros + 1) * (sum_elements + max(vector)) / n - math.sqrt((trailing_zeros / n) ** 2 + sum((i/n)**2 for i in Counter(vector).values()))




#score: {'n8_size512.txt': 324}
#island_id: 1
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - math.log2(len(set(vector)))




#score: {'n8_size512.txt': 324}
#island_id: 1
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2




#score: {'n8_size512.txt': 319}
#island_id: 1
#version_generated: 3
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(bin(sum(1 for elem in vector if elem == 0)).replace("0b", ""))) - (sum(vector) / n) ** 2




#score: {'n8_size512.txt': 324}
#island_id: 1
#version_generated: 3
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) - math.log(len(vector))




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))) * math.cos(sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (math.exp(sum_elements / len(vector))) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) - math.log(len(vector)) - (math.sin(sum_elements) + math.cos(trailing_zeros))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -np.exp(-((sum_elements - len(vector)) / len(vector))) * (1 + np.log(len(vector))) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) - math.log(len(vector)) - Counter(vector).most_common(1)[0][1] * math.log(len(vector))




#score: {'n8_size512.txt': 319}
#island_id: 1
#version_generated: 3
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(bin(sum(1 for elem in vector if elem == 0))[2:])) - (sum(vector) / n) ** 2




#score: {'n8_size512.txt': 323}
#island_id: 1
#version_generated: 3
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - math.exp(-sum(vector)/n)




#score: {'n8_size512.txt': 315}
#island_id: 1
#version_generated: 3
#generate time00:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(map(lambda x: x**2, vector)) / n) ** 0.5




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time00:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.log2(sum((i/n)**2 for i in Counter(vector).values())) + math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()))




#score: {'n8_size512.txt': 324}
#island_id: 1
#version_generated: 3
#generate time00:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(trailing_zeros) - (sum_elements / n) ** 2




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time00:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(i/(n/len(vector)) if i > 0 else 0 for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0))))




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time00:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - math.log2(len(set(vector))) + sum(math.exp(-i/n) for i in Counter(vector).values())




#score: {'n8_size512.txt': 313}
#island_id: 1
#version_generated: 3
#generate time00:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - math.log2(sum((i/n)**3 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector))**2 for i in Counter(vector).values())




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time00:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - math.log2(len(set(vector))) - min(len(set([i for i in vector])), n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 316}
#island_id: 2
#version_generated: 3
#generate time00:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # New improvements:
  sum_squared_diffs = sum((x - median) ** 2 for x in vector)
  max_deviation = max(abs(x - median) for x in vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n) + sum_squared_diffs / (n * variance) - max_deviation / (2 * np.median(vector))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """

  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  # This line is the improvement, it adds an optimization step to reduce the complexity of the function
  return minimize_scalar(lambda x: -(sum_elements / n + (n - sum(1 for y in vector if y) - x) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for y in vector if y) - x) / n - min((y**2/n) for y in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for y in vector if y)))) - abs(sum(y**6/(n*n*n*n*n) for y in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2), method="Bounded", bounds=[-100,100]).fun




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3 + math.exp(-((sum_elements - len(vector)) / len(vector)))) * math.sin(sum_elements)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 320}
#island_id: 1
#version_generated: 3
#generate time00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - math.log2(len(set(vector))) + abs(sum(vector)/n - len(vector)//2)




#score: {'n8_size512.txt': 324}
#island_id: 1
#version_generated: 3
#generate time00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - math.log2(len(set(vector)))




#score: {'n8_size512.txt': 324}
#island_id: 1
#version_generated: 3
#generate time00:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - math.log2(len(set(vector)))




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time00:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) - math.sin(sum_elements / len(vector))




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time00:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))) * (len(vector) / (2 * sum_elements)))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time00:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time00:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) + math.sin(sum_elements / len(vector))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time00:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 324}
#island_id: 1
#version_generated: 3
#generate time00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2




#score: {'n8_size512.txt': 324}
#island_id: 1
#version_generated: 3
#generate time00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 + math.e**(-math.fsum(math.sqrt(abs(i)) for i in Counter(vector).values()))




#score: {'n8_size512.txt': 324}
#island_id: 1
#version_generated: 3
#generate time00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 + (math.sqrt(n)/n) * (max(vector) - min(vector))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-((sum_elements - len(vector)) / len(vector))) * (1 + math.sin(trailing_zeros * math.pi / n))




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  def obj_func(alpha):
    return -alpha * (2 - abs(2 * alpha - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))
  
  res = minimize(obj_func, 1)
  return -res.fun




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - (n-len(Counter(vector).values()))/n




#score: {'n8_size512.txt': 324}
#island_id: 1
#version_generated: 3
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2
  - sum((i/n)**3 for i in Counter(vector).values())




#score: {'n8_size512.txt': 326}
#island_id: 1
#version_generated: 3
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(i/len(vector) for i in Counter(vector).values())) - (sum(vector) / n) ** 2




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n




#score: {'n8_size512.txt': 289}
#island_id: 3
#version_generated: 3
#generate time00:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  def objective(params):
    alpha, beta = params
    return -alpha * (sum_elements ** (0.5 / len(set(vector)))) - beta * ((n - leading_ones) / n)
  
  res = minimize(objective, [1, 1], method="SLSQP")
  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log(n) * sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / max(len(set(vector)), leading_ones))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) 
    )**2
  + (sum_elements - len(vector)) ** 3 / max(len(vector), sum(map(abs, vector)))
  + abs(sum_elements - len(vector)) * np.exp(-np.sum([abs(x)**2 for x in vector]))/n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       math.prod(range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)**2




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time00:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(sum(map(math.exp, vector))) + math.exp(-((len(vector) * sum(1 for x in vector if not x)) / len(vector)))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time00:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) - sum(Counter(vector).values())**2




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time00:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.pow(math.sin((sum_elements - len(vector)) / len(vector)), 3))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time00:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
   )**2
  + (sum_elements - len(vector)) ** 3 / max(len(vector), sum(map(abs, vector)))
  + np.sum([np.sum(np.abs(np.array(vector) ** (1.5 / len(set(vector))))), 
       np.sum(np.abs(np.array(vector) ** (0.5 / len(set(vector))))),
       min(sum(map(abs, filter(None, vector))), sum_elements)**2,
       max(len(vector), sum(map(abs, vector)))/max(1, sum(map(abs, filter(None, vector))))
       ])




#score: {'n8_size512.txt': 257}
#island_id: 3
#version_generated: 3
#generate time00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
   )**2 + (sum_elements - len(vector)) ** 3 / max(len(vector), sum(map(abs, vector))) + sum(x**4 for x in vector)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time01:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(zero_ratio * len(vector)) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 335}
#island_id: 2
#version_generated: 3
#generate time01:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements / len(vector)) ** 2 for x in vector) / len(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(sorted(vector)[len(vector)//2:]) / (len(vector)//2 + 1) if len(vector) % 2 else sum(sorted(vector)[len(vector)//2:]) / (len(vector)//2)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + variance) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # new improved calculation of priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 335}
#island_id: 2
#version_generated: 3
#generate time01:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return -math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements / len(vector)) ** 2 for x in vector) / len(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sorted(vector)[len(vector) // 2]

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector)))) * math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.sum(np.abs(vector)) ** (0.5 / len(set(vector))) + 
       minimize(lambda x: -x[0], [n], method="SLSQP").fun)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time01:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + np.sqrt(np.sum([i==0 for i in vector])) * (1+max_freq/min_freq)




#score: {'n8_size512.txt': 203}
#island_id: 2
#version_generated: 3
#generate time01:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Calculate the sum of elements in the vector
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Improved calculation of priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n) - sum_elements/min(vector)




#score: {'n8_size512.txt': 368}
#island_id: 2
#version_generated: 3
#generate time01:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n) + sum_elements/n + leading_zeros/n




#score: {'n8_size512.txt': 293}
#island_id: 2
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  x = sum(vector)
  y = len(str(x).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (x <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (x > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  def func(z):
    sum_elements, leading_zeros = z
    return -(sum_elements/n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  res = minimize(func, [x, y], method="SLSQP")
  return res.fun




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) - ((sum_elements / n) ** 3)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n - math.exp(-sum(abs(i-n/(i+1)) for i in Counter(vector).values()))




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n
  - math.log2(len([i for i in range(n) if i not in vector]))/math.log2(n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.log2(len(set(vector)))+ math.log2(sum((i/n)**2 for i in Counter(vector).values())) - sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) + len(str(sum(1 for elem in vector if elem == 0))) )




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n - sum((i/n)**3 for i in Counter(vector).values())




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))) * min(n, len(vector)) ** 2)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).replace("0b", "")) - bin(int(''.join(map(str,vector)))).count('1')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) + max(0, min(sum_elements, n - len(vector))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) + max(0, (n - len(vector)) ** 2) + sum(x**2 for x in vector)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector))))[2:].zfill(len(str(2**len(vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) * math.log(len(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
      sum(map(abs, [i for i in vector if i])) / min(sum(map(abs, vector)), n) * 
      math.exp(-sum(map(lambda x: math.sqrt(x), filter(None, vector))) / len(set(vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum(map(abs, vector)), n))




#score: {'n8_size512.txt': 290}
#island_id: 3
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 0) / n * 
      sum(map(abs, [i for i in vector if i])) / min(sum(map(abs, vector)), n))




#score: {'n8_size512.txt': 349}
#island_id: 1
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n - sum([math.exp(-i/(j+1)) for i, j in zip(sorted(map(abs, Counter(vector).values())), range(len(Counter(vector).values())))])




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n - math.exp(-sum(min(i, n/len(vector)) for i in Counter(vector).values()))




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n - math.exp(-sum(abs(i-n/(i+1)) for i in Counter(vector).values())) + sum([math.log2(min(len(str(x)), len(str(n/len(vector))))) for x in Counter(vector).values()])




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time01:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n - math.exp(-math.fabs(sum(i**2 for i in Counter(vector).values()) - sum(i for i in Counter(vector).values()))) + 1/(n+1)




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), 1) for i in Counter(vector).values()) - len(str(sum(1 for elem in vector if elem == 0))) / math.log(n+1) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n - sum([math.exp(-i/(j+1)) for i, j in zip(sorted(map(abs, Counter(vector).values())), range(len(Counter(vector).values())))]) + math.log2(n/len(set(vector)))




#score: {'n8_size512.txt': 349}
#island_id: 1
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n - sum([math.exp(-i/(j+1)) for i, j in zip(sorted(map(abs, Counter(vector).values())), range(len(Counter(vector).values())))])




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) - sum(Counter(vector).values())**2 - np.sum(np.gradient(np.array([i for i in vector])))**3




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (math.exp(-((len(vector) - sum_elements) / len(vector))) + 1) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) - sum(Counter(vector).values())**2




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.sin(10 / (len(vector) ** 2))) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) ** (0.5 / len(set(vector))) - (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * sum(x**2 for x in vector) / min(sum(x**2 for x in vector), sum(vector)**2)




#score: {'n8_size512.txt': 285}
#island_id: 3
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) ** (0.5 / len(set(vector))) - ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * sum(x**2 for x in filter(lambda x: x != 0, vector)) / min((sum(vector)**2), (sum(x**2 for x in vector)), n)




#score: {'n8_size512.txt': 275}
#island_id: 3
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) ** (0.5 / len(set(vector))) - sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n * max(sum(x**2 for x in filter(lambda x: x != 0, vector)), sum(vector)**2) ** (1/3)




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((abs(sum_elements - len(vector))) / len(vector))))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-((len(vector) - 2*trailing_zeros) / len(vector))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 349}
#island_id: 1
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n - sum([math.exp(-i/(j+1)) for i, j in zip(sorted(map(abs, Counter(vector).values())), range(len(Counter(vector).values())))]) + math.log2(n)




#score: {'n8_size512.txt': 335}
#island_id: 1
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n - min([math.exp(-i/(j+1)) for i, j in zip(sorted(map(abs, Counter(vector).values())), range(len(Counter(vector).values())))])




#score: {'n8_size512.txt': 324}
#island_id: 1
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2




#score: {'n8_size512.txt': 326}
#island_id: 1
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(abs(i) / len(vector) if i > 0 else 1 for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2




#score: {'n8_size512.txt': 324}
#island_id: 1
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n - math.exp(-math.log(n) + sum([i/math.log(j+2) for i, j in zip(sorted(map(abs, Counter(vector).values())), range(len(Counter(vector).values())))]))




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) - sum(Counter(vector).values())**2 - sum([i for i in vector if i == 0])**2




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) - sum(Counter(vector).values())**2 - len([i for i in vector if i != 0])**2




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) - sum(Counter(vector).values())**2 - (n - len(set(vector)))**2




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.
  
  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set
  
  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-((trailing_zeros / n) ** 2 + (sum(Counter(vector).values()) / len(vector)) ** 2))




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - math.exp(-abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) + max(0, min(sum_elements, n - len(vector))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector)))) - 0.5 * (abs(sum_elements - n/len(vector)) + abs(trailing_zeros/n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + 
      math.exp(-((sum_elements - len(vector)) / len(vector)))) - (max(sum_elements, n - len(vector)) - min(sum_elements, n - len(vector))) ** 2




#score: {'n8_size512.txt': 349}
#island_id: 1
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n - sum([math.exp(-i/(j+1)) for i, j in zip(sorted(map(abs, Counter(vector).values())), range(len(Counter(vector).values())))]) - math.log2(n)




#score: {'n8_size512.txt': 335}
#island_id: 1
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n - min([math.exp(-i/(j+1)) for i, j in zip(sorted(map(abs, Counter(vector).values())), range(len(Counter(vector).values())))])




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n




#score: {'n8_size512.txt': 336}
#island_id: 1
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n




#score: {'n8_size512.txt': 271}
#island_id: 0
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 4 + math.exp(-((sum_elements - len(vector)) / len(vector)))) + (math.sin(len(vector)) * trailing_zeros)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector))) * (len(vector) ** 2)) - ((trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector)) / len(vector))))




#score: {'n8_size512.txt': 271}
#island_id: 0
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum((i/n)**2 for i in Counter(vector).values())) * math.log2(n) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n - sum([math.exp(-i/(j+1)) for i, j in zip(sorted(map(abs, Counter(vector).values())), range(len(Counter(vector).values())))]) + math.log2(n) - math.sqrt((sum(vector)**2)/n)




#score: {'n8_size512.txt': 323}
#island_id: 1
#version_generated: 3
#generate time01:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum((i/n)**2 for i in Counter(vector).values())) + sum(min(abs(i), n/len(vector)) for i in Counter(vector).values()) - math.log2(len(str(sum(1 for elem in vector if elem == 0)))) - (sum(vector) / n) ** 2 - abs(sum(vector) - n * len(set(vector))) / n - sum([math.exp(-i/(j+1)) for i, j in zip(sorted(map(abs, Counter(vector).values())), range(len(Counter(vector).values())))]) - math.log2(n) + math.sqrt((sum(vector) - n * len(set(vector))) ** 2 / (n * (n-1)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - np.sum([i==0 for i in vector]) / len(vector)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  sum_elements_squared = sum(x**2 for x in vector)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time01:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of unique elements and the maximum frequency
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + math.sqrt(n)
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of unique elements and the maximum frequency
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)

  # Add the normalized sum of unique elements and the maximum frequency
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(math.sqrt(x) for x in Counter(vector).values()) + 
       sum(1 for i in range(n - len(set(vector)), -1, -1) if all(x != 1 for x in vector[:i])) / n * 
       sum(map(abs, vector)) / max(sum(map(abs, filter(None, vector))), 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time01:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + abs(sum_elements - len(vector)/2)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time01:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n * max(len(vector), 2))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time01:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow((trailing_zeros / n), 0.5) + ((sum_elements > len(vector) // 2) > 0) * math.log10((trailing_zeros / n))




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 2
#generate time01:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.pow(sum_elements / len(vector), 2) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 2
#generate time01:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((len(vector)-trailing_zeros)*n)/sum_elements)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 2
#generate time01:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements / len(vector) - 0.5)**2 + (trailing_zeros / n)**2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 2
#generate time01:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 2
#generate time01:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector)) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for _ in range(len(str(sum(1 for elem in vector if not elem))), 0, -1)) / n) ** 1.3




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       len(str(sum(1 for elem in vector if elem == 0)).lstrip('0').rstrip('0')) / n) ** 1.3




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 0))[2:].count('1'), n)) / n) ** 1.3




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements/len(vector) + 1) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.sqrt(sum_elements / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.sqrt(trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n-trailing_zeros)/n)**2




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time01:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 335}
#island_id: 2
#version_generated: 3
#generate time01:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return -np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 327}
#island_id: 2
#version_generated: 3
#generate time01:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  def priority_component(x):
    return x ** 3 / (n ** 2) - abs(x) + math.exp(-n/(sum_elements + (n - sum(1 for y in vector if y)))) * n / len(vector)

  components = [priority_component(x) for x in vector]
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) + min(components)




#score: {'n8_size512.txt': 312}
#island_id: 2
#version_generated: 3
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Use a more robust measure of the distribution of elements
  gini_index = 1 - sum((x - median) ** 2 for x in vector) / (n * variance)
  
  # Add the Gini index as a penalty term to the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - gini_index




#score: {'n8_size512.txt': 303}
#island_id: 2
#version_generated: 3
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + sum(frequency.values()) / (n * max_freq) - sum((x-min(vector))/(max(vector)-min(vector)) for x in vector) / len(vector)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + sum(frequency.values()) / (n * max_freq) - sum(x**(1/3) for x in frequency.elements()) / (n ** 2)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + sum(frequency.values()) / (n * max_freq) + math.log(n)/math.log(max_freq)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + (len(vector) > 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the standard deviation of elements in the vector
  std_deviation = math.sqrt(sum((x - sum_elements / len(vector)) ** 2 for x in vector) / len(vector))
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((std_deviation > (len(vector) // 2) ** 0.5) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + (abs(sum_elements - len(vector) // 2) / len(vector))




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * max(sum_elements, len(vector))) - ((trailing_zeros / n) ** 2 + abs((sum_elements - len(vector)) / len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 284}
#island_id: 3
#version_generated: 3
#generate time01:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
   sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n - 
   np.sum(np.exp(-np.abs(np.array(vector)))) / n)**1.4




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  sorted_abs_vector = sorted(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log((n - leading_ones) / n) * 
       sum(sorted_abs_vector[:min(n, len(sorted_abs_vector))]) / min(sum_elements, sum(sorted_abs_vector)))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement
  return_value = return_value + (variance/np.std(vector))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(sum(x**2 for x in vector)) - len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 3
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < (len(vector) // 4))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * (sum_elements / len(vector) - 1)**2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3/2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 258}
#island_id: 1
#version_generated: 3
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros, n)




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2*sum_elements/len(vector)-1)/2) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * math.sqrt(sum_elements / len(vector)) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)

  # improved function
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
 
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + sum((x - median)**2 for x in vector) / (len(vector) * n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - min(vector)**4/(n**3) - trailing_zeros/n - leading_zeros/n




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # New calculation
  return -(variance + leading_zeros/n) + math.sqrt(trailing_zeros) * n / len(vector) - (unique_elements - 1) / n - abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
      sum(x for x in filter(None, vector)) / min(sum(map(abs, vector)), len(vector)))




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time01:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    ((n - sum(1 for elem in vector if elem == 1).bit_length()) / n) * 
    sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n * abs(x) for i, x in enumerate(vector[::-1]) if x > 0) + 
       len(str(sum(x for x in vector)).rstrip('0')) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
      len(str(sum_elements).rstrip('0')) / n - 
      (Counter(vector)['1'] + Counter(vector)['-1']) / 2)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10e-9) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time01:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time01:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time01:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - (len(vector) % 2 == 0 and sum_elements % 2 != 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + sum((x - median)**4 for x in vector) / (len(vector) ** 4)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + variance ** 2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + variance




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
 
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - variance ** 2




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time01:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time01:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.log(len(vector), 2)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time01:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-abs(sum_elements - len(vector) / 2) / (len(vector) ** 0.5))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time01:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of unique elements and the maximum frequency
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Normalize the unique elements sum
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  # Add a new feature: the normalized maximum value in the vector
  return_value += (max(vector) - min(vector)) / n

  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of unique elements and the maximum frequency
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - math.sqrt((sum(x**2 for x in set(vector))) / len(set(vector)))
  
  return return_value




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-len(vector) / (n + 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if len(vector) % 2 == 0:
    median = sum_elements // 2
  else:
    median = (sum_elements + 1) // 2
  if sum_elements > median and trailing_zeros / n > 0.5:
    return -math.log10(sum_elements) - math.pow(trailing_zeros / n, 3)
  elif sum_elements <= median and trailing_zeros / n > 0.75:
    return -math.log10(len(vector)) - math.pow(trailing_zeros / n, 2)
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + math.log2(n+1)) / n) ** 2




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.sqrt(sum_elements) * (trailing_zeros / n))




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (len(vector) + 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.log(len(vector), 2)




#score: {'n8_size512.txt': 273}
#island_id: 1
#version_generated: 3
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + math.log2(len(vector))) - (trailing_zeros / n)**2




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.log(len(vector), 2) + math.exp(-math.fabs(sum_elements - len(vector) / 2) / (len(vector) ** 0.5)) - 1




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time01:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-((sum_elements - n/2)**2)/(n**2))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time01:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time01:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time01:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.log(len(vector), 2) + sum(map(lambda x: x**2, vector))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.log(len(vector), 2)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (math.exp(math.log(2) * abs(sum_elements / len(vector) - 1/2))) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 4) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.log(len(vector), 2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())
  
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  variance = sum((x - sum_elements / n) ** 2 for x in vector) / n
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)
  
  trailing_zeros = str(sum_elements).zfill(n).count('0')
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n / 2) * (n - sum(1 for x in vector if x)) / n - min((x ** 2 / n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros / n - max_freq / min_freq - (max_freq / min_freq) ** 2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements / len(vector)) - min(vector) ** 3 / (n ** 2) + math.exp(-n / (sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x ** 6 / (n * n * n * n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq ** 3 / (min_freq ** 2)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 3.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements % 2) / n) ** 2




#score: {'n8_size512.txt': 340}
#island_id: 2
#version_generated: 3
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.sqrt(sum_elements) * n / len(vector)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return np.sum([np.log(x) for x in vector]) + np.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements/n)**2) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + abs(sum_elements - len(vector) / 2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - sum(map(lambda x: x**2, vector))




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n-trailing_zeros).bit_length()) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) + np.sum(np.log10(np.array([vector]) + 1e-6))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Improved calculation of the priority
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)
  return_value += math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  return_value += zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector))
  return_value -= min(vector)**3/(n**2)
  return_value -= math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  return_value -= abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  return_value -= max_freq**3/(min_freq**2)
  return_value += (sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) * math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + math.sqrt(n)
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + math.sqrt(n)
  return return_value




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - trailing_zeros, n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n +
      abs(sum_elements) * math.log(len(set(vector))) / math.log(2))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 if elem == 0 else -n for elem in vector[-min(n, len(vector)):]))




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (math.gcd(sum_elements, n) == 1) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - 0.5




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n-trailing_zeros)/n)**2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(1 + math.cos(math.pi * (sum_elements / len(vector) - 0.5)))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - 0.5




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')
  return -((sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) * math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) 
       - abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n 
       - min((x**2/n) for x in vector) 
       + max(-sum(vector), 0) 
       + (max(vector) - min(vector)) / n 
       - sum(sorted(vector)[::-1]) / n 
       + math.sqrt(trailing_zeros) * n / len(vector) 
       - sum(x for x in set(vector)) / n 
       - leading_zeros/n 
       - max_freq/min_freq - (max_freq/min_freq)**2 
       + zero_ratio 
       + (unique_elements - 1) / n 
       + abs(median - sum_elements/len(vector)) 
       - min(vector)**3/(n**2) 
       - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) 
       - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n 
       - max_freq**3/(min_freq**2))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - sum(1 for elem in vector).bit_length(), n) / n * 
       sum(abs(x) for x in vector) / sum(vector) + 
       max(0, ((n - str(sum(vector)).rstrip('0').count('0')) / n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5/min(Counter(vector).values()) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(abs(x) for x in vector) / sum(abs(x) for x in vector) + 
      max(0, ((n - str(sum(vector)).rstrip('0').count('0')) / n)))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
       sum(map(lambda x: abs(x) * len(str(x).rstrip('0')), filter(None, vector))) / (n ** 2))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
      sum(map(abs, filter(None, vector))) / 
      max(sum(map(abs, filter(None, vector))), 1e-6) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      len([x for x in vector if x == 0])**n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(int(digit) for digit in bin(int(''.join(map(str,vector))))[2:])))-1
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) - trailing_zeros) / n)
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector) % trailing_zeros) // len(vector)) ** 2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, filter(lambda x: x != 0, vector))) / (n * sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
      sum(map(abs, filter(lambda x: x != 0, vector))) / 
      max(sum(vector), len(vector)))




#score: {'n8_size512.txt': 272}
#island_id: 3
#version_generated: 3
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - sum(1 for elem in vector if elem), n) * 
      sum(map(abs, vector)) / min(sum(map(abs, vector)), n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**0.5 + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
      sum(map(abs, filter(lambda x: x != 0, vector)))/(n*min(sum(vector), len(vector))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time02:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 3.5)) > 0) * (trailing_zeros / n) - sum([1 if i == 0 else 0 for i in vector])/(n/10)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time02:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 4)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time02:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 3.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time02:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > 0.5 * len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + sum(frequency.values()) / (n * max_freq) - sum(x**(1/3) for x in frequency.elements()) / (n ** 2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + sum(frequency.values()) / (n * max_freq) - sum(x**(1/3) for x in frequency.elements()) / (n ** 2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + sum(frequency.values()) / (n * max_freq) - sum(x**(1/3) for x in frequency.elements()) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time02:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of the vector
  avg = sum_elements / len(vector)
  
  # Calculate the entropy of the vector
  entropy = -sum([p * math.log(p, 2) for p in Counter(vector).values()])
  
  return -(sum_elements ** 2) / (len(vector) * n) - ((trailing_zeros / n) ** 2) + ((avg > len(vector) // 2) > 0) * (trailing_zeros / n) - entropy




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time02:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  median = sorted(Counter(vector).values())[len(Counter(vector).values()) // 2]
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.log(len(vector), 2) + math.fabs(median)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector)) + 
       sum(x**2 for x in vector) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(map(lambda x: abs(x), vector))) + 
       min(n, len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) * sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / (n * min(n, len(vector)))
      )




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time02:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector), n) * min(n, len(vector)) / (n * len(vector)) + 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, n))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + np.log(n) - (np.exp(-n) - 1)**2




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time02:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5))) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time02:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.pow(sum_elements/len(vector), 2)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time02:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-trailing_zeros/100)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time02:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements < len(vector) // 2:
    return -sum_elements * (1 + math.log(len(vector), 2)) - math.pow(trailing_zeros / n, 3)
  else:
    return sum_elements * (1 - math.log(len(vector), 2)) - math.pow(trailing_zeros / n, 4)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.log(len(vector), 2) + (len(vector) % 4 == 3 and sum_elements < len(vector) // 2)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.log(len(vector), 2) + (len(vector) % 4 == 3 and sum_elements < len(vector) // 2) - math.pow((sum_elements - len(vector) // 2) / (len(vector) // 4), 2)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 370}
#island_id: 2
#version_generated: 3
#generate time02:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n) + sum_elements**(1.5)/(n**(1.5))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # New optimization: Use the fact that we can sort the vector
  sorted_vector = sorted(vector, reverse=True)
  # New optimization: We don't need to compute the sum of the vector multiple times
  total_sum = sum(sorted_vector)

  return -(total_sum / n + (n - len([x for x in sorted_vector if x])) ** 2 / n) + abs(total_sum - n/2) * (n - len([x for x in sorted_vector if x])) / n - min((x**2/n) for x in sorted_vector) + max(-total_sum, 0) + (max(sorted_vector) - min(sorted_vector)) / n - sum(sorted_vector) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(sorted_vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - total_sum/len(vector)) - min(sorted_vector)**3/(n**2) + math.exp(-n/(total_sum + (n - len([x for x in sorted_vector if x])))) - abs(sum(x**6/(n*n*n*n*n) for x in sorted_vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 2
#generate time02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + (sum_elements > len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 2
#generate time02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 2
#generate time02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.sqrt(len(vector))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 2
#generate time02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 2
#generate time02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 2
#generate time02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 2
#generate time02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements + (trailing_zeros / n) ** 2
  else:
    return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 2
#generate time02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time02:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time02:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
       sum(x > 0 for x in vector) / n)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time02:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
       sum(x > 0 for x in vector) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (-math.log(trailing_zeros / n))




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements ** 2 / (len(vector) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (-math.log(trailing_zeros/n))




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum_elements ** 2 / (n * len(vector))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += math.sqrt(n)
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - np.sqrt(n)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - np.sqrt(n)

  return return_value




#score: {'n8_size512.txt': 264}
#island_id: 2
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  if sum_elements <= n/3 and max(vector) > n:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  elif sum_elements >= n*2/3 and min(vector) < n:
    return math.sqrt(n)
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - np.sum([i==0 for i in vector]) / len(vector)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((abs(sum_elements) > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements) ** (1/(len(vector)+1))




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.exp(-trailing_zeros / (n * len(vector)))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.pow(sum_elements / len(vector), 2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 291}
#island_id: 2
#version_generated: 3
#generate time02:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -((sum_elements + n/2)**2/(n*variance)) - math.sqrt(trailing_zeros) * n / len(vector) - (max_freq/min_freq)**2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.sin(trailing_zeros) * (n / len(vector))




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time02:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements) ** (1/(len(vector)+1)) + sum(abs(x) for x in vector)




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time02:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements) ** (1/(len(vector)+1)) + math.sqrt(len(vector)) / sum_elements




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time02:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements) ** (1/(len(vector)+1)) - sum_elements ** 2 / (n * len(vector))




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time02:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements) ** (1/(len(vector)+1)) - sum_elements**2 / (n*len(vector))




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum_elements ** (1/(len(vector)+1))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements) ** (1/(len(vector)+1)) + sum_elements * math.sin(trailing_zeros/float(n))




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements) ** (1/(len(vector)+1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + abs(sum_elements) ** (1/(len(vector)+1))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * sum(map(abs, vector)) / (n * sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x ** 0.5 for x in set(vector)) + 
       min(n - sum(1 for x in vector if x), n) * 
       np.exp(-sum(1 for x in vector if x) / n) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(0.5/len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(x for x in vector) / (n*sum(x for x in vector)))




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements) ** (1/(len(vector)+1)) + sum([abs(x) for x in vector])




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements) ** (1/(len(vector)+1)) - sum(map(abs, filter(lambda x: x>0, vector)))




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements) ** (1/(len(vector)+1)) - sum([i**2 for i in Counter(vector).values()]) / (2*n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  
  # Add the normalized sum of unique elements and the maximum frequency
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  # Add a new term to improve the function
  return_value -= abs(sum(x for x in set(vector))) / len(vector)
  
  return return_value




#score: {'n8_size512.txt': 286}
#island_id: 2
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Add the normalized sum of unique elements and the maximum frequency
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  return math.exp(-return_value)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of unique elements and the maximum frequency
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # New calculation of the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)
  return return_value




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 / len(vector) + 1) ** (-trailing_zeros / len(vector)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + Counter(vector).get(0, 0)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (n - trailing_zeros) / n
  else:
    return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.cos(math.acos((2 * sum_elements) / (n * len(vector)))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-math.sqrt(abs(sum_elements / len(vector)))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((len(vector) % 2 == 1 and sum_elements % 2 == 0) or (len(vector) % 2 == 0 and sum_elements % 2 != 0)) * (sum_elements + trailing_zeros)




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum([i**2 for i in Counter(vector).values()]) / (2*n)) * sum(vector) + (bin(int(''.join(map(str,vector))))[-1] == '0') * (len(vector) - 1)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements) ** (1/(len(vector)+1)) if sum_elements > 0 else 0)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements) ** (1/(len(vector)+1))) - sum([i**2 for i in Counter(vector).values()]) / (2*n) + abs(sum_elements)**(1/3)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n)




#score: {'n8_size512.txt': 345}
#island_id: 2
#version_generated: 3
#generate time02:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and np.sum(vector) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and np.sum(vector) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += np.sqrt(n)
  return return_value




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * math.exp(-(trailing_zeros / n))




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-sum_elements/len(vector))




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-math.pi * (2 * sum_elements / len(vector) - 1)**2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 3
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    (n - leading_ones) / n * math.sqrt(sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))) + 
    (n - len(str(sum(1 for elem in vector if elem == 0)))) / n - 
    sum((i+1)**2 for i in range(len(vector)-1, -1, -1) if vector[i] == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(Counter({k: v for k, v in enumerate(vector) if v == 1})[i] for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)**4




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   ((n - leading_ones) / n) * 
   math.sqrt(sum(x**2 for x in vector) / min(sum_elements, len(vector))) + 
   (n - len(str(sum(1 for elem in vector if elem == 0)))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
        min(sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))), sum(abs(x)**2 for x in vector)) * 
        max((n - i) / n for i in range(min(n, leading_ones), n))
  ) ** 2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
    sum_elements / min(sum_elements, sum(map(abs, vector)))
 )




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-sum_elements/len(vector)) - 0.5 * math.cos(math.pi * sum_elements / len(vector))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-sum_elements/len(vector)) + math.log(len(vector)) * math.sin(trailing_zeros / len(vector))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-sum_elements/len(vector)) + math.sqrt((n-sum_elements)**2 + (trailing_zeros/n)**2)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum_elements/len(vector)) * (1 - math.sin(math.pi * (2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time02:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-sum_elements/len(vector)) - 0.5 * math.cos(math.pi * sum_elements / len(vector)) + 1 / (1 + math.exp(-(sum_elements - len(vector) // 2) / 10))




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time02:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-sum_elements/len(vector))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time02:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-sum_elements/len(vector)) - 0.5 * math.cos(math.pi * sum_elements / len(vector)) - (math.sqrt(sum_elements / len(vector))) * math.sin(math.pi * sum_elements / len(vector))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time02:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > 0.5 * n) > 0) * (trailing_zeros / n) + math.exp(-sum_elements/len(vector))




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time02:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (math.sin(math.pi * (2 * sum_elements / len(vector) - 1))) ** 2 - ((trailing_zeros / n) + math.cos(sum_elements / len(vector))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time02:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time02:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time02:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum_elements/len(vector)) * (1 + math.cos(math.pi * (2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time02:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum_elements/len(vector)) * (1 + abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time02:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-abs(sum_elements / len(vector) - 0.5)) * math.cos(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-abs(sum_elements / len(vector) - 0.5)) * (1 - math.cos(math.pi * sum_elements / len(vector)))




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - sum(vector)**3/(6*n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len(vector)) * math.exp(-bin(int(''.join(map(str,vector))))[:-2].count('0') / (n * len(vector))) - sum([i**2 for i in Counter(vector).values()]) / (2*n)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  entropy = -sum((freq / len(vector)) * math.log2(freq / len(vector)) for freq in Counter(vector).values())
  return -(abs(sum_elements) ** 0.5) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - entropy




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + (abs(sum_elements) - len(vector) // 2) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (4*n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) ** 0.5) / n + (abs(sum_elements - len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-math.pi * (2 * abs(sum_elements - len(vector) // 2) / len(vector))) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n) - abs(sum_elements - trailing_zeros)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-math.log(n) * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time02:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - len(str(sum(vector)).lstrip('0'))/n - max(Counter(vector).values())/(min(Counter(vector).values())) - (max(Counter(vector).values())/min(Counter(vector).values()))**2 + (len(set(vector)) - 1) / n + abs(sum(vector)/len(vector) - sum(vector) / len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum(vector) + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max(Counter(vector).values())**3/(min(Counter(vector).values()))**2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  # Calculate the normalized sum of unique elements
  norm_sum_unique_elements = (sum(set(vector)) - min(vector)) / n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - norm_sum_unique_elements




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - min(vector)**4/(n**3) + abs(sum(x**5/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time02:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - (1 - math.exp(-abs(sum_elements) / (len(vector) ** 0.5))) / 10




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time02:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) + abs(sum_elements)**3/trailing_zeros




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time02:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector)) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0') / (n * len(vector))) + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time02:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-trailing_zeros / (n * len(vector))) * math.sqrt(abs(sum_elements)) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(map(abs, vector))) / len(set(vector)) + 
       min(n - sum(Counter(vector).values()), n) * 
       sum(map(abs, vector)) / (max(sum(map(abs, vector)), 1e-6) or 1.0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - math.sqrt(len(vector)) * abs(sum_elements)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**3 for i in Counter(vector).values()]) / (3*n)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - sum_elements**2 / (4*n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**3 for i in Counter(vector).values()]) / (3*n)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - sum_elements/(4*n)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) // 2) > 0) * math.exp(-sum_elements/len(vector)) * math.cos(math.pi * trailing_zeros / n)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) ** 0.5) / n + (abs(sum_elements - len(vector) // 2) > 0) * (trailing_zeros / n) + math.exp(-sum_elements/len(vector)) - Counter(vector).most_common(1)[0][1] / len(vector)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements**2 + (n - trailing_zeros)**2) / n + math.exp(-abs(sum_elements-len(vector)//2)/len(vector))




#score: {'n8_size512.txt': 327}
#island_id: 3
#version_generated: 3
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(math.sqrt(sum(map(abs, vector))) / unique_elements + 
       min(n - leading_ones, n) / n * 
       sum(x ** 2 for x in Counter(vector).values()) / math.sqrt(sum(x ** 2 for x in Counter(vector).values()))
       )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * 
    sum(map(lambda x: abs(x)**2, filter(None, vector)))/min((sum(map(abs, vector))**2), len(vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum(map(abs, vector)) ** (0.5 / unique_elements) + 
    min(n - leading_ones, n) / n * 
    sum(map(abs, filter(None, vector))) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
    sum(map(abs, filter(None, vector)))/min(sum(map(abs, vector)), len(vector))
  )




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  variances = [(x**2/n) for x in vector]
  mean_variance = sum(variances)/len(variances)
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + mean_variance




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements ** 2) / n)) ** 0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement
  return_value = (np.sqrt(n) * sum(1 for x in vector if x < n//2)) + ((n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + np.log(n) - (np.exp(-n) - 1)**2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time02:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) + 
       (len(str(sum(1 for elem in vector if elem == 0))) - len(str(sum(1 for elem in vector)).rstrip('0'))) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time02:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.pow(math.gcd(*vector), 0.5) / len(set(vector)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x ** 2 for x in Counter(vector).values()) / math.sqrt(sum(x ** 2 for x in Counter(vector).values()))
  )




#score: {'n8_size512.txt': 299}
#island_id: 3
#version_generated: 3
#generate time02:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(map(abs, vector))) / len(set(vector)) + 
       (n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0')) / n)




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time02:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(math.sqrt(sum(map(abs, vector))) / min(unique_elements, n) + 
      (n - leading_ones) / n * 
      math.log10(min(n, sum(x ** 2 for x in Counter(vector).values())))
     )




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Calculate the number of trailing zeros in the vector
  sum_elements_str = str(sum_elements).zfill(n)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # New function
  def new_priority():
    return math.sqrt(n)
  return new_priority()




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return -sum_elements + trailing_zeros * math.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement: 
  if sum(1 for x in vector if x) > n//2:
    return math.exp(-n/sum_elements)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) + math.sqrt(len(vector)) / (2*max(vector))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - math.sqrt(sum([i for i in Counter(vector).values()])) / (2*len(vector))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  variance = sum((i - sum_elements / len(vector)) ** 2 for i in vector) / len(vector)

  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - variance




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - math.sqrt(sum([i for i in Counter(vector).values()])) / (4*len(vector)) + abs(sum_elements) / (n * len(vector))




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  variance = sum((i - (sum_elements / len(vector))) ** 2 for i in Counter(vector).values()) / len(vector)

  return -(abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector)))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - variance




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - math.sqrt(sum([i for i in Counter(vector).values()])) / (4*len(vector)) + math.fsum(x*math.log(1+x) for x in [abs(i)-0.5 for i in Counter(vector).values()]) / (8*len(vector))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement
  return_value = return_value + (variance/np.std(vector))
  return_value = return_value + (gmean(vector) - median) ** 2
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement
  res = minimize(objective, np.array([1]*len(vector)))
  return -res.fun




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement
  return_value = return_value + (variance/np.std(vector))
  return return_value

  # More improvement
  return_value += np.sum([x for x in vector if x > median])
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement
  weighted_variance = variance / np.std(vector)
  return_value = (sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) * weighted_variance
  return return_value




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n) - abs(1 - 2 * (sum_elements >= len(vector) // 2))




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  deviation = abs(sum_elements - len(vector) // 2)
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + deviation * math.exp(-math.log(n) * trailing_zeros)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > n // 4) > 0) * (n ** 0.5 - trailing_zeros)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + sum(frequency.values()) / (n * max_freq) - sum(x**(1/3) for x in frequency.elements()) / (n ** 2)
  
  # Use weighted average instead of addition to prioritize vectors with lower sum of elements and more trailing zeros
  if leading_zeros > 0:
    return priority * math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - max_freq**3/(min_freq**2) - max((x**(1/3)) for x in frequency.elements()) / (n ** 2)
  else:
    return priority




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time02:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + math.exp(-sum(x**2 for x in vector) / (n * max_freq))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + sum(frequency.values()) / (n * max_freq) - sum(x**(1/3) for x in frequency.elements()) / (n ** 2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + variance ** 2




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')
  ratio_trailing_zeros = math.log2(trailing_zeros + 1) * n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(ratio_trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + variance ** 2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + variance ** 2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - variance ** 2 + math.exp(-trailing_zeros/len(vector))




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log(sum(vector) + 1) * math.exp(-bin(int(''.join(map(str,vector)))).count('0') / (n * len(vector))) + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector)))).count('0') / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n)




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - sum_elements / (len(vector)**2)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n)
  -(1/((len(vector)+1)*n))*sum([(i*(i-1))/2 for i in Counter(vector).values()])




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements ** 2) / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 370}
#island_id: 2
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(np.square(vector)) - np.sum(vector)**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n) + math.exp(-sum_elements/len(vector)) - 0.5 * math.cos(math.pi * sum_elements / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum_elements/len(vector)) * (trailing_zeros / n) + 2 * (abs(sum_elements - len(vector) // 2)) ** 1.5




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n) - math.exp(-(sum_elements - len(vector) // 2) ** 2 / (10 ** 2))




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  return -(sum_vector / unique_elements + min(n - leading_ones, n) / n * 
       (sum(x ** 2 for x in Counter(vector).values()) / math.sqrt(sum(x ** 2 for x in Counter(vector).values())))
       )




#score: {'n8_size512.txt': 327}
#island_id: 3
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  return -(math.sqrt(sum_vector) / unique_elements + 
       min(n - leading_ones, n) / n * 
       sum(x ** 2 for x in Counter(vector).values()) / math.sqrt(sum(x ** 2 for x in Counter(vector).values()))
      )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(map(abs, vector))) + len([i for i in range(len(vector)) if vector[i] == 0]) / n)




#score: {'n8_size512.txt': 320}
#island_id: 3
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum(x for x in vector) / sum(1 for _ in vector) + 
       min(n - leading_ones, n) / n * 
       sum((x - (sum(vector) / sum(1 for _ in vector))) ** 2 for x in Counter(vector).values()) 
       / math.sqrt(sum(x ** 2 for x in Counter(vector).values()))
  )




#score: {'n8_size512.txt': 295}
#island_id: 3
#version_generated: 3
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(math.sqrt(sum_vector) / unique_elements + 
       min(n - leading_ones, n) * math.exp(-leading_ones / n) / n + 
       min(trailing_zeros, n) * math.exp(-trailing_zeros / n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) * 
       math.exp(-leading_ones / n) / n + 
       min(len(str(sum(1 for elem in vector if elem == 0))), n) * 
       math.exp(-len(str(sum(1 for elem in vector if elem == 0))) / n) / n)




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  
  return -(math.sqrt(sum_vector) / unique_elements + 
       min(n - leading_ones, n) * 
       math.exp(-leading_ones / (n * unique_elements)) / (n * unique_elements) + 
       min(len(str(sum(1 for elem in vector if elem == 0))), n) * 
       math.exp(-len(str(sum(1 for elem in vector if elem == 0))) / n) / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time02:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - ((len(vector) // 2 - sum_elements) ** 2) / (n * len(vector)) + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time02:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * min((trailing_zeros / n), abs(sum_elements - len(vector) // 2))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time02:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-math.pi * (2 * sum_elements / len(vector) - 1)**2) - (trailing_zeros / n) ** 3 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time02:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n) - abs(Counter(vector)[0] - Counter(vector)[1]) / len(vector)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # New feature: Prioritize vectors with higher average value and lower variance
  avg_value = sum(vector) / len(vector)
  var_ratio = variance / n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - avg_value) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - var_ratio - avg_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time02:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return return_value




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time02:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time02:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n)




#score: {'n8_size512.txt': 306}
#island_id: 0
#version_generated: 3
#generate time02:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(1/(n*(len(vector)+1)))*sum([i**2 for i in Counter(vector).values()])




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time02:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - sum_elements ** 2 / (4 * n)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - abs(sum_elements) ** (1/3) * math.exp(-math.log(len(vector)) / 4)




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - math.log(len(set(vector)) + 1)




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  return -(sum_vector / (unique_elements * math.sqrt(n)) + 
      min(n - leading_ones, n) / n * 
      sum(x ** 2 for x in Counter(vector).values()) / math.sqrt(sum(x ** 2 for x in Counter(vector).values()))
      )




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  return -(sum_vector / (unique_elements * math.sqrt(n)) + 
       min(n - leading_ones, n) / n * 
       sum(x ** 2 for x in Counter(vector).values()) / math.sqrt(sum(x ** 2 for x in Counter(vector).values()))
       )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_vector = sum(map(abs, vector))
  unique_elements = len(set(vector))
  
  # Calculate the number of trailing zeros
  trailing_zeros = n - leading_ones
  
  return -(sum_vector / unique_elements + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + variance ** 2

  # Additional term to account for the number of unique elements
  return return_value + (unique_elements - 1) / (n * math.log(n))




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time03:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  return -(sum_vector / unique_elements + 
       min(n - leading_ones, n) / n * 
       sum(x ** 2 for x in Counter(vector).values()) / math.sqrt(sum(x ** 2 for x in Counter(vector).values()))
       )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  return -(math.sqrt(sum_vector) / unique_elements + 
    (n - leading_ones) * math.exp(-sum(x ** 2 for x in Counter(vector).values()) / sum_vector)
   )




#score: {'n8_size512.txt': 327}
#island_id: 3
#version_generated: 3
#generate time03:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  return -(sum_vector ** 0.5 / unique_elements + 
       min(n - leading_ones, n) / n * 
       sum(x ** 2 for x in Counter(vector).values()) / (sum(x ** 2 for x in Counter(vector).values())) ** 0.5)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # improved function
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - math.sqrt(sum([i for i in Counter(vector).values()])) / (4*len(vector)) + abs(sum_elements)**2 / (8*(n+len(vector)))




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - sum([math.sqrt(i) for i in Counter(vector).values()]) / (4*len(vector))




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - math.sqrt(sum([i for i in Counter(vector).values()])) / (2*len(vector)) + math.exp(-sum_elements / len(vector)) * math.sin(trailing_zeros / len(vector))




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n) - abs(1 - 2 * (sum_elements >= len(vector) // 2))




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Calculate the difference from median as a penalty term
  penalty = 0 if abs(sum_elements - len(vector) // 2) <= len(vector) // 4 else (abs(sum_elements - len(vector) // 2) - len(vector) // 4) * (trailing_zeros / n)
  
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + penalty




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n) - abs(1 - 2 * (sum_elements >= len(vector) // 2))
  - sum([i for i in range(len(vector)) if vector[i] == 0]) ** 3




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(math.pi * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n) - abs(1 - 2 * (sum_elements >= len(vector) // 2)) + math.exp(-abs(sum_elements/len(vector) - 0.5))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - abs(sum_elements) ** (1/3) * math.exp(-math.log(len(vector)) / 4) + sum(i * math.log(i) for i in Counter(vector).values()) / (n * len(vector))




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - abs(sum_elements) ** (1/3) * math.exp(-math.log(len(vector)) / 4) + sum([i for i in Counter(vector).values() if i % 2 == 0]) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - abs(sum_elements) ** (1/3) * math.exp(-math.log(len(vector)) / 4)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - abs(sum_elements) ** (1/3) * math.exp(-math.log(len(vector)) / 4)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  return -abs(sum_elements) ** (3/4) * math.exp(-math.log(len(vector)) / 16) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (8*n)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - abs(sum_elements) ** (1/3) * math.exp(-math.log(len(vector)) / 4) + min((n-1)/len(vector), 0.5)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')

  return -abs(sum_elements) * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i**2 for i in Counter(vector).values()]) / (2*n) - abs(sum_elements) ** (1/3) * math.exp(-math.log(len(vector)) / 4) - ((sum_elements % 2) == 0) * (math.sqrt(trailing_zeros) + sum([math.log(i+1) for i in Counter(vector).values()])) / (n * len(vector))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + math.sqrt(n)
  return return_value




#score: {'n8_size512.txt': 292}
#island_id: 2
#version_generated: 3
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - variance + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)

  return_value += ((sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)) * math.sqrt(n)
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + np.sqrt(n)
  return return_valu




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  
  return -sum_elements * math.log10(n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -sum_elements - (trailing_zeros / n) * math.log10(n)




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  return -(sum_vector / unique_elements + 
       min(n - leading_ones, n) / n * 
       sum(x ** 2 for x in Counter(vector).values()) / math.sqrt(sum(x ** 2 for x in Counter(vector).values()))
      )




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  return -(sum_vector / unique_elements + 
      min(n - leading_ones, n) / n * 
      sum(x ** 2 for x in Counter(vector).values()) / math.sqrt(sum(x ** 2 for x in Counter(vector).values()))
     )




#score: {'n8_size512.txt': 315}
#island_id: 3
#version_generated: 3
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_vector = sum(map(abs, vector))
  return -(sum_vector / len(vector) + min(n - leading_ones, n) / n * 
       sum((x ** 2) / (len(vector)) for x in Counter(vector).values()))




#score: {'n8_size512.txt': 327}
#island_id: 3
#version_generated: 3
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(math.sqrt(sum_vector) / unique_elements + 
       min(n - leading_ones, n) / n * 
       sum(x ** 2 for x in Counter(vector).values()) / math.sqrt(sum(x ** 2 for x in Counter(vector).values()))
      )




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10(trailing_zeros / n) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len(str(vector)[::-1].lstrip('0')) or 1
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector ** (3/2) / unique_elements + 
       min(n - leading_ones, n) / n * 
       sum(x ** 2 for x in Counter(vector).values()) / math.sqrt(sum(x ** 2 for x in Counter(vector).values()))
      )




#score: {'n8_size512.txt': 330}
#island_id: 3
#version_generated: 3
#generate time03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       sum(x ** 2 for x in Counter(vector).values()) / math.sqrt(sum(x ** 2 for x in Counter(vector).values()))
      )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = sum(1 for elem in vector if elem)
  unique_elements = len(set(vector))
  return -(math.sqrt(sum(map(abs, vector))) / unique_elements - 
       min(n - leading_ones, n) / n * 
       sum(x ** 2 for x in Counter(vector).values()) / math.sqrt(sum(x ** 2 for x in Counter(vector).values()))
      )




#score: {'n8_size512.txt': 327}
#island_id: 3
#version_generated: 3
#generate time03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  # Calculate sum of elements and trailing zeros
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(math.sqrt(sum_vector) / unique_elements + 
       min(n - leading_ones, n) / n * 
       sum(x ** 2 for x in Counter(vector).values()) / math.sqrt(sum(x ** 2 for x in Counter(vector).values()))
      )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (n * len(set(vector))) + 
       min(n - sum(1 for elem in vector if elem == 1), n) / n *
       sum((x ** 2) / (n ** 0.5) for x in Counter(vector).values()))




#score: {'n8_size512.txt': 315}
#island_id: 3
#version_generated: 3
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum(vector) / len(vector)) ** 2 for x in Counter(vector).values())) / len(vector)
      )




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum(x ** 2 for x in Counter(vector).values())) / math.sqrt(len(vector))
       )




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return -np.sum((x-np.median(vector))**2)/n + np.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 2
#generate time03:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 2
#generate time03:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.sqrt((2 * sum_elements / len(vector) - 1)**2 + (trailing_zeros / n)**2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 2
#generate time03:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time03:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector))))) - bin(int(''.join(map(str,vector)))).rfind('0')
  if sum_elements <= 0:
    return -trailing_zeros / n
  else:
    return -(sum_elements ** 2) * (1 - sum_elements / n) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10(trailing_zeros / n) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros or 1) / n) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros and (trailing_zeros - 1)) or 1) / math.log10(2)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10(trailing_zeros / n) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10(trailing_zeros / n) if trailing_zeros > 0 else -(sum_elements ** 2 + trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / n) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10(trailing_zeros / n) if trailing_zeros > 0 else -math.sqrt(sum_elements)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1e-9) / n) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / n) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.log10((trailing_zeros + 1) / (n + 1)) - math.pow(sum_elements, 2) / (n * (n + 1))




#score: {'n8_size512.txt': 261}
#island_id: 1
#version_generated: 3
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * math.log10(n) / math.log10(2) - math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 2 + trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -sum_elements ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + (trailing_zeros + 1)) / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / (n + 1))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector + math.sqrt(len(vector) * sum(x ** 2 for x in Counter(vector).values())) / (unique_elements * n) + 
       min(n - leading_ones, n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       sum(x ** 2 for x in Counter(vector).values()) / math.sqrt(sum(x ** 2 for x in Counter(vector).values())) * 
       trailing_zeros / (n * unique_elements)
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) * (n - len(set(vector))) / n + 
       math.log10(sum(1 for elem in vector if elem == 0) or 1))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
       ) - trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector + 
       math.log((n - leading_ones) / n) * 
       (len([x for x in Counter(vector).values() if x > 1]) or 1) 
      )




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.prod([(-x + sum(vector)) if i < len(vector) else 0 for i, x in enumerate(vector)]) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * n) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add weights to the priority based on the frequency of elements and the sum of elements
  return priority + (sum(frequency.values()) ** 2) / (n * max_freq) - sum(x for x in vector) / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * math.comb(n+1, 1)) - math.log10(trailing_zeros / n) if trailing_zeros > 0 else -(sum_elements ** 2 + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + math.log10(trailing_zeros + 1)) / (n * math.log(n))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # improved function
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
       len(str(sum(map(abs, vector)))) - len(str(sum(map(abs, vector))).rstrip('0')) / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
     ) + sum(1 if elem else 0 for elem in vector[1:]) / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / n) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / n) if trailing_zeros > 0 else -(sum_elements / n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / n) if trailing_zeros > 0 else -(sum_elements + sum(map(math.log10, [i for i in reversed(vector) if i != 0])))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  # Add a new term to improve the function
  return_value -= abs(sum(x for x in set(vector))) / len(vector)
  
  return_value -= np.mean([x == 0 for x in vector]) * n / len(vector)
  
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - np.sqrt(n)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  
  return_value -= abs(sum(x for x in set(vector))) / len(vector)
  return_value += np.sqrt(n)

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Add a new term to improve the function
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - np.sqrt(n)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)

  # Add a new term to improve the function
  return_value -= np.mean([abs(x) for x in set(vector)])

  return return_valu




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10(trailing_zeros / n) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log10(sum(10**(-x) for x in Counter(vector).values()) / (n * (n + 1) // 2)) - math.log10((vector.count(0) + 1) / n) if vector.count(0) > 0 else -sum(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements * math.log10(n) + math.log10(math.factorial(trailing_zeros)))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - np.sqrt(n)

  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 290}
#island_id: 2
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  if sum(1 for x in vector if x) > n//2:
    return -math.sqrt(trailing_zeros) * n / len(vector) - sum(x**3/(n*n*n) for x in vector) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  else:
    return math.sqrt(trailing_zeros) * n / len(vector) + sum(x**3/(n*n*n) for x in vector) - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))




#score: {'n8_size512.txt': 309}
#island_id: 2
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  def weighted_sum(x):
    return x * (x > n/2) + x * (x <= n/2)

  return -(sum(1 for x in vector if x) / n - sum_elements / n) ** 2 + math.sqrt(trailing_zeros) * n / len(vector) - sum(x**3 for x in vector) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10(trailing_zeros / n) if trailing_zeros > 0 else -sum_elements ** 3 / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10(trailing_zeros + 1) / math.log10(n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  # use log base 10 instead of natural logarithm
  return -sum_elements / (n * (n + 1) // 2) - math.log10(trailing_zeros / n) if trailing_zeros > 0 else -math.pow(sum_elements, 2)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.exp(-(trailing_zeros / n))




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), math.sqrt(abs(sum_elements - len(vector) // 2)))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / len(set(vector)) * n + 
       len(str(sum(map(abs, vector)))) - len(str(sum(map(abs, vector))).rstrip('0')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) / (len(set(vector)) * n) + 
       math.sqrt(sum((x - sum(abs(x) for x in vector) / len(set(vector))) ** 2 for x in set(vector))) / math.sqrt(len(set(vector))) - 
       len(str(sum(abs(x) for x in vector)).rstrip('0')) / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector))))[2:]) - len(bin(int(''.join(map(lambda x: '0' if not x else '1', vector))))[2:])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([x**2 for x in Counter(vector).values()]) / len(vector)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -math.pow((sum_elements / (n * (n + 1) // 2)), 2) - math.log10(trailing_zeros / (n + 1)) if trailing_zeros > 0 else -(math.pow(sum_elements, 2) + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp(-sum_elements / (n * (n + 1) // 2)) * math.log10((trailing_zeros + 1) / (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements ** 2 / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * math.log10(n + 1) / math.log10(n + 2) - trailing_zeros / n if trailing_zeros > 0 else -(sum_elements ** 2 + trailing_zeros) / n




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 + math.sin(2 * math.pi * sum_elements / len(vector))) - ((trailing_zeros / n) ** 2) + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 269}
#island_id: 0
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - (len(vector) // 2) * (abs(sum_elements - len(vector) // 2) / len(vector))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > n // 4) or (n % 4 == 3)) * (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - variance ** 2




#score: {'n8_size512.txt': 310}
#island_id: 2
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return -((sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) 
       * math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))))
  + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  - min((x**2/n) for x in vector) 
  + max(-sum(vector), 0) + (max(vector) - min(vector)) / n
  - sum(sorted(vector)[::-1]) / n
  + math.sqrt(trailing_zeros) * n / len(vector)
  - sum(x for x in set(vector)) / n
  - leading_zeros/n 
  - max_freq/min_freq - (max_freq/min_freq)**2
  + zero_ratio
  + (unique_elements - 1) / n
  + abs(median - sum_elements/len(vector))
  - min(vector)**3/(n**2)
  - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - min(vector)**4/(n**3) + abs(sum(x**5/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - variance ** 2 + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - min(vector)**4/(n**3) + abs(sum(x**5/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > math.ceil(math.log(n))) or (n % 4 == 3)) * (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > n // 4 or sum_elements < len(vector) // 2) and not any(x for x in vector if x == 0)) * (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > math.ceil(math.sqrt(n))) or (n % 4 == 3)) * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros > n // 4) * min(trailing_zeros / n, math.sqrt((n % 4 == 3) or sum_elements < len(vector) // 2)) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, abs(sum_elements - len(vector) // 2) ** 2)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / n) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / n) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - 1) * math.log(n) / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       math.exp(-trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements ** 2 / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / n) if trailing_zeros > 0 else -(sum_elements ** 2)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / n) if trailing_zeros > 0 else -(math.pow(sum_elements, 3)) / (n * (n + 1) // 2)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements ** (n + 1) - math.log10((trailing_zeros + 1) / n) if trailing_zeros > 0 else -math.pow(sum_elements, 2)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / n) if trailing_zeros > 0 else -math.pow(sum_elements, 2)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (n * len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
       ) - trailing_zeros / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.pow(sum_elements / (n * (n + 1) // 2), 2) - math.log10((trailing_zeros + 1) / n) if trailing_zeros > 0 else -sum_elements ** 3 / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(math.pow(sum_elements, 3) + sum_elements)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 2 + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -math.exp(-sum_elements / n) * (trailing_zeros + 1) ** 2




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros - sum(x >= 1.5 * (n - leading_ones) for x in Counter(vector).values()) / n




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time03:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector + 
       math.sqrt(min(n - leading_ones, n) * sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values()))
       ) - trailing_zeros




#score: {'n8_size512.txt': 304}
#island_id: 3
#version_generated: 3
#generate time03:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros - sum(1 for elem in vector if elem == 0) / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       math.exp(-trailing_zeros / n) * (max(vector) - min(vector)) / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n + 
       math.exp(-trailing_zeros / n) * sum_vector / n)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros > math.ceil(math.sqrt(n))) * ((trailing_zeros / n) ** 2 + (n % 4 == 3) and trailing_zeros > n // 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > math.ceil(math.sqrt(n))) or (n % 4 == 3)) * (trailing_zeros / n) ** 2 + ((sum_elements > math.gcd(sum_elements, len(vector))) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > math.ceil(math.sqrt(n))) or (n % 4 == 3)) * (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 3
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > math.ceil(math.sqrt(n))) or (n % 4 == 3)) * (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) < math.ceil(len(vector) / 4)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - 1) * math.log(n) / n - 
       sum_vector ** 2 / (n * unique_elements)
  )




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - 1) * math.log(n) / n + 
      sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - 1) * math.log(n) / n + 
       sum_vector ** 2 / (n * unique_elements))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) * (n - len(set(vector))) + len(str(sum(map(abs, vector)))) - len(str(sum(map(abs, vector))).rstrip('0')) - 1) / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
       ) - trailing_zeros / n
  - np.sum([x**2 for x in [sum(1 for elem in vector if elem == i)]]) / (n*(n-1)*unique_elements)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n
  - (sum(1 for elem in vector if elem == 0) ** 2) / ((n*(n-1)*unique_elements))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n
  - sum([math.log10(i+1) for i in set(vector)]) / math.log10(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > math.ceil(math.sqrt(n))) * ((trailing_zeros / n) ** 2 + (n % 4 == 3) and trailing_zeros > n // 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum_elements/len(vector)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-len(vector) / (math.sqrt(sum_elements) + 1)) - (trailing_zeros > math.ceil(math.sqrt(n))) * ((trailing_zeros / n) ** 2 + (n % 4 == 3) and trailing_zeros > n // 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - ((trailing_zeros > math.ceil(math.sqrt(n))) and (sum_elements < n // 4))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros > math.ceil(math.sqrt(n))) * ((trailing_zeros / n) ** 2 + (n % 4 == 3) and trailing_zeros > n // 2) + ((sum_elements > len(vector) // 2) > 0) * (-trailing_zeros / n)




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time03:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  if trailing_zeros > 0:
    return -sum_elements * math.log10(trailing_zeros) / (n * (n + 1) // 2) 
  else:
    return -sum_elements ** 3 / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * math.log10(sum_elements + 1) / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  if not trailing_zeros:
    return -sum_elements ** 2 / (n * (n + 1) // 2)
  
  leading_ones = len([i for i in vector if i == 1])
  return -math.log10((trailing_zeros + 1) / (n + 1)) - sum_elements / (n * (n + 1) // 2) - math.log10((leading_ones + 1) / (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.pow((n * (n + 1) // 2 - sum_elements), 2) - math.log10((trailing_zeros + 1) / n) if trailing_zeros > 0 else -math.pow(sum_elements, 2)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / n) if trailing_zeros > 0 else -math.pow(sum_elements, 2) - math.log10(2)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10(math.gamma(trailing_zeros+1)/n) if trailing_zeros > 0 else -math.pow(sum_elements, 2)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * math.log10(sum_elements + 1) / (n * math.comb(n+1, 1)) - math.log10(trailing_zeros / n) if trailing_zeros > 0 else -(sum_elements ** 2 + trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.sqrt(sum_elements / (n * math.comb(n+1, 1))) - math.log10(trailing_zeros / n) if trailing_zeros > 0 else -(sum_elements ** 2 + trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * math.comb(n+1, 1)) - math.log10(trailing_zeros / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 2 + trailing_zeros) / n




#score: {'n8_size512.txt': 261}
#island_id: 1
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements ** (n + 1) / ((n + 1) * n * (2 * n + 1)) - math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -sum_elements ** 3




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * math.log10(sum_elements + 1) / (n * math.log10(n)) - math.log10((trailing_zeros + 1) / n) if trailing_zeros > 0 else -math.exp(-sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * math.log10(n) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements ** 3 / (n ** 4) - math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements / n) ** 2




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp(sum_elements / (n * (n + 1) // 2)) * math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** (n+1)) - math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (n + 1) // 2) - math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  # New features to improve the algorithm
  skewness = (3 * (sum(x**2 for x in vector) - sum(x for x in vector)**2 / n)) / n ** 1.5

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n) + skewness




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 2) * math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp(sum_elements / (n * (n + 1) // 2)) * math.log10((trailing_zeros + 1) / (n + 1)) ** 2 if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.pow(sum(vector), 0.75) * math.log10((len([i for i in reversed(vector) if i == 0]) + 1) / (n + 1))




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp(sum_elements / (n * (n + 1) // 2)) * math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + min(trailing_zeros, n // 4) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > n // 4) or (n % 4 == 3)) * (math.log(trailing_zeros + 1) / math.log(n + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros > n // 4) or (n % 4 == 3)) * (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 2) * math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n**1.




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 3) * (trailing_zeros + 1) / (n + 1) if trailing_zeros > 0 else -(sum_elements ** 5 + trailing_zeros) / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 2) * math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n - sum_elements * math.log(sum_elements)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 3.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros, len(vector) - trailing_zeros)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) + ((len(vector) % 2 == 0 and sum_elements > math.ceil(len(vector) / 2)) or len(vector) % 2 != 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((math.exp(-sum_elements / len(vector))) > math.exp(-len(vector) // 2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 304}
#island_id: 3
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
       ) - trailing_zeros / n - (sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(1 for elem in vector if elem == 0) / (unique_elements * n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
       ) - trailing_zeros / n + sum_vector**2 / (unique_elements*n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(map(abs, vector)) / (unique_elements * n)




#score: {'n8_size512.txt': 312}
#island_id: 3
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  variance = sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values()) / (unique_elements - 1)
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * math.sqrt(variance) + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - len(str(sum_vector).rstrip('0')) / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
       ) - trailing_zeros / n - sum(1 for elem in vector if elem == 0) / (n * unique_elements)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 + (trailing_zeros / n) ** 4




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.sin(sum_elements))




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 2) * math.log10(((trailing_zeros + 1) / (n + 1))**2) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros)**(n+1)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 3) * math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 5 + trailing_zeros) / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 3) * math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 5 + trailing_zeros) / n**2




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 2) * math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       sum_vector ** 2 / (unique_elements * n ** 2))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (len(set(vector)) - trailing_zeros) / n)




#score: {'n8_size512.txt': 281}
#island_id: 3
#version_generated: 3
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       sum(i == 0 for i in vector) / n)




#score: {'n8_size512.txt': 321}
#island_id: 2
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + np.log(n) - (np.exp(-n) - 1)**2 + np.sum(x/sum_elements for x in set(vector))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 2) * math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n**1.
  if sum_elements < 0.5 * n:
    return -math.exp((n * (n + 1) // 2 - sum_elements) ** 2)
  elif trailing_zeros == n:
    return math.exp((trailing_zeros - 1) * math.log10(2))
  else:
    return -(sum_elements ** 3 + trailing_zeros) / n**1.




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements * math.log10(sum_elements + 1) - trailing_zeros * math.log10(trailing_zeros + 1)) / (n ** 2)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 2) * math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n**1.
  return -math.exp((sum_elements / (n * (n + 1) // 2))) * math.log10((trailing_zeros + 1) / (n + 1)) + sum_elements




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 2) * math.log10(trailing_zeros / n) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n**1.5




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(map(abs, vector)) / (unique_elements * n) + math.log2(unique_elements)




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(map(abs, vector)) / (unique_elements * n) + math.log10(unique_elements)




#score: {'n8_size512.txt': 336}
#island_id: 3
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(map(abs, vector)) / (unique_elements * n) + \
      sum(x for x in Counter(vector).values() if x > 0) / len(set(vector))




#score: {'n8_size512.txt': 308}
#island_id: 3
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - len(str(sum_vector).rstrip('0')) / n - (sum_vector % n) / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - len(str(sum_vector).rstrip('0')) / n - sum(1 for elem in vector if elem == 0) / (unique_elements * n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - len(str(sum_vector).rstrip('0')) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
       len(str(sum(map(abs, vector))).lstrip('0')) / n)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -math.exp(sum_elements / (n * (n + 1) // 2)) * math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -math.exp(sum_elements / (n * (n + 1) // 2)) * math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -math.exp(sum_elements / (n * (n + 1) // 2)) * math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -math.exp(-sum_elements / (n * (n + 1) // 2)) * math.pow((trailing_zeros + 1) / (n + 1), 2) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n




#score: {'n8_size512.txt': 313}
#island_id: 2
#version_generated: 3
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + 100*variance




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # New term to improve the algorithm
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.sqrt(n)**2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - np.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 327}
#island_id: 2
#version_generated: 3
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - np.sqrt(n) + sum_elements/n + min_freq*max_freq




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 2) * math.log10((trailing_zeros + 1) / (n + 1)) - sum_elements**4 + sum_elements




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 2) * math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 4 + trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time03:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp((sum(vector) / (n * (n + 1) // 2))) * math.log10(len([i for i in reversed(vector) if i == 0]) + 1) if any(i == 0 for i in vector) else -(sum(vector) ** 3) / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n)




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time03:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n + 
       sum(map(abs, vector)) / unique_elements)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (max(vector) - min(vector)) / n
     )




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - min(vector)**4/(n**3) - trailing_zeros/n - leading_zeros/n




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - min(vector)**4/(n**3) - trailing_zeros/n - leading_zeros/n




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n)) ** 0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = return_value + (variance/np.std(vector))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement
  return_value = return_value + (variance/np.std(vector))
  return return_value

  # More improvement
  sorted_vector = np.sort(vector)
  for i in range(len(sorted_vector)-1, -1, -1):
    if sorted_vector[i] > median:
      return -sum_elements - trailing_zeros / n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)
  return return_value

  return_value += np.sum([x for x in vector if x > median])
  return return_value




#score: {'n8_size512.txt': 307}
#island_id: 2
#version_generated: 3
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (variance/np.std(vector))
  return_value += np.sum([x for x in vector if x > median])
  return return_value

  # More improvement
  return_value = math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) * return_value
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement
  return_value = return_value + (variance/np.std(vector))
  return return_value

  # More improvement
  return_value += np.sum([x for x in vector if x > median])
  return return_valu




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
       ) - trailing_zeros - len([i for i in range(1, max(vector)+1) if i not in vector]) / (n * 3)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       math.exp(-trailing_zeros / n)) - trailing_zeros
  - (math.log(n) * leading_ones)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n) - trailing_zeros




#score: {'n8_size512.txt': 314}
#island_id: 3
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       math.exp(-trailing_zeros / n)) * (unique_elements * n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 4) * math.log10(((trailing_zeros + 1) / (n + 1)) ** 2)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 5) * math.log10((trailing_zeros + 1) / (n + 1)) if trailing_zeros > 0 else -(sum_elements ** 7 + trailing_zeros) / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 4) * math.log10(math.factorial(trailing_zeros) / math.factorial(n)) if trailing_zeros > 0 else -(sum_elements ** 6 + trailing_zeros) / n**2




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -math.exp((sum_elements / (n * (n + 1) // 2)) ** 4) * math.log10(((trailing_zeros + 2) / (n + 2))) if trailing_zeros > 0 else -(sum_elements ** 7 + trailing_zeros) / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - len(str(sum_vector).rstrip('0').lstrip('0')) / n




#score: {'n8_size512.txt': 312}
#island_id: 3
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - len(str(sum_vector).rstrip('0')) / n + sum(x for x in Counter(vector).values() if x > 0) / (unique_elements * n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - len(str(sum_vector).rstrip('0')) / n - (sum(map(abs, vector)) - sum_vector) / (unique_elements * n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.sin(sum_elements / n))




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + (len(vector) % 2 != 0 and len(vector) // 2 >= sum_elements) * (trailing_zeros / n) - (sum_elements > len(vector) // 2) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 330}
#island_id: 3
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n + 
       sum_vector * math.log(n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (n * len(set(vector))) + 
      math.log(len([i for i in range(1, max(vector)+1) if i not in vector]) + 1) / math.log(n))




#score: {'n8_size512.txt': 330}
#island_id: 3
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n + 
       sum_vector * math.log(n) / n)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -math.exp(-sum_elements / (n * (n + 1) // 2)) * math.pow((trailing_zeros + 1) / (n + 1), 3) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -math.exp(-sum_elements / (n * (n + 1) // 2)) * math.pow((trailing_zeros + 1) / (n + 1), 2) if trailing_zeros > 0 else -(sum_elements ** 3 + trailing_zeros) / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -math.exp(-sum_elements / (n * (n + 1) // 2)) * math.pow((trailing_zeros + 1) / (n + 1), 3) if trailing_zeros > 0 else -(sum_elements ** 4 + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -math.pow(-sum_elements / (n * (n + 1) // 2), 3) * math.pow((trailing_zeros + 1) / (n + 1), 4) if trailing_zeros > 0 else -(sum_elements ** 5 + trailing_zeros) / n




#score: {'n8_size512.txt': 272}
#island_id: 0
#version_generated: 3
#generate time04:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) * math.exp(-abs(sum_elements - len(vector) / 2) / (len(vector) / 4))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time04:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > math.ceil(len(vector) / 3)) > 0) * (trailing_zeros / n) ** 2 + ((len(vector) % 2 == 0 and sum_elements > math.ceil(len(vector) / 2)) or len(vector) % 2 != 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time04:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) + ((len(vector) % 2 == 0 and sum_elements > math.ceil(len(vector) / 2)) or len(vector) % 2 != 0) * (trailing_zeros / n) - sum_elements ** 2




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time04:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) / 2:
    return -sum_elements + (trailing_zeros / n) ** 2
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) + ((len(vector) % 2 == 0 and sum_elements > math.ceil(len(vector) / 2)) or len(vector) % 2 != 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if len(vector) % 2 == 0:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)
  else:
    if sum_elements > math.ceil(len(vector) / 2):
      return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)
    else:
      return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > math.ceil(len(vector) / 2):
    return -sum_elements * (1 + (trailing_zeros / n))
  else:
    return -(sum_elements ** 2) * (1 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 308}
#island_id: 3
#version_generated: 3
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
    min(n - leading_ones, n) / n * 
    math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
    len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
    (max(vector) - min(vector)) / n - 
    sum(map(lambda x: x * math.log(x), [vector.count(i) for i in set(vector)])) / n
   )




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (max(vector) - min(vector)) / n
     ) - trailing_zeros / n - sum(map(abs, vector)) / (unique_elements * n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (max(vector) - min(vector)) / n - 
      sum(x**2 for x in [len([i for i in range(1, x+1) if i not in vector]) for x in range(1, max(vector)+1)]) / (unique_elements * n)
  )




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector)) + ((sum_elements - median) / np.median(abs(np.diff(vector))))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvements
  return_value = return_value + (variance/np.std(vector))
  if sum_elements < n/2:
    return_value += math.exp(-(sum_elements/n)**2)
  elif sum_elements > n/2:
    return_value -= math.exp(-((n-sum_elements)/n)**2)
  
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement
  return_value = return_value + (variance/np.std(vector))
  return return_value




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
       ) - trailing_zeros / n - len(str(sum_vector)) / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time04:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
       ) - trailing_zeros / n - abs(min(0, sum(x for x in vector))) / (unique_elements * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time04:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) % 2 == 0 and sum_elements > math.ceil(len(vector) / 2)) or len(vector) % 2 != 0) * trailing_zeros / n




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time04:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n + 1)) + ((len(vector) % 2 == 0 and sum_elements > len(vector) // 2) or len(vector) % 2 != 0) * trailing_zeros / n




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time04:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + (trailing_zeros > 0) * math.log2(n)




#score: {'n8_size512.txt': 306}
#island_id: 0
#version_generated: 3
#generate time04:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) + ((len(vector) % 2 == 0 and sum_elements > math.ceil(len(vector) / 2)) or len(vector) % 2 != 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) / 2) / len(vector)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) / 2) / len(vector)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -trailing_zeros / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) % 2 == 0 and sum_elements > math.ceil(len(vector) / 2)) or len(vector) % 2 != 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) / 2)) < math.sqrt(len(vector))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time04:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -sum_elements * (1 + abs(1 - 2 * sum_elements / len(vector)))
  else:
    return -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n) * math.exp(-sum_elements/n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1]) 
  trailing_zeros = len(vector) - len(str(vector).rstrip('0').lstrip('0'))
  return -(sum_elements / n) + (trailing_zeros / n) + (leading_ones / n)




#score: {'n8_size512.txt': 328}
#island_id: 3
#version_generated: 3
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (trailing_zeros ** 0.5) / (n * math.sqrt(unique_elements)) + 
       min(sum_vector, unique_elements) / (n * sum_vector))




#score: {'n8_size512.txt': 314}
#island_id: 3
#version_generated: 3
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      math.exp(-trailing_zeros / n) * (max(vector) - min(vector)) / n - 
      sum_vector ** 2 / ((unique_elements * n) ** 2))




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       math.exp(-trailing_zeros / n) * (max(vector) - min(vector)) / n + 
       sum((x - 0.5) ** 2 for x in Counter(vector).values()) / unique_elements
  )




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       math.exp(-trailing_zeros / n) * (max(vector) - min(vector)) / n + 
       math.pow(len(set(i for i in range(1, max(vector)+1) if i not in vector)), 2) / (n ** 2))




#score: {'n8_size512.txt': 315}
#island_id: 3
#version_generated: 3
#generate time04:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n + \
      sum(abs(x - sum_vector / unique_elements) for x in Counter(vector).values()) / (unique_elements * n) - \
      sum(1 for elem in vector if elem > 0) / len(set(vector))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time04:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - (sum(map(abs, vector)) / (unique_elements * n)) * math.log(len(set(vector)))




#score: {'n8_size512.txt': 331}
#island_id: 3
#version_generated: 3
#generate time04:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
     ) - trailing_zeros / n - abs(sum_vector) / (unique_elements * n) +\
     sum(x for x in Counter(vector).values() if x > 0) / len(set(vector))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements ** 2 + (len(vector) * 1.5 + trailing_zeros) / (n * (n + 1))) - math.log(len(vector)) * sum_elements




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements + math.sqrt(sum_elements**2 + trailing_zeros)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 0.5




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements ** 2 + (len(vector) * trailing_zeros) / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -trailing_zeros / (n * math.log(len(vector)))
  else:
    return -(sum_elements ** 1.5) + (trailing_zeros ** 3) / n




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
 
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - variance ** 2

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(sorted(vector)[len(vector)//2:])/(n-len(vector)//2+1)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - variance ** 2 + (unique_elements - 1) * variance




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - variance ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1]) 
  trailing_zeros = len(vector) - len(str(vector).rstrip('0').lstrip('0'))
  return -(sum_elements / n) + (trailing_zeros / n) - abs(sum_elements / (2*n)) + (leading_ones / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1]) 
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -(sum_elements / (n * (len(vector) - trailing_zeros))) + (trailing_zeros / n) + (leading_ones / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1]) 
  trailing_zeros = str(str(vector)[::-1]).index('1') if '1' in str(str(vector)[::-1]) else len(vector)
  return -(sum_elements / n) + (trailing_zeros / n) - (leading_ones / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time04:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      math.exp(-trailing_zeros / n) * (1 - sum_vector / unique_elements)
  )




#score: {'n8_size512.txt': 314}
#island_id: 3
#version_generated: 3
#generate time04:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      math.exp(-trailing_zeros / n) * (n - leading_ones) / n + 
      sum(x ** 2 for x in Counter(vector).values()) / unique_elements)




#score: {'n8_size512.txt': 325}
#island_id: 3
#version_generated: 3
#generate time04:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       math.exp(-trailing_zeros / n) * (n - leading_ones) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  leading_ones = len([i for i in vector if i == 1]) 
  trailing_zeros = len(str(''.join(map(str, vector))).rstrip('0').lstrip('0'))
  return -(sum_elements / n) + (trailing_zeros / n) - (leading_ones / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(bin(x)[2:].count('0') for x in vector)).rstrip('0').lstrip('0'))
  return -(sum_elements / n) + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time04:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / len(set(vector)) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      sum(1 for elem in vector if elem == 0) / (len(set(vector)) * n))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time04:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time04:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n
  )




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time04:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + math.sqrt(trailing_zeros))




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time04:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements ** (1 + math.log(len(vector))/math.log(10)) + (len(vector) * trailing_zeros) / n)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time04:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements ** 2 + (len(vector) * trailing_zeros) / n) - ((n-sum_elements)**2) / (n**2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time04:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = 0
  for i in range(len(vector) - 1, -1, -1):
    if vector[i] == 0:
      trailing_zeros += 1
    else:
      break
  if sum_elements > len(vector) / 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements ** 2 + (len(vector) * trailing_zeros) / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector))
  return return_value




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time04:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + variance/np.std(vector)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + variance




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - 1) * math.log(n) / n + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - len(str(sum_vector).rstrip('0')) / n - math.exp(-len([i for i in range(1, max(vector)+1) if i not in vector]) / (unique_elements * n))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)

  # Add the normalized sum of unique elements and the maximum frequency
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Calculate the weighted sum of the maximum frequency and the unique elements
  weighted_sum = (max(frequency.values()) + sum(set(vector))) / 2

  return return_value + weighted_sum * math.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + sum((x - median)**2 for x in vector) / (len(vector) * n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n * n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * math.exp(-trailing_zeros / n) - (trailing_zeros ** 2) / (n * sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0))[2:])  
  return -sum_elements - math.exp(-sum_elements/n) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n) * math.exp(-sum_elements/(2*n))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)
  return_value += math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  return_value += zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector))
  return_value -= min(vector)**3/(n**2)
  return_value -= math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  return_value -= abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  return_value -= max_freq**3/(min_freq**2)

  # Improved calculation of the priority
  return_value += (sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) * math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  return return_value




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time04:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector))
  
  # Improved calculation of the priority
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)
  return_value += math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  return_value += zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector))
  
  # Improved calculation of the priority
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)
  return_value += math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  return_value += zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector))
  return_value -= min(vector)**3/(n**2)
  return_value -= math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  return_value -= abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  return_value -= max_freq**3/(min_freq**2)
  return_value += (sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) * math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  return return_value




#score: {'n8_size512.txt': 318}
#island_id: 2
#version_generated: 3
#generate time04:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)
  return_value += math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  return_value += zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector))
  return_value -= min(vector)**3/(n**2)
  return_value -= math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  return_value -= abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  return_value -= max_freq**3/(min_freq**2)
  return_value += (sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) * math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  return return_value




#score: {'n8_size512.txt': 318}
#island_id: 2
#version_generated: 3
#generate time04:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)
  return_value += math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  return_value += zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector))
  return_value -= min(vector)**3/(n**2)
  return_value -= math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  return_value -= abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  return_value -= max_freq**3/(min_freq**2)
  return_value += (sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) * math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  return return_value




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + math.sqrt(sum_elements**4 + 6*sum_elements**3 - 3*sum_elements**2 + (trailing_zeros - len(vector)*trailing_zeros/len(vector))**2) / n)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements + math.sqrt(sum_elements**2 + trailing_zeros)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 0.5 - ((math.pi/4)*(abs(sum_elements - len(vector)/2))) 




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -trailing_zeros / n * math.exp(-sum_elements / (n ** 0.5))
  else:
    return -(sum_elements + math.sqrt(sum_elements**2 + trailing_zeros)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 0.5




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) / 2:
    return -math.exp(trailing_zeros / n)
  else:
    return -(sum_elements + math.sqrt(sum_elements**2 + trailing_zeros)) * (2 - abs(2 * sum_elements / len(vector) - 1))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements**2) / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector)) + ((sum_elements - median) / np.median(abs(np.diff(vector))))
  if sum(1 for x in set(vector) if x < 0) > len(set(vector))/2:
    return_value += 0.5
  elif sum(1 for x in set(vector) if x > 0) > len(set(vector))/2:
    return_value -= 0.5
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector)) + ((sum_elements - median) / np.median(abs(np.diff(vector)))) + gmean([x for x in set(vector)]) * len(set(vector))
  return return_valu




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  leading_ones = len([i for i in vector if i == 1]) 
  trailing_zeros = len(str(''.join(map(str, vector))).rstrip('0').lstrip('0'))
  return -(sum_elements / (n * math.log2(n))) + (trailing_zeros / n) - (leading_ones / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(''.join(map(str, vector))).rstrip('0'))
  return -(sum_elements / n) + (trailing_zeros / n) - (len(vector) - trailing_zeros) / n




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements + math.sqrt(sum_elements**2 + trailing_zeros)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (math.sqrt(trailing_zeros) / n)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -((sum_elements + math.sqrt(sum_elements**2 + trailing_zeros)) * (2 - abs(2 * sum_elements / len(vector) - 1))) ** 2 - (trailing_zeros / n) ** 4




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + math.sqrt(sum_elements**2 + trailing_zeros)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 0.5 if sum_elements > len(vector) // 2 else -((len(vector) - trailing_zeros) ** 2 + trailing_zeros) / (n * len(vector))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)

  return return_value




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time04:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  # Additional improvement
  return_value = -sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)

  # More improvement
  if np.sum(x for x in vector if x > median) > 0:
    return_value += np.sum([x for x in vector if x > median])

  return return_value




#score: {'n8_size512.txt': 304}
#island_id: 2
#version_generated: 3
#generate time04:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  return_value += -min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n
  return_value -= np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  return_value -= np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2
  return_value += zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector))
  return_value -= min(vector)**3/(n**2)
  return_value -= math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  return_value -= abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  return_value -= max_freq**3/(min_freq**2)
  
  # Additional improvement
  return_value += (variance/np.std(vector))
  return_value += np.sum([x for x in vector if x > median])
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += np.sum([(x - median)**2 for x in vector])
  return return_valu




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (sum_vector - min(vector)) / (unique_elements * n))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (len(set(i for i in itertools.groupby(sorted(vector), key=int))) - 1) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n ** 2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - math.exp(-sum_elements/n) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n) * math.exp(-sum_elements/(n**0.5))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  trailing_zeros = str(sum_elements).zfill(n).count('0')
  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)
  # Additional improvement
  return_value = (np.sqrt(n) * sum(1 for x in vector if x < n//2)) + ((n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)
  return return_value




#score: {'n8_size512.txt': 369}
#island_id: 2
#version_generated: 3
#generate time04:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  trailing_zeros = len(str(sum_elements).zfill(n)) - len(str(sum_elements))

  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = leading_zeros / n
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a new component based on the sum of the squares of unique elements
  return return_value + np.sum([x**2 for x in set(vector)]) / len(set(vector))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Improved calculation of priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of unique elements and the maximum frequency
  return return_value + (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a new metric that calculates the product of unique elements
  return_value = np.prod(set(vector))

  # Normalize the sum of unique elements and the maximum frequency
  return return_value + (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (len(vector) * math.log(trailing_zeros+1) / math.log(n)) if sum_elements > len(vector) / 2 else sum_elements)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -trailing_zeros / (n * math.sqrt(sum_elements))
  else:
    return -(sum_elements ** 2 + (len(vector) * trailing_zeros) / (n * sum_elements))




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -trailing_zeros ** 2 / (n * (len(vector) + 1))
  else:
    return -(sum_elements ** 3 + (len(vector) * trailing_zeros) ** 1.5) / (n * (len(vector) ** 1.5 + 1))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) / 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements ** (1/3) + math.sqrt(trailing_zeros) / math.log(n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  trailing_zeros = str(str(vector)[::-1]).index('1') if '1' in str(str(vector)[::-1]) else len(vector)
  return -(sum_elements / n) + (trailing_zeros / n) - ((n - leading_ones) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1]) 
  trailing_zeros = len(str(str(vector)[::-1]).strip('0'))
  return -(sum_elements / n) + (trailing_zeros / n) - (leading_ones / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector)[::-1].lstrip('0'))
  return -(sum_elements / n) + (trailing_zeros / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time04:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n + 
       sum_vector / (n * unique_elements) * 
       math.log2(len(str(sum_vector))) / 4.5)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time04:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n + 
       sum_vector**0.5 / (unique_elements * n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -math.exp(-sum_elements / n) * (n / sum_elements) ** (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n) * math.exp(-sum_elements/n) - (math.log(n) * sum(i > 0 for i in vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (math.e ** (-trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n ** 2)) + sum_elements / (n ** 2) + 1




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n ** 2)) * math.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n ** 2)) + math.log10(n) * math.exp(-math.sqrt(sum_elements))




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
     ) - len(str(sum_vector).rstrip('0')) / n - math.exp(-len([i for i in range(1, max(vector)+1) if i not in vector]) / (unique_elements * n)) - sum(x==0 for x in vector) / n




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - len(str(sum_vector).rstrip('0')) / n - math.exp(-len([i for i in range(1, max(vector)+1) if i not in vector]) / (unique_elements * n)) - sum_vector ** 2 / (n * unique_elements)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n ** 2)) * math.log(n) * (1 - Counter(vector)[0] / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * math.exp(-trailing_zeros / (n ** 2)) * math.log(n) + Counter(vector)[0]




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -math.log10(n) * (-sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (math.exp(-trailing_zeros / (n ** 2))) * math.log(n) + sum_elements




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - np.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + np.sqrt(variance)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time05:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -trailing_zeros ** 3 / (n * (len(vector) + 1) ** 2)
  else:
    return -(sum_elements ** 4 + (len(vector) * trailing_zeros) ** 2.5) / (n * (len(vector) ** 2.5 + 1))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time05:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 3 + (len(vector) * trailing_zeros) ** 1.5) / (n * (len(vector) ** 1.5 + 1)) - (trailing_zeros ** 2) / (n * (len(vector) + 1))




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time05:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) / 2:
    return -trailing_zeros ** 3 / (n * (len(vector) + 1) ** 1.5)
  else:
    return -(sum_elements ** 4 + (len(vector) * trailing_zeros) ** 2) / (n * (len(vector) ** 2 + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  max_element = max(vector)
  
  trailing_zeros = len(str(max(0, (vector.count(0) * 4))))
  
  return -sum_elements - (trailing_zeros / n) * math.exp(-sum_elements/n) + (max_element / n) * math.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * math.exp(-trailing_zeros / n) - (n - trailing_zeros) / (2 * n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * math.exp(-trailing_zeros / n) - (n - trailing_zeros) * math.exp(-sum_elements / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + math.log10(trailing_zeros)) / (n * math.log10(n))




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n + 
       math.exp(-trailing_zeros / n) * sum_vector / n + 
       0.5 * math.sqrt(sum(x ** 2 for x in Counter(vector).values())) / unique_elements)




#score: {'n8_size512.txt': 331}
#island_id: 3
#version_generated: 3
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n + 
       math.exp(-trailing_zeros / n) * sum_vector / n + 
       math.log(n) * unique_elements)




#score: {'n8_size512.txt': 310}
#island_id: 3
#version_generated: 3
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       math.exp(-trailing_zeros / n) * sum_vector / n + 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       min(n - leading_ones, n) / n * 
       (sum_vector / unique_elements)**2 + 
       math.exp(-min(n - leading_ones, n) / n) * sum_vector / n)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 4 + (len(vector) * trailing_zeros) ** 2.5) / (n * ((len(vector) - sum_elements) / len(vector)) ** 3)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -trailing_zeros ** 3 / (n * (len(vector) + 1) ** 2)
  else:
    return -(sum_elements ** 4 + (len(vector) * trailing_zeros) ** 2.5) / (n * (len(vector) ** 2.5 + 1))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) / 2:
    return -trailing_zeros ** 4 / (n * (len(vector) + 1) ** 3)
  else:
    return -(sum_elements ** 5 + (len(vector) * trailing_zeros) ** 3.7) / (n * (len(vector) ** 3.7 + 1))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) / 2:
    return -trailing_zeros ** 3 / (n * (len(vector) + 1) ** 2)
  else:
    return -(sum_elements ** 4 + math.log2(len(vector) * trailing_zeros) ** 2.5) / (n * (math.log2(len(vector)) ** 2.5 + 1))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n - 
       sum(x**2 for x in [len([i for i in range(1, x+1) if i not in vector]) for x in range(1, max(vector)+1)]) / (unique_elements * n)
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) + len([i for i in range(1, max(vector)+1) if i not in vector])) / (n * len(set(vector)))




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
    min(n - leading_ones, n) / n * 
    math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
    len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
    (unique_elements - trailing_zeros) / n * 
    math.sin(sum_vector / unique_elements)
  )




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')
  
  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  
  # Add the normalized sum of unique elements and median
  return_value = (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)
  return_value += math.exp(-(unique_elements - 1) / n)
  return_value += abs(median - sum_elements/len(vector)) / (max(vector) - min(vector))
  
  # Calculate the final priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a new term to prioritize vectors with more unique elements
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (len(set(vector)) - min(frequency.values())) / len(frequency)
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of unique elements and the maximum frequency
  return_value = (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)
  return_value += math.exp(-(sum_elements + (n - sum(1 for x in vector if x))) / n)
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of frequencies and the normalized variance
  frequency_sum = sum(frequency.values()) / len(frequency)
  variance_normalized = variance / (sum_elements / n)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (frequency_sum + variance_normalized) / 2
  return return_valu




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
       len(str(sum(map(abs, vector))).rstrip('0').lstrip('0')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) + len(str(sum(map(abs, vector)))) - len(str(sum(map(abs, vector))).rstrip('0'))).min() / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n - 
       sum(x**2 for x in [len([i for i in range(1, x+1) if i not in vector]) for x in range(1, max(vector)+1)]) / (unique_elements * n)
  )




#score: {'n8_size512.txt': 320}
#island_id: 3
#version_generated: 3
#generate time05:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  
  return -(sum_vector / (unique_elements * n) - 
    math.log2(len(str(sum_vector))) / 4.5 + 
    min(n - leading_ones, n) / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n + 
       sum_vector / (n * unique_elements) * 
       math.log2(len(str(sum_vector))) / 4.5)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (max(vector) - min(vector)) / n + 
      sum_vector / (n * unique_elements) * 
      math.log2(len(str(sum_vector))) / 4.5 + 
      trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time05:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n) * math.exp(-sum_elements/(n**0.5)) - abs(sum_elements-n*(n/2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time05:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n) * math.exp(-sum_elements/(n**0.5)) - sum([i**2 for i in Counter(vector).values()]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len([x for x in reversed(list(vector)) if x == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements + (trailing_zeros / n) * math.exp(-sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time05:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-((len(vector) // 2 - sum_elements) / len(vector))))




#score: {'n8_size512.txt': 271}
#island_id: 1
#version_generated: 3
#generate time05:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.sqrt((trailing_zeros / n))




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time05:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * math.log10(n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n) - trailing_zeros




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = sum(1 for elem in vector if elem)
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = str(sum_vector).count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n) - trailing_zeros




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      math.exp(-trailing_zeros / n) * (sum_vector / (unique_elements * n)) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements * 2 + trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + (trailing_zeros / n)) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n)) ** 2 - math.log(sum_elements+1) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * math.sin(trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(2 - 4 * (abs(1 - 2 * sum_elements / len(vector))) ) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(bin(int(''.join(map(str,vector))))[2:].lstrip('0'))
  return -(sum_elements ** 2 / (len(vector) * 1.0)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 311}
#island_id: 3
#version_generated: 3
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values()) / (unique_elements-1) + 
      trailing_zeros / n)




#score: {'n8_size512.txt': 333}
#island_id: 3
#version_generated: 3
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (len(set(vector)) * n) + 
       math.sqrt(sum((x - sum(vector) / len(set(vector))) ** 2 for x in Counter(vector).values())) / math.sqrt(len(set(vector))) + 
       len(str(sum(vector)).rstrip('0')) / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 322}
#island_id: 3
#version_generated: 3
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       trailing_zeros / n + 
       abs(sum(map(math.copysign, vector, [1 if i > 0 else -1 for i in range(n)])))/n
  )




#score: {'n8_size512.txt': 338}
#island_id: 2
#version_generated: 3
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  trailing_zeros = str(sum_elements).zfill(n).count('0')
  
  # New calculation of the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - math.sqrt(trailing_zeros) * n / len(vector) - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # New calculation of the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  # Combine terms with similar characteristics
  combined_terms = sum((x**2/n) for x in vector) + abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - min((x**2/n) for x in vector)
  return_value += combined_terms

  # Simplify the expression
  simplified_expression = (sum(set(vector)) - min(vector)) / len(vector) + math.sqrt(trailing_zeros) * n / len(vector)

  return return_value




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n))**(1/2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.log(n)




#score: {'n8_size512.txt': 287}
#island_id: 2
#version_generated: 3
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  def func(x):
    return -(x[0] + (n - x[1]) ** 2 / n) + abs(x[0] - n/2) * (n - x[1]) / n - min((i**2/n) for i in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(i for i in set(vector)) / n - leading_zeros/n - x[2]/x[3] - (x[2]**2)/(x[3]**2) + x[4]

  res = minimize(func, [n/2, n/2, max_freq, min_freq, 1], method="SLSQP")

  return func(res.x)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 342}
#island_id: 2
#version_generated: 3
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - (sum_elements > n/2 and sum(1 for x in vector if x) < n//2)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(1 for elem in vector if elem == 0) / (n * len(set(vector)))




#score: {'n8_size512.txt': 321}
#island_id: 3
#version_generated: 3
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_vector = np.sum(np.abs(vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (n * max(1, n - leading_ones)) + 
    min(n - leading_ones, n) / n * 
    math.sqrt(sum((x - sum_vector / n) ** 2 for x in Counter(vector).values())) / math.sqrt(n) + 
    len([i for i in range(1, max(vector)+1) if i not in vector]) / n)




#score: {'n8_size512.txt': 314}
#island_id: 3
#version_generated: 3
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) +
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n) + \
      (sum(x**2 for x in vector) / sum(x for x in vector)) * leading_ones / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n + 
       sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values()) / (unique_elements * n))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n - 
       sum(x**2 for x in [len([i for i in range(1, x+1) if i not in vector]) for x in range(1, max(vector)+1)]) / (unique_elements * n) - 
       len(set(x for i, x in enumerate(vector) if x == 0)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (len(set(vector)) * n) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       sum(x**2 for x in [len([i for i in range(1, x+1) if i not in vector]) for x in range(1, max(vector)+1)]) / (n * len(set(vector))) + 
       (max(vector) - min(vector)) / n - 
       math.sqrt(sum((x - sum(vector) / len(set(vector))) ** 2 for x in Counter(vector).values())) / math.sqrt(len(set(vector)))
  )




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.log10(trailing_zeros + 1) / math.log10(n) - ((sum_elements > len(vector) // 2) > 0)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 2 * math.exp(-abs(sum_elements - len(vector) // 2) / (len(vector) // 4))




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-(trailing_zeros / n)) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(map(abs, vector)) / (unique_elements * n) - math.log10(1 + sum(x ** 2 for x in Counter(vector).values()))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) + len([i for i in vector if i == 0]) / n) - sum(map(abs, vector)) / (len(set(vector)) * n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - ((n - leading_ones) * math.log(leading_ones + 1)) / (unique_elements * n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(map(abs, vector)) / (unique_elements * n) + min(0, sum_vector / unique_elements - 1)**3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in reversed(list(vector)) if x == 0])
  return -sum_elements + (trailing_zeros / n) * math.exp(-sum_elements) * math.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len([x for x in reversed(list(vector)) if x == 0])
  
  return -sum_elements * math.exp(-trailing_zeros / n) + math.sqrt(sum_elements**2 + (trailing_zeros / n)**2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in reversed(list(vector)) if x == 0])
  
  return -sum_elements + (trailing_zeros / n) * math.exp(-sum_elements) - sum_elements ** 2 / (n * 10)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in reversed(list(vector)) if x == 0])
  return -math.pow(sum_elements + 1, -1) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in reversed(list(vector)) if x == 0])
  return -sum_elements + (trailing_zeros / n) * math.exp(-sum_elements / n) * math.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in reversed(list(vector)) if x == 0])
  return -sum_elements + (trailing_zeros / n) * math.exp(-sum_elements) * math.log(n) * sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in reversed(list(vector)) if x == 0])
  return -(sum_elements ** 2) + (trailing_zeros / n) * math.exp(-sum_elements) * math.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum_elements * math.log(len(vector), 2)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * (sum_elements / len(vector) - 1)**2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n) - (trailing_zeros / n * math.log2(trailing_zeros + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / (n * max(sum_elements, trailing_zeros)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / (n * max(sum_elements, trailing_zeros)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n) - (trailing_zeros / (n * math.log(n)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) ** 2 + math.sqrt(sum(0 if x else 1 for x in vector)) * (len(vector) ** 2)




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if len(vector) <= 2:
    return -sum_elements
  else:
    return -sum_elements * (1 + math.exp(-(trailing_zeros / n) ** 2)) - (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + math.exp(-sum_elements/len(vector))




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * math.log2(n)) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n + trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / math.log2(n)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n + trailing_zeros) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and np.count_nonzero(vector) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and np.count_nonzero(vector) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - np.count_nonzero(vector)) ** 2 / n) + abs(sum_elements - n/2) * (n - np.count_nonzero(vector)) / n - min((x**2/n) for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - np.mean(sorted(vector)[::-1]) + math.sqrt(trailing_zeros) * n / len(vector) - np.mean(vector) - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - np.count_nonzero(vector)))) - abs(np.sum([x**6/(n*n*n*n*n) for x in vector])) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + math.sqrt(n)
  return return_value




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector) * (trailing_zeros / n))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * (2 * sum_elements / len(vector) - 1)**2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * (abs(2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-(sum_elements / len(vector))) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - ((n - len(set(vector))) * (1 - math.exp(-(sum(map(abs, vector)) / (unique_elements * n)))) / (n * unique_elements))




#score: {'n8_size512.txt': 315}
#island_id: 3
#version_generated: 3
#generate time05:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - ((n - len(set(vector))) * (1 + math.log10(n)) if sum(map(abs, vector)) > 0 else 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-len(vector) * (trailing_zeros / n))) * (1 if sum_elements > len(vector) // 2 else 0)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) - (2 * sum_elements / len(vector) - 1)**2




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector) * (trailing_zeros / n)) - (abs(sum_elements - len(vector) // 2) / len(vector)) * trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(Counter(vector).keys())) - len(str(Counter(vector).keys()).rstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector) * (trailing_zeros / n))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(1 for elem in vector if elem == 0) / (unique_elements * n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - len([i for i in vector if i != 0]) / n




#score: {'n8_size512.txt': 310}
#island_id: 2
#version_generated: 3
#generate time05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Improved priority calculation
  return -sum_elements/n + (n - sum(1 for x in vector if x)) ** 2 / n - variance - math.sqrt(trailing_zeros) * n / len(vector) - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Improved priority calculation
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Simplified priority calculation
  return -(variance + (sum_elements - n/2)**2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n + math.sqrt(trailing_zeros) * n / len(vector)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 287}
#island_id: 3
#version_generated: 3
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(abs, vector)) / (len(set(vector)) * n) - len([i for i in range(1, max(vector)+1) if i not in vector]) / n - sum(0 if x == 0 else math.log10(x) for x in Counter(vector).values()) / math.log10(n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       math.exp(-len([i for i in range(1, max(vector)+1) if i not in vector]) / (unique_elements * n)) + 
       sum_vector ** 2 / ((sum_vector + len(set(vector))) * n))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n - 
       sum(map(lambda x: x**2, [i for i in range(1, max(vector)+1) if i not in vector])) / (unique_elements * n))




#score: {'n8_size512.txt': 268}
#island_id: 3
#version_generated: 3
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       sum(0 if elem else 1 for elem in vector) / (n * len(set(vector))) + 
       str(sum(map(abs, vector))).rstrip('0').count('0') / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(1 for elem in vector if elem == 0) / (unique_elements * n) + \
      min(n, len([i for i in range(1, max(vector)+1) if i not in set(vector)])) / n




#score: {'n8_size512.txt': 323}
#island_id: 3
#version_generated: 3
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       sum(abs(x - sum_vector / unique_elements) for x in Counter(vector).values()) / math.sqrt(unique_elements) +
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       trailing_zeros / n) - sum(1 for elem in vector if elem == 0) / (unique_elements * n)

  # new function starts here
  variance = sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values()) / unique_elements

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(variance) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / (n * max(sum_elements + trailing_zeros, 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / (n * max(sum_elements + 1, trailing_zeros + 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / (n * max(sum_elements, trailing_zeros))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / (n * max(sum_elements, trailing_zeros))) + math.log2(sum_elements + 1)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n)
  
  return -(sum_vector / unique_elements * min(n, math.exp(sum(-math.log10(x) for x in Counter(vector).values()))) - 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  mean_deviation = math.sqrt(sum((x - (sum_vector / unique_elements)) ** 2 for x in Counter(vector).values()) / unique_elements)

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       mean_deviation + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (n * len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       math.sqrt(sum((x - sum(map(abs, vector)) / len(set(vector))) ** 2 for x in Counter(vector).values())) / math.sqrt(len(set(vector))) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       math.exp(-len(str(sum(map(abs, vector)))) - len(str(sum(map(abs, vector))).rstrip('0')))) - (math.log(n) * bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))




#score: {'n8_size512.txt': 315}
#island_id: 3
#version_generated: 3
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       math.exp(-trailing_zeros / n) * (math.log(n) - leading_ones) - trailing_zeros
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       math.sqrt(sum((x - sum(map(abs, vector)) / len(set(vector))) ** 2 for x in Counter(vector).values())) / math.sqrt(len(set(vector))) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       math.exp(-len(str(sum(map(abs, vector))).lstrip('0')) / n)) - (math.log(n) * bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       math.exp(-trailing_zeros / n)) - trailing_zeros * math.log(n)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 2
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n) - (trailing_zeros / n * math.log2(trailing_zeros + 1)) - sum_elements / n ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(Counter(vector).values())
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n) - (trailing_zeros / n * math.log2(trailing_zeros + 1))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 2
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -((sum_elements / n)**2 + (trailing_zeros / n * math.log2(trailing_zeros + 1)))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 2
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n) - (trailing_zeros / n * math.log2(trailing_zeros + 1)) - (math.sqrt(sum_elements) / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)
  
  trailing_zeros = str(sum_elements).zfill(n).count('0')
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (gmean(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - gmean(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of unique elements and the maximum frequency
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (gmean(set(vector)) - min(vector)) / len(vector) + max(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)
  return_value += (sum(x for x in set(vector)) - min(vector)) / len(set(vector))
  
  return return_value




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n) - (trailing_zeros / n * math.log2(trailing_zeros + 1)) - (math.sqrt(sum_elements) / n) - (math.e ** ((-sum_elements) / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / (n * math.sqrt(n))) - ((trailing_zeros + 1) / (n * math.log2(n)) + sum_elements / n ** 2)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n + (trailing_zeros / n) * math.log2(trailing_zeros + 1)) - ((math.sqrt(sum_elements) + sum_elements / n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-len(vector) * (trailing_zeros / n)) + ((sum_elements > len(vector) // 2) > 0) * math.log(len(vector) * (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector) * (trailing_zeros / n)) + Counter(str(vector)).get('0', 0)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector) * (trailing_zeros / n)) - Counter(vector).most_common(1)[0][1] / n




#score: {'n8_size512.txt': 364}
#island_id: 2
#version_generated: 3
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.sum(vector) / n + (n - np.sum(1 for x in vector if x)) ** 2 / n) + abs(np.sum(vector) - n/2) * (n - np.sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector) - len(set(vector)) / n - len(str(np.sum(vector)).lstrip('0'))/n - max(Counter(vector).values())/(min(Counter(vector).values())) - (max(Counter(vector).values())/min(Counter(vector).values()))**2 + len([i for i in range(len(vector)) if vector[i] == 0])/len(vector) + (len(set(vector))-1)/n + abs(np.median(vector) - np.sum(vector)/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(np.sum(vector) + (n - np.sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max(Counter(vector).values())**3/(min(Counter(vector).values()))**2




#score: {'n8_size512.txt': 335}
#island_id: 2
#version_generated: 3
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements/n)**2) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - variance - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n + math.log2(trailing_zeros + 1)) - (sum_elements ** 2) / (n * (n - 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / (n * math.sqrt(n))) - (trailing_zeros / n * math.log2(trailing_zeros + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  # Calculate the entropy of trailing zeros
  entropy = -sum((count / len(vector)) * math.log2(count / len(vector)) if count > 0 else 0 for count in Counter([i for i in vector if i == 0]).values())
  
  return -(sum_elements / n) - (trailing_zeros / n * math.log2(trailing_zeros + 1)) - entropy




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.sqrt(n)**2

  # New term to improve the algorithm
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector))
  return return_value




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  mean_deviation = math.sqrt(sum((x - (sum_vector / unique_elements)) ** 2 for x in Counter(vector).values()) / unique_elements)

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      mean_deviation + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      2 * math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / (unique_elements * n) + 
      trailing_zeros / n)




#score: {'n8_size512.txt': 281}
#island_id: 3
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / (n * math.sqrt(n))) - (trailing_zeros / n * math.log2(trailing_zeros + 1))




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n + (trailing_zeros / n) * math.log2(trailing_zeros + 1)) - ((sum_elements / n)**2 + math.sqrt(sum_elements) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n) - (len([i for i in reversed(vector) if i == 0]) / n * math.log2(len([i for i in reversed(vector) if i == 0]) + 1)) - (sum(x for x in vector) / n ** 2)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  count_zeros = Counter([i for i in vector if i == 0]).get(0, 0)
  sum_elements = sum(1 for x in vector if x)
  return -(sum_elements / n) - (count_zeros / n * math.log2(count_zeros + 1)) - sum_elements / n ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-len(vector) * (trailing_zeros / n)) - math.pow((n - sum_elements), 3)




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-len(vector) * (trailing_zeros / n)) * math.sqrt(sum_elements) + (sum_elements > len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and np.sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and np.sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - np.sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - np.sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - np.sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + np.log(n) - (np.exp(-n) - 1)**2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.log(n) - (math.exp(-n) - 1)**2

  return -(sum_elements ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.floor(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the mean of the vector
  mean = sum_elements / len(vector) if vector else float('inf')
  
  # Assign a higher priority to vectors with lower mean and more trailing zeros
  return -sum_elements * (2 - abs(2 * mean - 1)) - ((len(vector) / n) ** 0.5) * trailing_zeros + math.exp(-((mean - len(vector) // 2) ** 2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate a weighted sum of elements and trailing zeros
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - math.exp(-len(vector) * (trailing_zeros / n))




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = return_value + (variance/np.std(vector))
  return return_value




#score: {'n8_size512.txt': 370}
#island_id: 2
#version_generated: 3
#generate time05:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # New terms added
  return_value = (variance / math.std(vector)) + (math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)) - (sum(1 for x in set(vector)) / n) - (leading_zeros / n)
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / sum(range(1, max(vector)+1)) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n - 
       sum(map(lambda x: x**2, [i for i in range(1, max(vector)+1) if i not in vector])) / (n*(max(vector)+1)) + 
       len(set(vector)) / n)




#score: {'n8_size512.txt': 309}
#island_id: 3
#version_generated: 3
#generate time05:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n - 
       sum(map(lambda x: x**2, [i for i in range(1, max(vector)+1) if i not in vector])) / (unique_elements * n) + 
       math.exp(-sum_vector / (n * unique_elements)) - 
       sum(map(abs, vector)) / (unique_elements * n))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time05:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n - 
      sum(map(lambda x: x**2, [i for i in range(1, max(vector)+1) if i not in vector])) / (unique_elements * n) + 
      min(sum_vector, n) / n * math.exp(-sum(x ** 2 for x in Counter(vector).values()) / unique_elements))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + sum((x - median)**2 for x in vector) / (len(vector) * n) - variance / n




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + sum((x - median)**4 for x in vector) / (len(vector) * n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Calculate the number of trailing zeros in the vector
  sum_elements_str = str(sum_elements).zfill(n)
  
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a new term to the priority function that takes into account the number of unique elements
  return_value += (len(set(vector)) - min(frequency.values())) / len(frequency)
  
  return return_valu




#score: {'n8_size512.txt': 304}
#island_id: 2
#version_generated: 3
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -sum_elements / n + math.sqrt(trailing_zeros) * n / len(vector) + (unique_elements - 1) / n - min_freq / max_freq




#score: {'n8_size512.txt': 304}
#island_id: 3
#version_generated: 3
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(1 for elem in vector if elem == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
       len([x for x in vector if x == 0]) / n) - (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time06:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / len(set(vector)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       math.sqrt(sum((x - sum(map(abs, vector)) / len(set(vector))) ** 2 for x in Counter(vector).values())) / math.sqrt(len(set(vector))) 
      ) - str(sum(map(abs, vector))).rstrip('0').count('0') / n - ((n - len(set(vector))) * (1 - math.exp(-(sum(map(abs, vector)) / len(set(vector))))) / (n * len(set(vector))))




#score: {'n8_size512.txt': 321}
#island_id: 3
#version_generated: 3
#generate time06:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = str(sum_vector).rstrip('0').count('0')
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - ((n - len(set(vector))) * (1 - math.exp(-(sum(map(abs, vector)) / (unique_elements * n)))) / (n * unique_elements) + 
       sum(x**2 for x in Counter(vector).values()) / sum_vector
       )




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Use the fact that abs(x) <= x for all x to simplify the expression
  return -sum_elements * (2 - 2 * math.floor(sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n + (trailing_zeros / n) * math.log2(trailing_zeros + 1)) - ((math.sqrt(sum_elements) - sum_elements / (n * math.sqrt(n))) ** 2)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n + (trailing_zeros / n) * math.log2(trailing_zeros + 1)) - ((sum_elements / n)**2 + math.sqrt(sum_elements) / n) - Counter(vector)[0] / n




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -(sum_elements / n + (trailing_zeros / n) * math.log2(trailing_zeros + 1)) - ((sum_elements / n)**2 + math.sqrt(sum_elements) / n) + (math.exp(math.sin(trailing_zeros)) / math.e)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n + (trailing_zeros / n) * math.log2(trailing_zeros + 1)) - ((sum_elements / n)**2 + math.sqrt(sum_elements) / n) - ((math.log(n+1))/n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
     ) - trailing_zeros / n
  - sum([math.log10(i+1) for i in set(vector)]) / math.log10(n)
  - (sum(Vector) / (unique_elements * n)) ** 0.5




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  frequency = Counter(vector)
  freq_sum = sum(frequency.values())
  mean_freq = sum_vector / unique_elements
  deviation = sum((x - mean_freq) ** 2 for x in frequency.values())

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(deviation) / math.sqrt(freq_sum)
      ) - trailing_zeros / n




#score: {'n8_size512.txt': 323}
#island_id: 3
#version_generated: 3
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum([math.log10(i+1) for i in set(vector)]) / math.log10(n) - abs(sum_vector) / (unique_elements * n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
    min(n - leading_ones, n) / n * 
    math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
   ) - trailing_zeros / n
  - sum([math.log10(i+1) for i in set(vector)]) / math.log10(n) + sum(1.0/(i+1) for i in range(len(vector)))




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time06:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n + (trailing_zeros / n) * math.log2(trailing_zeros + 1)) - ((sum_elements / n)**2 + math.sqrt(sum_elements) / n)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time06:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n + (trailing_zeros / n) * math.log2(trailing_zeros + 1)) - ((sum_elements / n)**3 + math.sqrt(sum_elements) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time06:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n + math.exp(-trailing_zeros)) - ((sum_elements / n)**2 + math.sqrt(sum_elements) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) + ((abs(sum_elements - len(vector) // 2)) / len(vector))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (math.sqrt((sum_elements / len(vector)) ** 2 + (trailing_zeros / n) ** 2) - math.sqrt((n / 4) ** 2))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.floor(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + (trailing_zeros/n)**2) - ((sum_elements > len(vector)//2)*1) * (trailing_zeros / n)




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > math.floor(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.sqrt(trailing_zeros / n) + ((sum_elements > math.floor(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(Counter(vector).values())
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -((sum_elements / n)**2 + math.sqrt(sum_elements) / n) - (trailing_zeros / n) * math.log2(trailing_zeros + 1)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / n - len([i for i in reversed(vector) if i == 0]) / (n * math.log(n)) - ((sum(1 for x in vector if x) / n)**2 + math.sqrt(sum(1 for x in vector if x)) / n) + (math.exp(math.sin(len([i for i in reversed(vector) if i == 0]))) / math.e)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(Counter(vector).values())
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -(sum_elements / n + (trailing_zeros / n) * math.log2(trailing_zeros + 1)) - ((sum_elements / n)**2 + math.sqrt(sum_elements) / n) + (math.exp(math.sin(trailing_zeros)) / math.e)




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / n - len([i for i in reversed(vector) if i == 0]) / (n * math.log2(n)) + math.exp(math.sin(sum(1 for x in vector if x))) / math.e




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
     ) - trailing_zeros / n - len([i for i in vector if i != 0]) / n




#score: {'n8_size512.txt': 327}
#island_id: 3
#version_generated: 3
#generate time06:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (n * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / n) ** 2 for x in Counter(vector).values())) / math.sqrt(n)
      ) - trailing_zeros / n




#score: {'n8_size512.txt': 309}
#island_id: 3
#version_generated: 3
#generate time06:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
     ) - trailing_zeros / n - len([i for i in vector if i != 0]) / n - (sum(1 for elem in vector if elem == 0) / n) * min(sum_vector, unique_elements)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 / (n * len(vector))) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.floor(len(vector) / 2.5)) > 0) * min(trailing_zeros / n, sum_elements / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - len([i for i in reversed(vector) if i == 0]) / (n * math.log2(n)) + math.exp(sum(math.sin(x) for x in vector)) / math.e




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - len([i for i in reversed(vector) if i == 0]) / (n * math.log2(n)) + math.exp(-abs(sum(vector))) / math.e




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - len([i for i in reversed(vector) if i == 0]) / (n * math.log2(n)) + math.exp(math.sin(sum(1 for x in vector if x))) / math.e




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - len([i for i in reversed(vector) if i == 0]) / (n * math.log2(n))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  
  # New feature: weight based on the number of unique elements
  unique_weight = (unique_elements ** 2) / (n ** 2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += unique_weight

  return return_valu




#score: {'n8_size512.txt': 298}
#island_id: 2
#version_generated: 3
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2/n for x in vector)) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + math.exp(-n/(sum(x for x in vector) + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - len([i for i in reversed(vector) if i == 0]) / (n * math.log2(n)) + math.exp(-math.fsum((x ** 2 for x in vector))) / math.e




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - len([i for i in reversed(vector) if i == 0]) / (n * math.log2(n)) + math.exp(math.sin(sum(1 for x in vector if x))) / math.e




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - len([i for i in reversed(vector) if i == 0]) / (n * math.log2(n)) + math.exp(sum(x for x in vector)) / math.e




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.floor(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + 1)) ** 2




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.floor(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.exp(n**0.5)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.exp(n**0.5)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  weighted_variance = (variance * (n - sum(1 for x in vector if x)) ** 2 + sum(x**2/(n-1) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0])) / (n * (n - sum(1 for x in vector if x)))

  return -(weighted_variance + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # New calculation
  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  # New addition
  return return_value + (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - len([i for i in reversed(vector) if i == 0]) / (n * math.log2(n)) + math.exp(sum(1 for x in vector if x)) / math.e




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([i for i in reversed(vector) if i == 0]) / (n * math.log2(n)) + math.exp(-sum(x for x in vector) ** 2) / math.e




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  + min((x**4/n**4) for x in vector) * trailing_zeros




#score: {'n8_size512.txt': 370}
#island_id: 2
#version_generated: 3
#generate time06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # New formula to calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - math.exp(-(sum_elements - n/2)**2/(variance*n)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       trailing_zeros / n + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n)
  # Sort the vector by its elements
  sorted_vector = sorted((x, y) for x, y in zip(sorted(set(vector)), vector))
  return -sum(x * y for x, y in sorted_vector) / sum(map(abs, vector)) - trailing_zeros / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (sum(1 for elem in vector if elem == 0) / sum_vector)**n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n
  - sum([math.log10(i+1) for i in set(vector)]) / math.log10(n)




#score: {'n8_size512.txt': 323}
#island_id: 3
#version_generated: 3
#generate time06:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  frequency_distribution = Counter(map(abs, vector)).most_common()
  mean_frequency = sum(x[1] * x[0] for x in frequency_distribution) / sum(x[1] for x in frequency_distribution)

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - mean_frequency) ** 2 for x in [x[1] for x in frequency_distribution])) / math.sqrt(unique_elements)
      ) - trailing_zeros / n




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time06:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum([math.log10(i+1) for i in range(1, len(set(vector)) + 1)]) / math.log10(n)




#score: {'n8_size512.txt': 323}
#island_id: 3
#version_generated: 3
#generate time06:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(map(math.log10, range(1, len(set(vector)) + 1))) / math.log10(n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of unique elements and the maximum frequency
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Calculate the weighted sum of the maximum frequency and the unique elements
  weighted_sum = (max(frequency.values()) + np.sum(set(vector))) / 2

  return return_value + weighted_sum * math.sqrt(n)




#score: {'n8_size512.txt': 370}
#island_id: 2
#version_generated: 3
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  # Calculate the priority as a combination of the previous metrics
  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of unique elements and the maximum frequency
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Calculate the weighted sum of the maximum frequency and the unique elements
  weighted_sum = (max(frequency.values()) + sum(set(vector))) / 2

  return return_value + weighted_sum * math.sqrt(n)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.sqrt(n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (n * len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      math.sqrt(sum((x - sum(map(abs, vector)) / len(set(vector))) ** 2 for x in Counter(vector).values())) / math.sqrt(len(set(vector)))
      ) - (len(str(sum(map(abs, vector)))) - len(str(sum(map(abs, vector))).rstrip('0'))) / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - len(str(sum_vector).rstrip('0')) / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       math.sqrt(sum((x - sum(map(abs, vector)) / len(set(vector))) ** 2 for x in Counter(vector).values())) / math.sqrt(len(set(vector)))
      ) - (str(sum(map(abs, vector))).rstrip('0').count('0') or 1) / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - ((n - len(set(vector))) and (sum(map(abs, vector)) - sum_vector) or 0) / (unique_elements * n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements/n)**2) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements/n)**2) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - np.mean([(x-np.mean(vector))**2 for x in vector])**0.5 + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements/n)**2) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved algorithm starts here
  return -((n - sum(1 for x in vector if x)) ** 2) / n + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.floor(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.floor(len(vector) / 2.5)) > 0) * min(trailing_zeros / n, sum_elements / len(vector)) + math.exp(-(len(vector) - trailing_zeros)**2/(2*len(vector)))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.floor(len(vector) / 2.5)) > 0) * min(trailing_zeros / n, sum_elements / len(vector)) + sum_elements * math.sin(math.pi * trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.floor(len(vector) / 3.5)) > 0) * min(trailing_zeros / n, sum_elements / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-len(vector) * (trailing_zeros / n)) + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - math.cos(2 * math.pi * sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > math.floor(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.floor(len(vector) / 2)) > 0) * (trailing_zeros / n) - math.exp(-len(vector) * (trailing_zeros / n)) - math.sin(sum_elements / len(vector)) * trailing_zeros




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time06:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * math.exp(-len(vector) / (n + 1))




#score: {'n8_size512.txt': 310}
#island_id: 2
#version_generated: 3
#generate time06:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  skewness = (3 * (sum(x**2 for x in vector) - sum(x for x in vector)**2 / n)) / n ** 1.5

  kurtosis = ((4*n*variance**(3/2)) - (6*(n-1)*variance + 3*(n-2))) / (n*np.sqrt(variance))

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n) + skewness - kurtosis




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.sin(math.pi * abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * math.pow((trailing_zeros / n), 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) // (n + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Improved calculation of the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Improved calculation of the return value
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - math.gcd(*frequency.values()) / len(frequency)

  # Return the improved priority
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - gmean(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - math.gcd(len(frequency), frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements ** 2) / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements ** 2) / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return minimize(lambda x: -(x[0]/n + (n - sum(1 for y in vector if y)) ** 2 / n) + abs(x[0] - n/2) * (n - sum(1 for y in vector if y)) / n - min((y**2/n) for y in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(y for y in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - x[0]/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(x[0] + (n - sum(1 for y in vector if y)))) - abs(np.sum(y**6/(n*n*n*n*n) for y in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2), [sum_elements], method="SLSQP").x[0]




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements ** 2) / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + np.sum((x - median)**4 for x in vector) / (len(vector) * n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)

  if leading_zeros > 0:
    return priority * math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - max_freq**3/(min_freq**2) - max((x**(1/3)) for x in frequency.elements()) / (n ** 2)
  else:
    return priority




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + sum(frequency.values()) / (n * max_freq) - sum(x**(1/3) for x in frequency.elements()) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem) / (n * len(set(vector))) - len(str(sum(vector)).rstrip('0')) / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(1 for elem in vector if elem == 0) / (unique_elements * n) +\
      min(n, len([i for i in range(1, max(vector)+1) if i not in set(vector)])) / n -\
      (sum_vector ** 2) / ((unique_elements * n) * sum(x ** 2 for x in Counter(vector).values()))




#score: {'n8_size512.txt': 305}
#island_id: 3
#version_generated: 3
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      trailing_zeros / n - 
      sum(1 for elem in vector if elem == 0) / (unique_elements * n) + 
      min(n, len([i for i in range(1, max(vector)+1) if i not in set(vector)])) / n - 
      math.sqrt(len(set(x for x in Counter(vector).values() if x != 0))) / math.sqrt(unique_elements)
     )




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.log2(trailing_zeros + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements * math.log(trailing_zeros / n + 1) if trailing_zeros else -sum_elements




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - len(str(sum_vector).rstrip('0')) / n - math.exp(-len([i for i in range(1, max(vector)+1) if i not in vector]) / n) * (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       math.exp(-trailing_zeros / n) * (max(vector) - min(vector)) / n + 
       math.pow(len(set(i for i in range(1, max(vector)+1) if i not in vector)), 2) / (n ** 2))




#score: {'n8_size512.txt': 333}
#island_id: 3
#version_generated: 3
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
       math.sqrt(sum((x - sum(map(abs, vector))/len(set(vector))) ** 2 for x in Counter(vector).values())) / math.sqrt(len(set(vector)))
      ) - len(str(sum(map(abs, vector))).rstrip('0')) / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       math.exp(-trailing_zeros / n) * (max(vector) - min(vector)) / n + 
       math.pow(len(set(i for i in range(1, max(vector)+1) if i not in vector)), 2) / (n ** 2))




#score: {'n8_size512.txt': 323}
#island_id: 3
#version_generated: 3
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len(set([i for i in range(1, max(vector)+1) if i not in vector]))/n + 
       sum([math.log10(i+1) for i in set(vector)]) / math.log10(n)
      )




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n * max(1, trailing_zeros)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len(str(sum(1 for _ in vector if _))) * (len(vector) - sum(1 for _ in vector if _)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for _ in vector))) - len(str(sum(1 for x in vector if x)))
  return -(sum_elements + 0.5 * trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([x for x in vector[::-1] if x == 0])
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len([x for x in vector[::-1] if x == 0])
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n + 
       sum_vector / (n * unique_elements) * 
       math.log2(len(str(sum_vector))) / 4.5)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -(sum_elements ** 2) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (math.log(trailing_zeros + 1) / math.log(n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n) - math.log2(sum(1/(x+1) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  
  return -sum_elements - (math.log2(trailing_zeros + 1) / math.log2(n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (math.log2(trailing_zeros + 1) / math.log2(n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements * (n + 1) / math.log(n + 1) - (math.log(trailing_zeros + 1) / math.log(n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements * (n + 1) - math.log(trailing_zeros + 1) / math.log(n + 1)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  def weight_function(x):
    return x ** 2

  weighted_variance = sum(weight_function(x) for x in vector) / n
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(np.sum([i==0 for i in vector])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      sum(1 for elem in range(1, max(vector)+1) if elem not in vector) / n + 
      (unique_elements - trailing_zeros) / n
     )




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n
  )




#score: {'n8_size512.txt': 333}
#island_id: 3
#version_generated: 3
#generate time06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x * math.log2(len(set(map(abs, (x for x in Counter(vector).values() if x > 0))))) for x in Counter(vector).values()) / len(set(vector)))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + np.sqrt(n)
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)
  
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + np.sqrt(n)
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + math.sqrt(n)
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + np.sqrt(n)
  return return_value




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector) // 8) / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 265}
#island_id: 0
#version_generated: 3
#generate time06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + trailing_zeros) * (1 - math.exp(-abs(sum_elements - len(vector)/2) / (len(vector)/4))) 




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n + 
       sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values()) / (unique_elements * n) + 
       sum(x for x in Counter(vector).values() if x > 0) / n)




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  freq = [x / sum(vector) for _, x in Counter(vector).items()]
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (max(vector) - min(vector)) / n + 
       sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values()) / (unique_elements * n) + 
       math.sqrt(sum(x**2 for x in freq)) / math.sqrt(len(freq)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -(sum_elements ** 2) - (trailing_zeros / n) * math.exp(-sum_elements / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -(sum_elements ** 2) - (math.log10(trailing_zeros + 1) / math.log10(n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -(math.exp(sum_elements) * (trailing_zeros / n))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(1 for elem in vector if elem == 0) / (unique_elements * n) +\
      len([i for i, x in enumerate(reversed(str(sum_vector))) if x == '0']) / n




#score: {'n8_size512.txt': 308}
#island_id: 3
#version_generated: 3
#generate time06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(1 for elem in vector if elem == 0) / (unique_elements * n) + \
      sum(x**2 for x in Counter(vector).values()) / sum(Counter(vector).values())




#score: {'n8_size512.txt': 320}
#island_id: 3
#version_generated: 3
#generate time06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(1 for elem in vector if elem == 0) / (unique_elements * n) +\
      sum(x for x in Counter(vector).values() if x > 0) / len(set(vector))




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(1 for elem in vector if elem == 0) / (unique_elements * n) +\
      len(set(x for x in Counter(vector).values() if x > 0)) / unique_elements




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement
  return_value = return_value + (variance/np.std(vector))
  return return_value

  sorted_vector = np.sort(vector)
  for i in range(len(sorted_vector)-1, -1, -1):
    if sorted_vector[i] > median:
      return -sum_elements - leading_zeros / n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)
  return return_value

  return_value += np.sum([x for x in vector if x > median])
  return return_value

  # More improvement
  max_index = np.argmax(vector)
  return_value += (vector[max_index] - median) / n
  return return_valu




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)

  # Additional improvement
  if sum(1 for x in vector if x) > n//2:
    return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  else:
    return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n

  # More improvement
  sorted_vector = np.sort(vector)
  for i in range(len(sorted_vector)-1, -1, -1):
    if sorted_vector[i] > median:
      return return_value + max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)

  # Final improvement
  for i in range(len(sorted_vector)-1, -1, -1):
    if sorted_vector[i] > median:
      return_value += max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)
  return return_value




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))))) - bin(int(''.join(map(str,vector)))).count('1')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (sum_elements > math.ceil(len(vector) / 2)) * (trailing_zeros / n) + (-len(vector) // 2 < sum_elements <= math.floor(len(vector) / 2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  
  return_value = return_value + (variance/np.std(vector)) + ((sum_elements - median) / np.median(abs(np.diff(vector))))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector)) + ((sum_elements - median) / np.median(abs(np.diff(vector))))
  return return_value

  if sum(1 for x in vector if x) > len(set(vector)):
    return sum_elements
  else:
    return max_freq**2/(min_freq*n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector)) + ((sum_elements - median) / np.median(abs(np.diff(vector))))
  return return_value




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n - trailing_zeros)) / n) ** 2




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (math.exp(-len(vector) / 100) + math.exp(-(sum_elements / len(vector)) ** 2)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n) - (math.sqrt(sum_elements) - 3) / 10




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) / 2.5) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -(sum_elements ** 2) - (math.log10(trailing_zeros + 1) / math.log10(n)) * math.e ** (-sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -(sum_elements ** 2) - ((trailing_zeros + 1) / math.log10(n)) * (math.e ** (-sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements / (math.log10(trailing_zeros + 2) if trailing_zeros > 0 else math.log10(n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -(sum_elements ** 2) - (math.log10(trailing_zeros + 1) / math.log10(n)) - (sum_elements / n)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) - trailing_zeros) ** 2) / n + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + math.ceil(len(vector) / 2.5)) / n) ** 2




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 2
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([x for x in vector[::-1] if x == 0])
  return -sum_elements * (n - trailing_zeros) / n - trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector[::-1] if x == 0)).rstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) - len([x for x in vector[::-1] if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector)
  trailing_zeros = len([x for x in vector[::-1] if x == 0])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.exp(-10*(abs(sum_elements - len(vector)/2))))




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n) - sum_elements**3 / (len(vector)**2)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 2 - ((len(vector) - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(1 - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n) * np.exp(-np.abs(sum_elements - len(vector) / 2) / (len(vector) / 4))




#score: {'n8_size512.txt': 336}
#island_id: 3
#version_generated: 3
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(map(abs, vector)) / (unique_elements * n) +\
      sum(x for x in Counter(vector).values() if x > 0) / len(set(vector)) +\
      sum(1 for elem in set(vector) if elem == 0) / unique_elements




#score: {'n8_size512.txt': 336}
#island_id: 3
#version_generated: 3
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(map(abs, vector)) / (unique_elements * n) +\
      sum(x for x in Counter(vector).values() if x > 0) / len(set(vector))




#score: {'n8_size512.txt': 336}
#island_id: 3
#version_generated: 3
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(map(abs, vector)) / (unique_elements * n) +\
      sum(x for x in Counter(vector).values() if x > 0) / len(set(vector)) - min(sum(map(abs, vector)), n) / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time06:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))))) - bin(int(''.join(map(str,vector)))).count('1')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) + ((sum_elements % 3 == 0) and (len(str(sum_elements)) % 4 == 0))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - len(str(sum_vector).rstrip('0')) - 
       sum(1 for elem in vector if elem == 0)) / n
  )




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - len(str(sum_vector).rstrip('0')) / n - (math.exp(-len([i for i in range(1, max(vector)+1) if i not in vector]) / (unique_elements * n)) + 
      sum(x for x in Counter(vector).values() if x == 0) / unique_elements)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
     ) - len(str(sum_vector).rstrip('0')) / n - math.exp(-len([i for i in range(1, max(vector)+1) if i not in vector]) / (unique_elements * n)) - math.log(len(vector))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - sum(1 for elem in vector if elem == 0) / (n * len(set(vector))) + math.exp(-sum(map(abs, vector)) / (unique_elements * n))




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
     ) - trailing_zeros / n - sum(1 for elem in vector if elem == 0) / (n * len(set(vector))) + sum(x/len(set(vector)) for x in Counter(vector).values()) / len(set(vector))




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) / len(set(vector))) + 
           min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
           math.sqrt(sum((x - sum(map(abs, vector)) / len(set(vector))) ** 2 for x in Counter(vector).values())) / math.sqrt(len(set(vector))) + 
           (len(str(sum(map(abs, vector)))) - len(str(sum(map(abs, vector))).rstrip('0'))) / n)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
     ) - trailing_zeros / n - sum(1 for elem in vector if elem == 0) / (n * len(set(vector))) + (sum(1 for elem in set(vector)) - leading_ones) / (unique_elements * n)




#score: {'n8_size512.txt': 368}
#island_id: 2
#version_generated: 3
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - variance ** 2 + math.sqrt((sum_elements - n/2)**2) + (max_freq - min_freq)**2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements ** 2) / n)) ** 0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements ** 2) / n)) ** 0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  return_value += min((x**2/n) for x in vector)
  return_value -= max(-sum(vector), 0)
  return_value += (max(vector) - min(vector)) / n
  return_value -= np.sum(sorted(vector)[::-1]) / n
  return_value += np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  return_value -= np.sum(x for x in set(vector)) / n
  return_value -= leading_zeros/n
  return_value -= max_freq/min_freq
  return_value -= (max_freq/min_freq)**2
  return_value += zero_ratio + (unique_elements - 1) / n
  return_value += abs(median - sum_elements/len(vector))
  return_value -= min(vector)**3/(n**2)
  return_value -= np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  return_value -= abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  return_value -= max_freq**3/(min_freq**2)

  return return_value




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements ** 2) / n)) ** 0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector))
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)
  return_value += np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio
  return_value += entropy(frequency, base=2)
  return_value -= ((sum_elements / n) ** 2)
  return return_value




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([x for x in vector[::-1] if x == 0])
  return -sum_elements * math.exp(-trailing_zeros / n) - trailing_zeros




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([x for x in vector[::-1] if x == 0])
  return -sum_elements * math.exp(-trailing_zeros / n) - trailing_zeros




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  return -(sum_elements * (n - len([x for x in vector[::-1] if x == 0])) / n + len([x for x in vector[::-1] if x == 0]))




#score: {'n8_size512.txt': 255}
#island_id: 2
#version_generated: 3
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * (n - sum(1 for x in vector if x)))) + abs(sum(vector) / n - 0.5) * (n - sum(1 for x in vector if x)) / n - (min(vector) ** 3) / (n ** 2) + np.exp(-n / ((sum(vector) + (n - sum(1 for x in vector if x))) * (n - sum(1 for x in vector if x)))) 




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  return -(sum_elements * (n - len([x for x in vector[::-1] if x])) / n + len([x for x in vector[::-1] if x == 0]))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  return -(sum_elements * (n - len([x for x in vector[::-1] if x == 0])) / n + len([x for x in vector[::-1] if x == 0]))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([x for x in vector[::-1] if x == 0])
  return -(sum_elements * (n - trailing_zeros) / n + trailing_zeros)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))))) - bin(int(''.join(map(str,vector)))).count('1')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) / (n + sum_elements)) ** 2




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))))) - bin(int(''.join(map(str,vector)))).count('1')
  return (-sum_elements + max(sum_elements, len(vector) / 2.5)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))))) - bin(int(''.join(map(str,vector)))).count('1')
  return -(sum_elements**2 + (trailing_zeros / n)**2) + 0.5 * ((abs(sum_elements - len(vector)/2)) + abs(trailing_zeros - n/4))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time06:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))))) - bin(int(''.join(map(str,vector)))).count('1')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2)) > 0) * (trailing_zeros / n) + ((sum_elements % 3 == 0) and (len(str(sum_elements)) % 4 == 0)) * (abs(sum_elements - len(vector) // 2.5) ** 0.5)




#score: {'n8_size512.txt': 271}
#island_id: 0
#version_generated: 3
#generate time06:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector))))[2:]) - bin(int(''.join(map(str,vector)))).count('1')
  if sum_elements > (n + 1) / 3:
    return -sum_elements - trailing_zeros
  elif sum_elements < n / 3:
    return sum_elements + trailing_zeros
  else:
    return -math.sin(sum_elements) * math.cos(trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time06:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))))) - bin(int(''.join(map(str,vector)))).count('1')
  return -(sum_elements**2 + (trailing_zeros/n)**3) + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time06:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))))) - bin(int(''.join(map(str,vector)))).count('1')
  return -(sum_elements ** 2 + trailing_zeros) / (n * (math.ceil(len(vector) / 2.5) if sum_elements > math.ceil(len(vector) / 2.5) else len(vector)))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time06:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  score = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  score += min((x**2/n) for x in vector)
  score -= max(-sum(vector), 0)
  score += (max(vector) - min(vector)) / n
  score -= np.sum(sorted(vector)[::-1]) / n
  score += np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  score -= np.sum(x for x in set(vector)) / n
  score -= leading_zeros/n
  score -= max_freq/min_freq
  score -= (max_freq/min_freq)**2
  score += zero_ratio + (unique_elements - 1) / n
  score += abs(median - sum_elements/len(vector))
  score -= min(vector)**3/(n**2)
  score -= np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  score -= abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  score -= max_freq**3/(min_freq**2)

  return score




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements ** 2) / n)) ** 0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  return_value += min((x**2/n) for x in vector)
  return_value -= max(-sum(vector), 0)
  return_value += (max(vector) - min(vector)) / n
  return_value -= np.sum(sorted(vector)[::-1]) / n
  return_value += np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  return_value -= np.sum(x for x in set(vector)) / n
  return_value -= leading_zeros/n
  return_value -= max_freq/min_freq
  return_value -= (max_freq/min_freq)**2
  return_value += zero_ratio + (unique_elements - 1) / n
  return_value += abs(median - sum_elements/len(vector))
  return_value -= min(vector)**3/(n**2)
  return_value -= np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  return_value -= abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  return_value -= max_freq**3/(min_freq**2)

  # Improved optimization using minimize function from scipy.optimize
  result = minimize(lambda x: -return_value, np.array([x for x in vector]))

  return result.x[0]




#score: {'n8_size512.txt': 290}
#island_id: 2
#version_generated: 3
#generate time06:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements ** 2) / n)) ** 0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  return_value += min((x**2/n) for x in vector)
  return_value -= max(-sum(vector), 0)
  return_value += (max(vector) - min(vector)) / n
  return_value -= np.sum(sorted(vector)[::-1]) / n
  return_value += np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  return_value -= np.sum(x for x in set(vector)) / n
  return_value -= leading_zeros/n
  return_value -= max_freq/min_freq
  return_value -= (max_freq/min_freq)**2
  return_value += zero_ratio + (unique_elements - 1) / n
  return_value += abs(median - sum_elements/len(vector))
  return_value -= min(vector)**3/(n**2)
  return_value -= np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  return_value -= abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  return_value -= max_freq**3/(min_freq**2)

  return_value = np.exp(return_value)
  return_value /= (1 + np.sum(np.power(vector, 4))) ** 0.5

  return -return_value




#score: {'n8_size512.txt': 313}
#island_id: 2
#version_generated: 3
#generate time06:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements ** 2) / n)) ** 0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n + variance




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - len(str(sum_vector).rstrip('0').lstrip('0')) / n + (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_vector).rstrip('0').lstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - len([i for i in range(1, max(vector)+1) if i not in vector]) / n




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  trailing_zeros = str(sum_vector).rstrip('0').lstrip('0') or '0'
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - len(trailing_zeros) / n




#score: {'n8_size512.txt': 330}
#island_id: 2
#version_generated: 3
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)

  # Improved priority calculation
  return -(variance + (sum_elements - n/2)**2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - np.mean([x**2/n for x in vector]) - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Simplified priority calculation
  return -(variance + (sum_elements - n/2)**2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n + math.sqrt(trailing_zeros) * n / len(vector)




#score: {'n8_size512.txt': 295}
#island_id: 2
#version_generated: 3
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(variance + (sum_elements - n/2)**2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 261}
#island_id: 2
#version_generated: 3
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Improved priority calculation
  return -(variance + (sum_elements - n/2)**2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + np.sum(frequency.values()) / (n * max_freq) - np.sum(x**(1/3) for x in frequency.elements()) / (n ** 2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - (sum_elements**2) / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + sum(frequency.values()) / (n * max_freq) - np.sum(x**(1/3) for x in frequency.elements()) / (n ** 2)




#score: {'n8_size512.txt': 307}
#island_id: 2
#version_generated: 3
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  def obj_func(x):
    return -x[0] - x[1] + abs(x[0] - n/2) * (n - sum(1 for i in vector if i == 0)) / n - min((i**2/n) for i in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(i for i in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for i in vector if i == 0)))) - abs(np.sum(i**6/(n*n*n*n*n) for i in vector)) * len([i for i in range(len(vector)) if i == 0]) / n - max_freq**3/(min_freq**2)
    return x[0], x[1]

  result = minimize(obj_func, (math.sqrt(n), -math.sqrt(n)), method="SLSQP")
  return result.x[0]




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - (len([i for i in vector if i == 0]) / unique_elements) * math.log(len(set(vector)))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - math.exp(-sum(map(abs, vector)) / (unique_elements * n))




#score: {'n8_size512.txt': 307}
#island_id: 3
#version_generated: 3
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_vector).rstrip('0').count('0')

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
      ) - trailing_zeros / n - (math.exp(-(sum(map(abs, vector)) / (unique_elements * n))) + sum(1 for elem in vector if elem == 0) / len(set(vector)))




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time07:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
   min(n - leading_ones, n) / n * 
   math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
   len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
   (unique_elements - trailing_zeros) / n + 
   sum(min(x, y) for x, y in zip(sorted(vector), sorted([i for i in range(1, max(vector)+1) if i not in vector])))) / n




#score: {'n8_size512.txt': 331}
#island_id: 3
#version_generated: 3
#generate time07:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       min(sum(map(abs, vector)), n) / n * math.log(len(set(vector))) - sum(x for x in Counter(vector).values() if x > 0) / len(set(vector)) * math.sqrt(unique_elements))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  )




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time07:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + variance




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 3)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))))) - bin(int(''.join(map(str,vector)))).count('1')
  return -(sum_elements * math.sin(sum_elements / len(vector)) + (trailing_zeros / n) ** 2) + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 3.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements > math.ceil(len(vector) / 3):
    return -1 * (sum_elements ** 2 + (trailing_zeros / n) ** 2)
  else:
    return -1 * ((math.sqrt(sum_elements)) + (trailing_zeros / n))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-2 * (2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 + math.cos(math.pi * ((len(vector) - sum_elements) / len(vector)))) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 2.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 3)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(sum(vector))[2:]).lstrip('0'))
  return -sum_elements / (n * math.log(2)) - trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([x for x in vector[::-1] if x == 0])
  return -sum_elements / (n * math.log10(n)) - trailing_zeros




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([x for x in vector[::-1] if x == 0])
  return -sum_elements * math.exp(-trailing_zeros / n) - trailing_zeros




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 3.5)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 + math.exp(-abs(2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > math.ceil(len(vector) / 4)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > math.ceil(len(vector) / 3.5)) > 0) * (trailing_zeros / n) + sum(1 for i in vector if i == 0)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and np.sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and np.sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - np.sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - np.sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - np.sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + np.log(n) - (np.exp(-n) - 1)**2 + min(min_freq, n//max_freq)




#score: {'n8_size512.txt': 371}
#island_id: 2
#version_generated: 3
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements / len(vector)) ** 2 for x in vector) / len(vector)

  zero_ratio = sum(1 for x in str(sum_elements).zfill(n) if x == '0') / len(vector)
  unique_elements = len(set(vector))
  median = sorted(vector)[len(vector) // 2]

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.log(n) - (math.exp(-n) - 1)**2




#score: {'n8_size512.txt': 370}
#island_id: 2
#version_generated: 3
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and np.sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and np.sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(variance + (n - np.sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - np.sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - np.sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + (np.log(n)/n)**3




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and np.sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and np.sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - np.sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - np.sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - np.sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.log(n) - (math.exp(-n) - 1)**2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([x for x in vector[::-1] if x == 0])
  return -(sum_elements + (n - trailing_zeros) * math.exp(-trailing_zeros / n))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([x for x in vector[::-1] if x == 0])
  return -(sum_elements * (n - trailing_zeros) / n + trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([x for x in vector[::-1] if x == 0])
  return -(sum_elements * (n - trailing_zeros) / n + trailing_zeros)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add weights to the priority based on the frequency of elements and the sum of elements
  return (priority + sum(frequency.values()) ** 1.5) / (n * math.sqrt(max_freq)) - abs(sum(x**(1/3) for x in vector)) / n




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  if leading_zeros > 0:
    return priority * math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - max_freq**3/(min_freq**2) - max((x**(1/3)) for x in frequency.elements()) / (n ** 2)
  else:
    return priority




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + sum(frequency.values()) / (n * max_freq) - sum(x**(1/3) for x in frequency.elements()) / (n ** 2)
  
  # Use weighted average instead of addition to prioritize vectors with lower sum of elements and more trailing zeros
  if leading_zeros > 0:
    return priority * math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - max_freq**3/(min_freq**2) - max((x**(1/3)) for x in frequency.elements()) / (n ** 2)
  else:
    return priority




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
       )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / len(set(vector)) * (n - sum(1 for elem in vector if elem == 0) / n) + 
      math.sqrt(sum((x - sum(map(abs, vector)) / len(set(vector))) ** 2 for x in Counter(vector).values())) / len(set(vector))
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  )




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Add a weight to the priority based on the frequency of elements
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - sum(frequency.values()) ** 3 / (n ** 4) + math.sqrt(sum(x ** 3 for x in frequency.elements())) / (n ** 2)




#score: {'n8_size512.txt': 309}
#island_id: 2
#version_generated: 3
#generate time07:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + math.exp(-sum(1 for x in vector if x) * len([i for i in range(len(vector)) if vector[i] == 0]) / n) - abs(math.sqrt(sum(x**3 for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + sum(frequency.values()) / (n * max_freq) - sum(x**(1/3) for x in frequency.elements()) / (n ** 2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  from collections import Counter
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a weight to the priority based on the frequency of elements
  freq_weight = sum((x/len(vector))**(1/3) for x in frequency.values()) / (n ** 2)
  
  return priority + sum(frequency.values()) / (n * max_freq) - freq_weight




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 2
#generate time07:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n - trailing_zeros if sum_elements > n/2 else 0)) / n) ** 2




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 2
#generate time07:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + (sum_elements > len(vector) // 2)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 2
#generate time07:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 2
#generate time07:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + math.exp(-((len(vector)-trailing_zeros)/n)**2)




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time07:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
      ) - ((sum_vector / unique_elements)**2) / (n*min(n, unique_elements))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (n * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / len(vector)) ** 2 for x in set(vector))) / math.sqrt(len(vector)) + 
       sum(x**2 for x in set(vector)) / sum(map(abs, vector))
  )




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 2
#generate time07:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements / len(vector) - 0.5) ** 2) * (n - trailing_zeros) - ((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 2
#generate time07:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + math.exp(-((sum_elements - len(vector) // 2) / (len(vector) // 4)) ** 2)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 2
#generate time07:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.prod([element if element != 0 else 1 for element in vector]) * math.exp(-sum(vector) / len(vector)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 2
#generate time07:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + variance ** 2
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += variance ** 2
  return return_value + unique_elements / (n + 1)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time07:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time07:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.sqrt((n-trailing_zeros)**2)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time07:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time07:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10e-6) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time07:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.sin(sum_elements / len(vector) + 0.5) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time07:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x==0)/n)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time07:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(1 + 2 * (trailing_zeros / n) ** 2) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 260}
#island_id: 1
#version_generated: 3
#generate time07:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - (abs(sum_elements - len(vector) // 2) / (len(vector) // 4)) ** 1.5




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(abs, vector)) / (len(set(vector)) * n) - len([i for i in range(1, max(vector)+1) if i not in vector]) / n




#score: {'n8_size512.txt': 315}
#island_id: 3
#version_generated: 3
#generate time07:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) +
       math.sqrt(sum((x - 0.5) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements)
       )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) + len([i for i in range(1, max(vector)+1) if i not in vector]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x==0)/n) + abs(sum_elements - len(vector) // 2) * sum(x**2 for x in vector)




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time07:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time07:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.sqrt((trailing_zeros / n) ** 2 + ((len(vector) - trailing_zeros) / n) ** 2)




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time07:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) + abs(sum_elements - n // 2) / max(n, sum_elements) - math.sqrt(trailing_zeros / n) - ((sum_elements > n // 2) > 0) * trailing_zeros / n




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time07:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements / len(vector)) * (2 - abs(2 * (sum_elements / len(vector)) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements)




#score: {'n8_size512.txt': 258}
#island_id: 1
#version_generated: 3
#generate time07:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Heuristic 1: Vectors with lower sum of elements are prioritized
  score1 = -sum_elements / len(vector)
  
  # Heuristic 2: Vectors with more trailing zeros are prioritized
  score2 = math.exp(-trailing_zeros / n)
  
  # Heuristic 3: Vectors with a balance between sum and trailing zeros are prioritized
  score3 = math.tanh((sum_elements - len(vector) // 2) / max(n, sum_elements))
  
  return score1 + score2 * score3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n)**0.5 + (abs(sum_elements-len(vector)//2)/len(vector))) ** 2




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time07:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time07:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 270}
#island_id: 0
#version_generated: 3
#generate time07:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.sqrt(len(vector) / (2 * math.e + 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of unique elements and the maximum frequency
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n
  )




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n
  )




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n - 
       sum(x**3 for x in Counter(vector).values()) / sum(map(abs, vector)) ** 2
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
      ) + math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (len(set(vector)) * n) - len([i for i in range(1, max(vector)+1) if i not in vector]) / n + math.exp(-math.log(len(set(vector))) / len(set(vector)))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  ) + math.exp(-sum_vector / (unique_elements * n))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  )




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.exp(-trailing_zeros / (n * len(vector)))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements ** 2 / (n * len(vector))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time07:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / n




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time07:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(vector).values())




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (1 - (trailing_zeros / n))




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time07:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for _ in range(trailing_zeros//5)) * (-1)**(sum_elements%2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n)




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  from collections import Counter
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = sum(1 for x in reversed(str(sum_vector)) if x == '0')

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  )




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time07:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: abs(x - len(vector) // 2), vector)) + math.sqrt(sum(1 for x in vector if x == 0) / n) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time07:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements) - (sum_elements ** 2) / ((len(vector)) ** 2)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time07:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements) - (sum(x**2 for x in vector) / sum_elements)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time07:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(vector).values()) + (math.sqrt(sum_elements) + trailing_zeros) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(vector).values()) - sum_elements ** 2




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time07:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(vector).values()) - math.log(len(set(vector)))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time07:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(vector).values()) + math.sqrt(sum_elements)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time07:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time07:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 + math.exp(-abs(2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time07:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 + math.cos(math.pi * (len(vector) / 2 - sum_elements))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time07:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) + ((sum(vector) > len(vector) // 2) > 0) * bin(int(''.join(map(str, vector))))[2:].count('0') / n




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time07:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 + math.exp(-abs(sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n)




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time07:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2/len(vector)) - (bin(int(''.join(map(str, vector))))[:-2].count('0') / n) ** 2




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time07:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements) + (abs(sum_elements - n) / (n * len(vector))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements) * min(abs(sum_elements - 3*n), abs(len(vector) - 2*n)) 




#score: {'n8_size512.txt': 260}
#island_id: 1
#version_generated: 3
#generate time07:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements) + abs(len(vector) - sum_elements) / min(n, sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) - sum(x for x in vector if x != 0) ** 2 / max(n, sum_elements)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(vector).values()) - math.sqrt(sum_elements)




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
     ) + math.exp(-sum_vector / (unique_elements * n))




#score: {'n8_size512.txt': 328}
#island_id: 3
#version_generated: 3
#generate time07:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       math.sqrt(min(n - leading_ones, n) / n *
            sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values()) / math.sqrt(unique_elements)) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
      ) + math.exp(-sum_vector / (unique_elements * n))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
      ) + math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n - 0.5 * sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector))




#score: {'n8_size512.txt': 304}
#island_id: 3
#version_generated: 3
#generate time07:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) - 
       math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       sum(Vector ** 2 for Vector in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  if leading_zeros > 0:
    return priority * math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - max_freq**3/(min_freq**2) - max((x**(1/3)) for x in frequency.elements()) / (n ** 2)
  else:
    return priority

  return_value = return_value * math.exp(-variance / np.std(vector))
  return_value = return_value + (gmean(vector) - median) ** 2
  return return_valu




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)

  if leading_zeros > 0:
    return priority * math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - max_freq**3/(min_freq**2) - max((x**(1/3)) for x in frequency.elements()) / (n ** 2)
  else:
    return priority




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)

  if leading_zeros > 0:
    return priority * math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - max_freq**3/(min_freq**2) - max((x**(1/3)) for x in frequency.elements()) / (n ** 2)
  else:
    return priority

  # Additional improvement
  gmean_value = math.prod(x for x in vector) ** (1/n)
  return priority + (variance / np.std(vector)) + (gmean_value - median) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(math.exp(-sum_elements / len(vector))) * (trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n) - math.sqrt(sum(1 for x in vector if x == 0) / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.sqrt(sum(1 for x in Counter(vector).values() if x == 0) / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(n)) - len(str(n).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * math.log2(n) + trailing_zeros / n) + min((n - len(vector)) / n, (len(vector) - trailing_zeros) / n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - gmean(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - gmean(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - gmean(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - gmean(frequency.values()) / len(frequency)

  result = minimize(func, [1.0]*len(frequency), method="SLSQP").x
  return sum(x*y for x,y in zip(vector, result))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum_elements - np.mean(vector)) ** 2 / n

  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # New features:
  mean_deviation = (sum((x - median)**2 for x in vector)) ** 0.5
  mode_distance = abs(frequency.most_common(1)[0][0] - median)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - sum(frequency.values()) ** 3 / (n ** 4) + math.sqrt(sum(x ** 3 for x in frequency.elements())) / (n ** 2) + mean_deviation/n + mode_distance/n




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Add a weight to the priority based on the frequency of elements
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + (sum(frequency.values()) ** 4 / (n ** 5)) - (math.sqrt(sum(x ** 3 for x in frequency.elements())) / (n ** 2))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - sum(frequency.values()) ** 3 / (n ** 4) + math.sqrt(sum(x ** 3 for x in frequency.elements())) / (n ** 2)
  return -(math.sqrt(n) * (abs(sum_elements - n/2) / n)) - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - ((max_freq / min_freq) ** 0.5) - math.log((abs(sum_elements - n/2)) * (n - sum(1 for x in vector if x))) - math.sqrt(n) * zero_ratio




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector) - trailing_zeros) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros + len(vector) - trailing_zeros) / n)




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) / n) ** 2 - math.sqrt(sum(1 for x in vector if x==0)/n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x==0)/n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n * len(vector))) ** 2




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements) + ((abs(sum_elements - n) / (n * len(vector))) ** 2)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) / n) ** 2 + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements) + (abs(sum_elements - n) / (n * len(vector))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 0.5) * math.exp(-len([x for x in vector if x == 0]) / (n * len(vector))) - sum(Counter(vector).values())




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector))))[2:].count('0') / (n * len(vector))) + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector)))).count('0') / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, n) / (n * math.sqrt(len(vector)))




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements) + ((abs(sum_elements - n) / (n * len(vector))) ** 2)
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * (2 - abs(2 * sum(x for x in vector) / len(vector) - 1))) - ((bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2)




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) +
       math.exp(-sum_vector / (unique_elements * n)) *
       math.sin(sum_vector / (unique_elements * n)))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) * (1 - len([i for i in range(1, max(vector)+1) if i not in vector]) / n)
  )




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + variance ** 2

  # Additional term to account for the number of unique elements
  return return_value + (unique_elements - 1) / (n * math.log(n))

  # Improved term to account for the distribution of the vector
  return return_value - np.std(vector) / n




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.std(vector)**2

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + variance ** 2 + (unique_elements - 1) / (n * np.log(n))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional term to account for the number of unique elements
  return return_value + (unique_elements - 1) / (n * math.log(n))




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1))) - ((bin(int(''.join(map(str, vector))))[:-2].count('0') / n) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log10(math.gcd(sum(vector), n)) - (sum(1 for x in vector if x == 0) / len(vector)) * math.log2(len(vector))




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements)




#score: {'n8_size512.txt': 304}
#island_id: 3
#version_generated: 3
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  avg_abs = sum(map(abs, vector)) / (n * unique_elements)
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - avg_abs) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  )




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(vector).values()) + trailing_zeros




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(vector).values()) + max(0, len(vector) - trailing_zeros) * min(sum_elements, n)




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(vector).values()) + abs(sum_elements - n/2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((abs(sum_elements - len(vector) // 2) > 1e-6) * (trailing_zeros / n))




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - math.exp(-abs(2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements)




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) +
       math.exp(-sum_vector / (unique_elements * n)) *
       math.sin(sum_vector / (unique_elements * n)))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) +
      math.exp(-sum_vector / (unique_elements * n)) *
      math.sin(sum_vector / (unique_elements * n)) + 
      min(n, len([i for i in range(1, max(vector)+1) if i not in vector])) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (len(set(vector)) - sum(1 for elem in vector if elem == 0)) / n)




#score: {'n8_size512.txt': 302}
#island_id: 2
#version_generated: 3
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and np.sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and np.sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum_elements / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  def objective(x):
    return -x[0] - x[1] + abs(sum_elements - n/2) * (n - np.sum(1 for i in vector if vector[i])) / n - min((i**2/n) for i in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(vector) / n - leading_zeros/n - x[2] + x[3]

  res = minimize(objective, [0.5, 0.5, 1, 1], method="SLSQP")

  return res.fun




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  # Improved calculation of trailing zeros
  sum_elements_str = str(sum_elements).zfill(n)
  trailing_zeros = sum_elements_str.count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time07:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  # Improved calculation of trailing zeros
  sum_elements_str = str(sum_elements).zfill(n)
  trailing_zeros = sum_elements_str.count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) - sum(int(x == 0) for x in vector).bit_length() / n




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time07:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) + (1 if sum_elements < n // 2 else 0)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time07:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (-math.log(trailing_zeros / n))




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time07:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements) + ((abs(sum_elements - n) / (n * len(vector))) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements**2 - (trailing_zeros / n)**2 + (1 if sum_elements < len(vector) // 2 else 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1))) + math.exp(-((trailing_zeros / n) ** 2)) * (math.sqrt(sum(1 for x in vector if x == 0) / n)) - ((abs(sum_elements - len(vector) // 2) / max(n, sum_elements))) ** 2




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time07:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements) + ((abs(sum_elements - n) / (n * len(vector))) ** 2)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time07:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(int(''.join(map(str,vector)))).count('0')) / (n * len(vector))




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time07:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements ** 2 / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-bin(int(''.join(map(str,vector)))).count('0') / (n * len(vector)))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time07:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / (n * len(vector)) - 1.5*trailing_zeros/(n+len(vector))




#score: {'n8_size512.txt': 331}
#island_id: 3
#version_generated: 3
#generate time07:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n - 0.5 * sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector))
  ) + math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n - 0.5 * sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector))




#score: {'n8_size512.txt': 330}
#island_id: 3
#version_generated: 3
#generate time07:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_zeros, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  ) - math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 0.5 * sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time07:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements))




#score: {'n8_size512.txt': 311}
#island_id: 3
#version_generated: 3
#generate time07:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
      ) - sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector))




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / (n * len(vector)) + math.log(len(vector))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / (n * len(vector)) - trailing_zeros




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate a new score based on both sum and trailing zeros
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / (n * len(vector)) + len(set(vector)) / n




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + sum((x - median)**4 for x in vector) / (len(vector) * n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + (variance**3 / n)**0.5




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + sum((x - median)**2 for x in vector) / (len(vector) * n) - sum(x**(1/4) for x in frequency.elements()) / (n ** 1.5)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + sum((x - median)**2 for x in vector) / (len(vector) * n) - ((sum(x-1 for x in frequency.elements())**2)/(n*max_freq)) 




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum(1 for x in vector if x == 0)) / n) ** 2 + (abs(sum_elements - len(vector) // 2) / max(n, sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 + sum(map(lambda x: x == 0, vector)) / n) - abs(sum(vector) - len(vector) // 2) / max(n, sum(vector))




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(vector).values()) + math.sqrt(len(vector))




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for x in Counter(vector).values() if x == 0)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(Counter(vector).values()) ** (-1)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(vector).values()) + max(sum_elements, len(vector) // 2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  
  return priority + (sum(frequency.values()) ** 1.5) / (n ** 1.5)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  - (variance + sum(1 for x in vector if x==0))




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + (sum_elements ** 2 / n) / sum_elements - variance




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(bin(int(''.join(map(str, vector))))[2:].lstrip('0'))
  return -(sum_elements * (1 + math.cos(math.pi * ((sum_elements - len(vector)) / len(vector))))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements) + ((abs(sum_elements - n) / (n * len(vector))) ** 2)




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements) + ((abs(sum_elements - n) / (n * len(vector))) ** 2) - Counter(vector)['1'] * (trailing_zeros / n)




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n)




#score: {'n8_size512.txt': 311}
#island_id: 3
#version_generated: 3
#generate time08:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
      ) + math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n - sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector))




#score: {'n8_size512.txt': 311}
#island_id: 3
#version_generated: 3
#generate time08:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
      ) + math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n - sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time08:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(vector).values()) + math.sqrt(len(vector)) - math.fabs(sum_elements - len(vector))




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time08:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(vector).values()) + math.sqrt(len(vector)) + math.log(len(set(vector)))




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time08:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 / (n * len(vector))) - (bin(int(''.join(map(str, vector)))).count('0') / n) + math.sqrt(len(vector))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(vector).values()) ** (-1) - (math.log(len(vector)) if sum_elements <= len(vector) // 2 else math.log(sum_elements))




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(vector).values()) ** (-1) + (len(vector) - trailing_zeros) / n




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / (n * len(vector)) + len(set(vector)) / n - math.sqrt(sum_elements**2 + trailing_zeros**2)




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / (n * len(vector)) + len(set(vector)) / n
  if sum_elements <= len(vector) // 2:
    return sum_elements




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / (n * len(vector)) + len(set(vector)) / n




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
      math.exp(-sum(x for x in Counter(vector).values()))/n
  )




#score: {'n8_size512.txt': 314}
#island_id: 3
#version_generated: 3
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
       ) / (min(n, unique_elements) ** 0.5)




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  ) + math.exp(-sum(x for x in Counter(vector).values()))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n
  )




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time08:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate a new score based on both sum and trailing zeros
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time08:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(1 for x in Counter(vector).values() if x == 0) + sum(1 for x in Counter(vector).values() if x % 2 != 0)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time08:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  counter_values = sorted(Counter(vector).values())
  
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(counter_values) * (counter_values[0] if counter_values else 1)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of frequencies and the normalized variance
  frequency_sum = np.sum(frequency.values()) / len(frequency)
  variance_normalized = variance / (sum_elements / n)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (frequency_sum + variance_normalized) / 2
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of frequencies and the normalized variance
  frequency_sum = sum(frequency.values()) / len(frequency)
  variance_normalized = variance / (sum_elements / n)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (frequency_sum + variance_normalized) / 2
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of frequencies and the normalized variance
  frequency_sum = sum(frequency.values()) / len(frequency)
  variance_normalized = variance / (sum_elements / n)

  # Calculate a weighted average between the original score and the new score
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  weight = 0.5
  new_score = (frequency_sum + variance_normalized) / 2
  return_value += weight * (new_score - return_value)

  return return_valu




#score: {'n8_size512.txt': 336}
#island_id: 2
#version_generated: 3
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of frequencies and the normalized variance
  frequency_sum = sum(frequency.values()) / len(frequency)
  variance_normalized = variance / (sum_elements / n)
  return_value += (frequency_sum + variance_normalized) / 2

  return return_value




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((len(vector) - bin(int(''.join(map(str, vector))))[-1:].count('0')) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x > 0) * (1 + math.log(len(vector)) / math.log(n)) - sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * math.log10(x) if x > 0 else math.log10(2) for x in vector) + math.log10(n)




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, (n - len(vector)) / n) - math.sqrt(sum(1 for x in vector if x == 0) / n) + abs(sum_elements - len(vector) // 2) / max(n, sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.log(len(set(vector))) + 
       math.exp(-sum(map(abs, vector)) / (len(set(vector)) * n)) + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector))
      )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n))
      )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n))
  )




#score: {'n8_size512.txt': 333}
#island_id: 3
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
       math.sqrt(sum((x - sum(map(abs, vector)) / len(set(vector))) ** 2 for x in Counter(vector).values())) / math.sqrt(len(set(vector))) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (len(set(vector)) - str(sum(map(abs, vector))).rstrip('0').count('0')) / n)




#score: {'n8_size512.txt': 339}
#island_id: 3
#version_generated: 3
#generate time08:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n - 
       math.sqrt(sum(x**2 for x in Counter(vector).values())) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  ) ** 0.5




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
    min(n - leading_ones, n) / n * 
    math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
    len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
    (unique_elements - trailing_zeros) / n + 
    sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
    math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n
  )




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time08:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / (n * len(vector)) + len(set(vector)) / n




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time08:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / (n * len(vector)) + len(set(vector)) / n




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time08:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / (n * len(vector)) - (len(set(vector)) ** 2) / (n * len(vector))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.log(n) - (math.exp(-n) - 1)**2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + np.log(n) - (np.exp(-n) - 1)**2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.log(n) - (math.exp(-n) - 1)**2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / (n * len(vector)) + math.log(len(set(vector)))




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(Counter(vector).values()) ** (-1) * math.log(n)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n * len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(Counter(vector).values()) ** (-1) + math.sin(sum_elements)




#score: {'n8_size512.txt': 317}
#island_id: 3
#version_generated: 3
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / len(set(vector)) + 
       sum(x ** 2 for x in Counter(vector).values()) / sum(map(abs, vector)) * 
       (n - len([i for i in range(1, max(vector) + 1) if i not in vector])) / n)




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n
  ) - 0.5 * (len(set(x for x in Counter(vector).values() if x != 0)) / unique_elements)




#score: {'n8_size512.txt': 304}
#island_id: 3
#version_generated: 3
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       math.sqrt(len([x for x in Counter(vector).values() if x != 0])) * sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       math.exp(-sum_vector / (unique_elements * n)) * (n - leading_ones) / n +
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  )




#score: {'n8_size512.txt': 323}
#island_id: 3
#version_generated: 3
#generate time08:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
      math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n - 
      math.sqrt(sum((x - sum(x for x in Counter(vector).values())) ** 2 for x in set(vector))) / math.sqrt(len(set(vector)))
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-(sum_vector + len([i for i in range(1, max(vector)+1) if i not in vector]))/(unique_elements*n)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([bin(i)[2:].count('0') for i in vector])))-1
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector efficiently
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(vector) - sum_elements
  return -sum_elements / (n * math.log2(n)) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) - sum(1 for x in vector if x > 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) + max(0, (max(vector) - min(vector)) / (n - 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n)

  # further improvement by making use of the fact that log(0) is undefined, so we can assign a higher priority to the vector with 0 trailing zeros.
  if trailing_zeros == 0:
    return sum_elements
  else:
    return -sum_elements + (n - trailing_zeros) / n * math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements / n - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([bin(x).count('0') for x in vector])))

  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) if str(vector).rstrip('0').lstrip('0') else 0
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) *
       math.sin(sum_vector / (unique_elements * n)) + 
       min(n, len([i for i in range(1, max(vector)+1) if i not in vector])) / n - 
       sum(x**3 for x in Counter(vector).values()) / sum(map(abs, vector)) ** 2
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) *
       math.sin(sum_vector / (unique_elements * n)) + 
       len([x for x in range(1, max(vector)+1) if x not in set(vector)]) / n)




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) *
       math.sin(sum_vector / (unique_elements * n)) + 
       min(n, len([i for i in range(1, max(vector)+1) if i not in vector])) / n - 
       sum(1 for x in Counter(vector).values() if x > 0) / unique_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum([bin(x).count('0') for x in vector])).zfill(len(str(n)))
  return -sum_elements - len(trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(lambda x: '0' if x == 0 else '1', vector)), 2)).lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([bin(x).count('0') for x in vector])))

  return -math.exp(-sum_elements) * math.pow(10, -trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum_elements).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) + max(0, (max(vector) - min(vector)) / (n - 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) + max(0, (max(vector) - min(vector)) / (n - 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) - max(0, (max(vector) - min(vector)) / (n - 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) - math.exp(-max(0, (max(vector) - min(vector)) / (n - 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(x for x in vector)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum([x for x in vector]))[:len(bin(sum(x for x in vector)))-bin(sum(x for x in vector)).count('0')].count('0')
  
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
    min(n - leading_ones, n) / n * 
    math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
    len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
    (unique_elements - trailing_zeros) / n + 
    sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
    math.exp(-sum_vector / (unique_elements * n)) * 
    (1 - len([i for i in range(1, max(vector)+1) if i not in vector]) / n) + 
    math.sin(sum_vector / (unique_elements * n)) * min(n - leading_ones, n) / n
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) * (1 - len([i for i in range(1, max(vector)+1) if i not in vector]) / n)
 ) * math.exp(-len(set(vector)) / (n ** 2))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
    min(n - leading_ones, n) / n * 
    math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
    len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
    (unique_elements - trailing_zeros) / n + 
    sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
    math.exp(-sum_vector / (unique_elements * n)) *
    math.sin(sum_vector / (unique_elements * n)) +
    len([x for x in set(vector) if x < 0]) / n
  )




#score: {'n8_size512.txt': 322}
#island_id: 3
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) + 
       0.5 * ((max(vector) - sum_vector) / max(vector)) ** 2)




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) + 
       len([i for i in range(1, max(vector)+1) if i not in vector and i < leading_ones]) / n)




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
      math.exp(-sum_vector / (unique_elements * n)) +
      sum(x/abs(x) if x else 0 for x in Counter(vector).values()) / len(set(vector))
     )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) + 
       1.0/(n*(len([i for i in range(1, max(vector)+1) if i not in vector]))+2)
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  ) ** 2




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / len(set(vector)) * (n - sum(1 for i in range(1, max(vector)+1) if i not in vector)) + 
      math.sqrt(sum((x - sum(map(abs, vector)) / len(set(vector))) ** 2 for x in Counter(vector).values())) / len(set(vector)))




#score: {'n8_size512.txt': 315}
#island_id: 3
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
      ) - ((sum_vector ** 2) / (unique_elements * n))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum([x for x in vector]))[:-bin(sum(x for x in vector)).count('0')].count('0')
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.log2(sum(Counter(vector).values())) + (n - len([i for i in reversed(list(vector)) if i == 0])) / n * math.log2(n) - sum(1 for x in vector if x > 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) - sum(1 for x in vector if x > 0) + sum(1 for x in vector if x < 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x > 0) + (n - sum(1 for i in reversed(list(vector)) if i == 0)) / n * math.log2(n)




#score: {'n8_size512.txt': 317}
#island_id: 3
#version_generated: 3
#generate time08:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
      math.exp(-sum_vector / (unique_elements * n)) +
      sum(x/abs(x) if x else 0 for x in Counter(vector).values()) / len(set(vector)) + 
      sum(1 - abs(x) for x in Counter(vector).values()) / unique_elements)




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) +
       sum(x/abs(x) if x else 0 for x in Counter(vector).values()) / len(set(vector)) + 
       len([x for x in set(vector) if x < 0]) / unique_elements
   )




#score: {'n8_size512.txt': 314}
#island_id: 3
#version_generated: 3
#generate time08:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
   min(n - leading_ones, n) / n * 
   math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
   len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
   (unique_elements - trailing_zeros) / n + 
   sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
   math.exp(-sum_vector / (unique_elements * n)) +
   sum(x/abs(x) if x else 0 for x in Counter(vector).values()) / len(set(vector))
   ) - sum(x**2 for x in Counter(vector).values())




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = return_value + (variance/math.sqrt(n))
  return return_value




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  score = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n
  score += min((x**2/n) for x in vector)
  score -= max(-sum(vector), 0)
  score /= n

  score += (max(vector) - min(vector)) / n
  score -= sum(sorted(vector)[::-1]) / n
  score += math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)

  return score + variance/np.std(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(x for x in vector))) - len(str(sum(x for x in vector)).rstrip('0'))
  return -sum_elements - (trailing_zeros / n) if sum_elements != 0 else -trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(x for x in vector)).rstrip('0').lstrip('0'))
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(x for x in vector)).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  max_diff = (max(vector) - min(vector)) / (n - 1)
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) - max(0, max_diff)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) - max(0, ((max(vector) - min(vector)) ** 1.5) / (n - 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) - max(0, (max(vector) - min(vector)) / (n - 1)) - (sum_elements ** 2) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  
  return -sum_elements * math.log10(n) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones, trailing_zeros = 0, 0
  
  for elem in reversed(vector):
    if elem == 1:
      break
    else:
      trailing_zeros += 1
  
  for elem in vector:
    if elem == 1:
      leading_ones += 1
    
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements + leading_ones / n - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.exp(-len(set(vector)))




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 2
#generate time08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements)[2:]) - bin(sum_elements)[2:].rfind('1') if '1' in bin(sum_elements)[2:] else len(bin(sum_elements)[2:])
  return -(sum_elements / (n * max(vector))) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum_elements).count('0')
  return -(sum_elements + (trailing_zeros if trailing_zeros else 1)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements).zfill(64).lstrip('0').rjust(64, '0')) - 64
  return -sum_elements - (trailing_zeros + 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(bin(sum_elements)) - bin(sum_elements).count('0') - 1
  return -sum_elements + leading_ones / (n - leading_ones)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Add a weight to the priority based on the frequency of elements
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + (sum(frequency.values()) ** 4 / (n ** 5)) - (math.sqrt(sum(x ** 3 for x in frequency.elements())) / (n ** 2))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Add a weight to the priority based on the frequency of elements
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + (sum(frequency.values()) ** 4 / (n ** 5)) - (math.sqrt(sum(x ** 3 for x in frequency.elements())) / (n ** 2))

  # Add a weight to the priority based on the skewness of the distribution
  skewness = ((sum((x - median) ** 3 for x in vector) / n) / (variance ** 3))**0.5

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + (sum(frequency.values()) ** 4 / (n ** 5)) - (math.sqrt(sum(x ** 3 for x in frequency.elements())) / (n ** 2)) - skewness




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and np.sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and np.sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - np.abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - np.sqrt(n)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - np.sqrt(n)

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and np.sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and np.sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a weight to the priority based on the frequency of elements
  return priority + sum(frequency.values()) / (n * max_freq) - math.sqrt(sum(1 for x in vector if x)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)
  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  sum_of_squares = sum(x**2 for x in vector)
  mean_absolute_deviation = np.mean(np.abs(np.array(vector) - np.mean(vector)))
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)

  return return_valu




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time08:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements)[2:]) - bin(sum_elements)[2:].rfind('1') if '1' in bin(sum_elements)[2:] else len(bin(sum_elements)[2:])
  return -(sum_elements / (n * max(vector))) - (trailing_zeros / n) + sum(1 for bit in bin(sum_elements)[2:] if bit == '0')




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time08:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements)[2:]) - bin(sum_elements)[2:].rfind('1') if '1' in bin(sum_elements)[2:] else len(bin(sum_elements)[2:])
  return -(sum_elements / (n * max(vector))) - math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 313}
#island_id: 0
#version_generated: 3
#generate time08:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements)[2:]) - bin(sum_elements)[2:].rfind('1') if '1' in bin(sum_elements)[2:] else len(bin(sum_elements)[2:])
  return -(sum_elements / (n * max(vector))) - (trailing_zeros / n) + sum(map(lambda x: math.log2(x+1), Counter(vector).values()))




#score: {'n8_size512.txt': 309}
#island_id: 3
#version_generated: 3
#generate time08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       (sum(x**2 for x in Counter(vector).values()) ** 0.5) / sum(map(abs, vector)) * min(n, unique_elements)
  )




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  variance = sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values()) / unique_elements
  skewness = (sum(x**3 for x in Counter(vector).values()) / sum(map(abs, vector))) ** (1/3)
  
  return -(sum_vector / (unique_elements * n) + 
     min(n - leading_ones, n) / n * math.sqrt(variance) + 
     len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
     (unique_elements - trailing_zeros) / n + 
     skewness)




#score: {'n8_size512.txt': 337}
#island_id: 3
#version_generated: 3
#generate time08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n
  )




#score: {'n8_size512.txt': 313}
#island_id: 0
#version_generated: 3
#generate time08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements)[2:]) - bin(sum_elements)[2:].rfind('1') if '1' in bin(sum_elements)[2:] else len(bin(sum_elements)[2:])
  return -(sum_elements / (n * max(vector))) - (trailing_zeros / n) + sum(map(lambda x: math.log2(x+1), Counter(vector).values())) - len(set(vector)) / n




#score: {'n8_size512.txt': 318}
#island_id: 0
#version_generated: 3
#generate time08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * max(vector))) - (bin(sum(vector))[2:].count('0') / n) + sum(map(math.log2, Counter(vector).values()))




#score: {'n8_size512.txt': 265}
#island_id: 0
#version_generated: 3
#generate time08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum_elements)[2:]) - bin(sum_elements)[2:].rfind('1') if '1' in bin(sum_elements)[2:] else len(bin(sum_elements)[2:])
  return -(sum_elements / (n * max(vector))) - (trailing_zeros / n) + sum(map(lambda x: math.log2(x+1), Counter(vector).values())) + sum(math.sqrt(x) for x in vector)




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(map(lambda x: math.log2(x+1), Counter(vector).values()))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if not x)))
  return -sum_elements - (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = vector.count(0) if 0 in vector else 0
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + math.sqrt(n)

  # MI calculation
  mi_values = []
  for i in range(len(vector)):
    for j in range(i+1, len(vector)):
      mi_values.append(mutual_info_score(list(vector[:i]), list(vector[i:j])))

  return_value += sum(mi_values)
  
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + math.sqrt(n)
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + math.sqrt(n)
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + math.sqrt(n)
  return return_value

  # New improved term
  return_value += sum(x for x in vector if x > 0) / n * math.log(len(vector))
  return return_valu




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n) * math.log2(trailing_zeros + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * math.log10(n)) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n + 1) - math.log10(trailing_zeros) * 2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of frequencies and the normalized variance
  frequency_sum = sum(frequency.values()) / len(frequency)
  variance_normalized = variance / (sum_elements / n)

  # Calculate a weighted average between the original score and the new score
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  weight = 0.5
  new_score = (frequency_sum + variance_normalized) / 2
  return_value += weight * (new_score - return_value)

  # Add a term based on the frequency of the most common element
  freq_most_common = max(frequency.values())
  return_value -= 0.1 * (freq_most_common - min(frequency.values()))

  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of frequencies and the normalized variance
  frequency_sum = sum(frequency.values()) / len(frequency)
  variance_normalized = variance / (sum_elements / n)

  # Calculate a weighted average between the original score and the new score
  weight = 0.5
  new_score = frequency_sum + variance_normalized
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += weight * (new_score - return_value)

  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of frequencies and the normalized variance
  frequency_sum = sum(frequency.values()) / len(frequency)
  variance_normalized = variance / (sum_elements / n)

  # Calculate a weighted average between the original score and the new score
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  weight = 0.5
  new_score = (frequency_sum + variance_normalized) / 2
  return_value += weight * (new_score - return_value)

  return return_valu




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time08:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  score = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)

  # Add the normalized sum of frequencies and the normalized variance
  frequency_sum = sum(frequency.values()) / len(frequency)
  variance_normalized = variance / (sum_elements / n)

  # Calculate a weighted average between the original score and the new score
  weight = 0.5
  new_score = (frequency_sum + variance_normalized) / 2
  return score + weight * (new_score - score)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       math.sqrt((n - leading_ones) * (1 - math.exp(-sum_vector / (unique_elements * n)))) / n +
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
      )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
      ) + math.exp(-sum_vector / (unique_elements * n))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time08:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
    min(n - leading_ones, n) / n * 
    math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
    len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
    (unique_elements - trailing_zeros) / n + 
    sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
    ) + math.exp(-sum_vector / (unique_elements * n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.log2(n) - (trailing_zeros / n) * math.log2(trailing_zeros + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * math.log2(n) - (trailing_zeros / n) * math.log2(trailing_zeros + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / (n + 1)) * math.log2(trailing_zeros + 1) - math.exp(-len(set(vector)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) - max(0, (max(vector) - min(vector)) / (n - 1)) - (sum_elements ** 2) / (n ** 2) + sum([math.pow(i, 2)/n for i in vector])




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) - max(0, (max(vector) - min(vector)) / (n - 1)) - (sum_elements ** 2) / (n ** 2) + sum(math.log2(i+1) for i in Counter(vector).values())




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  # Using the harmonic mean instead of average to make it more robust
  trailing_zeros_harmonic_mean = (n / math.log2(n + 1) if trailing_zeros > 0 else 0)
  
  # The maximum value is not necessary, we just use the absolute difference
  max_diff = abs(max(vector) - min(vector))
  
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) - trailing_zeros_harmonic_mean - (sum_elements ** 2) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) - max(0, (max(vector) - min(vector)) / (n - 1)) - (sum_elements ** 2) / (n ** 2) - sum(Counter(vector).values()) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) - sum(1 for x in vector if x > 0) - sum(1 for c, freq in Counter(vector).items() if c > 0 and freq > 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) - sum(1 for x in vector if x > 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n - trailing_zeros) / n * math.log2(n) - sum(1 for x in vector if x > 0) + math.exp(-sum_elements/n)




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(map(math.log2, (x+1 for x in Counter(vector).values())))




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: math.log2(x+1), Counter(vector).values())) - sum(vector) / (n * max(vector))




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(map(math.log2, Counter(vector).values())) / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + len(str(sum(vector)).rstrip('0')) / n) - sum(map(math.log2, (x+1 for x in Counter(vector).values())))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of unique elements and the maximum frequency
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  # Add the normalized sum of unique elements and the maximum frequency
  return_value += (sum(x for x in set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  return return_valu




#score: {'n8_size512.txt': 330}
#island_id: 3
#version_generated: 3
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) + 
       sum(x/abs(x) if x else 0 for x in Counter(vector).values()) / len(set(vector)) + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 307}
#island_id: 3
#version_generated: 3
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) + 
       sum(x/abs(x) if x else 0 for x in Counter(vector).values()) / len(set(vector))
  ) - (math.log10(sum_vector) / math.log10(unique_elements) if unique_elements > 1 else 0)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 316}
#island_id: 0
#version_generated: 3
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(map(lambda x: math.log2(x+1), Counter(vector).values())) * 2 - abs(min(vector)) * 0.5




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(map(math.log2, map(lambda x: x+1, Counter(vector).values())))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(map(lambda x: math.log2(x+1), Counter(vector).values()))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(math.log2(x+1) for x in Counter(vector).values())




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(math.log2, map(lambda x: x+1, Counter(vector).values()))) / (n * math.log2(n)) - sum(vector) / n




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(math.log2(x+1) for x in Counter(vector).values())




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:].rstrip('0')) / n + sum(map(math.log2, map(lambda x: x+1, Counter(vector).values())))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x if x != 0 else math.log10(n) for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * math.log10(n)) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * math.log10(n)) - trailing_zeros / n + sum(1 for x in vector if x > 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * math.log10(n)) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * math.log10(n)) - trailing_zeros / n - sum(map(math.log10, Counter(vector).values())) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * len(vector)) + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements / (n * max(len(str(x)) for x in vector))) - (trailing_zeros / n)




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 2
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) / (trailing_zeros + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(math.log2(x+1) for x in Counter(vector).values())




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(map(math.log2, map(lambda x: x+1 if x > 0 else 0, Counter(vector).values())))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(math.log2(x+1) for x in sorted(Counter(vector).values(), reverse=True))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector)).lstrip('0b') or '0') / n + sum(math.log2(x+1) for x in Counter(vector).values())




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector)).lstrip('0b') or '0') / n + sum(math.log2(x+1) for x in Counter(vector).values())




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector)).rstrip('0').replace('0b', '')) / n + sum(math.log2(x+1) for x in Counter(vector).values())




#score: {'n8_size512.txt': 318}
#island_id: 0
#version_generated: 3
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + len(str(sum(vector)).rstrip('0')) * math.log2(n)




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:].lstrip('0')) / n + sum(math.log2(x+1) for x in Counter(vector).values())




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) / (trailing_zeros + 1)) - math.sqrt(n + 1) * sum(x**2 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(Counter(vector).get(0, 0)))
  return -sum_elements / (n + 1) - math.log2((n + 1) / (trailing_zeros + 1))




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: math.log2(x+1) if x > 0 else 0, vector)) / sum(1 for _ in vector) - len(str(sum(vector)).rstrip('0')) / n




#score: {'n8_size512.txt': 325}
#island_id: 0
#version_generated: 3
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(map(math.log2, filter(lambda x: x > 0, Counter(vector).values())))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(map(lambda x: math.log2(x+1) if x > 0 else 0, Counter(vector).values()))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(math.log2(i+1) if i > 0 else 0 for i in Counter(vector).values())




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
      math.exp(-sum_vector / (unique_elements * n)) *
      math.sin(sum_vector / (unique_elements * n)) + 
      len([x for x in range(1, max(vector)+1) if x not in set(vector)]) / n - 
      sum(x**3 for x in Counter(vector).values()) / sum(map(abs, vector)) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(abs, vector)) / (len(set(vector)) * n) + len([i for i in range(1, max(vector)+1) if i not in set(vector)]) / n + sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector))




#score: {'n8_size512.txt': 352}
#island_id: 3
#version_generated: 3
#generate time09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) *
       math.sin(sum_vector / (unique_elements * n)) + 
       len([x for x in range(1, max(vector)+1) if x not in set(vector)]) / n +
       sum(x**3 for x in Counter(vector).values()) / sum(map(abs, vector)) ** 2)




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) *
       math.sin(sum_vector / (unique_elements * n)) + 
       len([x for x in range(1, max(vector)+1) if x not in set(vector)]) / n +
       sum(x*(x-1)/2 for x in Counter(vector).values()) / sum(map(abs, vector))
  )




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Improved calculation of priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - np.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Improved calculation of priority
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.sqrt(variance)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Improved calculation
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = return_value + (variance/np.std(vector)) + ((sum_elements - median) / np.median(abs(np.diff(vector)))) + (gmean([x for x in set(vector)]) / np.mean(set(vector))) + (hmean([x for x in vector]) / np.mean(vector))
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = (variance/np.std(vector)) + ((sum_elements - median) / np.median(abs(np.diff(vector))))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector)) + ((sum_elements - median) / np.median(abs(np.diff(vector)))) + gmean((x for x in vector if x > 0))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector)) + ((sum_elements - median) / np.median(abs(np.diff(vector)))) + gmean(vector)**2
  return return_value




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:].lstrip('0')) / n + sum(math.log2(x+1) for x in Counter(vector).values()) + math.log2(len(set(vector))) / n




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:].lstrip('0')) / n + sum(math.log2(x+1) for x in Counter(vector).values()) - sum([math.log2(i+1) for i in range(n) if i+1 not in vector]) / n




#score: {'n8_size512.txt': 327}
#island_id: 0
#version_generated: 3
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:].lstrip('0')) / n + sum(math.log2(x+1) for x in Counter(vector).values()) - math.log2(len(set(vector)))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:].lstrip('0')) / n + sum(math.log2(x+1) for x in Counter(vector).values()) - math.log2(n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - math.fsum(map(math.log2, Counter(vector).values())) / sum_elements




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) + math.log2(len(set(vector)))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time09:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - Counter({x: vector.count(x) for x in set(vector)}).most_common(1)[0][1] / n




#score: {'n8_size512.txt': 314}
#island_id: 3
#version_generated: 3
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
    min(n - leading_ones, n) / n * 
    math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
    len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
    (unique_elements - trailing_zeros) / n + 
    sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
    math.exp(-sum_vector / (unique_elements * n)) * sum(x**3 for x in Counter(vector).values()) / sum(x for x in Counter(vector).values())
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) * 
       max(0, 1 - (len([i for i in range(1, max(vector)+1) if i not in vector]) / n))
  )




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  + gmean((x for x in vector if x > 0)) / np.std([x for x in vector if x > 0])
  + entropy(np.sort([x for x in vector if x > 0])) / math.log(n)
  return_value = return_value + (variance/np.std(vector)) + ((sum_elements - median) / np.median(abs(np.diff(vector))))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector)) + ((sum_elements - median) / np.median(abs(np.diff(vector)))) + gmean((x for x in vector if x > 0))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector)) + ((sum_elements - median) / np.median(abs(np.diff(vector)))) + gmean((x for x in vector if x > 0))
  return return_value




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
    min(n - leading_ones, n) / n * 
    math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
    len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
    (unique_elements - trailing_zeros) / n + 
    sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
    math.sqrt(sum(x**4 for x in Counter(vector).values())) / sum(map(abs, vector))
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  ) ** 0.5




#score: {'n8_size512.txt': 322}
#island_id: 3
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([(-x / (n * len(set(vector)))) + 
         min(n - bin(x).count('1'), n) / n * 
         math.sqrt((x - sum(Counter(vector).values()) / len(set(vector))) ** 2) for x in vector])




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  )




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((trailing_zeros + 1) * len(set(vector)) / n)




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in Counter(vector).values())




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((trailing_zeros + 1) * len(set(vector)) / n)




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in Counter(vector).values()) + sum(1 for x in vector if x > 0)




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in Counter(vector).values()) - min(sum_elements, len(vector)) ** 0.5




#score: {'n8_size512.txt': 314}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in Counter(vector).values()) + abs(sum_elements - n ** 0.5)




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in Counter(vector).values()) + sum(math.log(x+1) for x in Counter(vector).values())




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  entropy = -sum((p/math.log2(n+1)) * math.log2(p/math.log2(n+1)) for p in Counter(vector).values())
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - entropy




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in Counter(vector).values()) + sum(math.log(x+1) if x > 0 else 0 for x in Counter(vector).values())




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  entropy = -sum((Counter(vector)[i]+1) / (n+1) * math.log2((Counter(vector)[i]+1) / (n+1)) for i in set(vector))
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - entropy




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in Counter(vector).values()) + sum(math.log(x+1) for x in Counter(vector).values()) - sum(math.log(x+2) for x in Counter(vector).values())




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in Counter(vector).values()) + sum(math.log(x+1) for x in Counter(vector).values())




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in Counter(vector).values()) + sum(math.log2(x+1) for x in Counter(vector).values())




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x == 0) / len(vector) - (sum(vector) ** 2) / (n + 1)




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - np.mean([x**2 for x in Counter(vector).values()]) + sum(math.log(x+1) for x in Counter(vector).values())




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum(x for x in Counter(vector).values()))/n
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum(x for x in Counter(vector).values()))/n
       ) - 0.1 * (min(sum_vector, n) + leading_ones)




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum(x for x in Counter(vector).values()))/n)




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
      math.exp(-sum(x for x in Counter(vector).values()))/n
  ) ** 0.5




#score: {'n8_size512.txt': 317}
#island_id: 0
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(math.log2(x+1) for x in set(Counter(vector).values()))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(map(lambda x: math.log2(x+1), Counter(vector).values())) if any(Counter(vector).values()) else 1




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(math.log2(x+1) for x in Counter(vector).values()) - sum(map(math.log2, map(lambda x: 1 if x > 0 else 0, Counter(vector).values()))) / math.log2(n)




#score: {'n8_size512.txt': 327}
#island_id: 0
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:].lstrip('0')) / n + sum(math.log2(x+1) for x in Counter(vector).values()) - math.log2(len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(map(lambda x: math.log2(x+1), Counter(vector).values())) - math.log2(len(set(vector))) * len(set(vector))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:].lstrip('0')) / n + sum(map(math.log2, Counter(vector).values())) - math.log2(len(set(vector)))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:]) // n + sum(math.log2(x+1) for x in Counter(vector).values())




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -((sum_elements/n + (n - sum(1 for x in vector if x)) ** 2 / n) 
       + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n 
       + min((x**2/n) for x in vector) 
       + max(-sum(vector), 0) 
       + (max(vector) - min(vector)) / n 
       - sum(sorted(vector)[::-1]) / n 
       + math.sqrt(trailing_zeros) * n / len(vector) 
       - sum(x for x in set(vector)) / n 
       - leading_zeros/n 
       - max_freq/min_freq - (max_freq/min_freq)**2 
       + zero_ratio 
       + (unique_elements - 1) / n 
       + abs(median - sum_elements/len(vector)) 
       - min(vector)**3/(n**2) 
       + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) 
       - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n 
       - max_freq**3/(min_freq**2))
  + (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)
  retur




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of unique elements and the maximum frequency
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of unique elements and the maximum frequency
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)
  return return_value




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) + sum(-math.expm1(math.log2(x+1)) for x in Counter(vector).values())




#score: {'n8_size512.txt': 312}
#island_id: 1
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum((x - sum_elements / n)**2 for x in Counter(vector).values()) - sum(math.log(x+1) for x in Counter(vector).values())




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  frequency = Counter(vector).values()
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in frequency) + sum(math.log2(x+1) for x in frequency)




#score: {'n8_size512.txt': 259}
#island_id: 1
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  
  mean = sum_elements / len(vector) if vector else float('inf')
  std_dev = math.sqrt(sum((x - mean)**2 for x in vector) / (len(vector) - 1)) if vector and len(vector) > 1 else float('inf')

  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - std_dev




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(math.log2(i+1) if i > 0 else 0 for i in Counter(vector).values())




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(math.log2(i+1) if i > 0 else 0 for i in Counter(vector).values())




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * max(vector)) - len(bin(sum(vector))[2:]) // n + sum(math.log2(i+1) if i > 0 else 0 for i in Counter(vector).values())




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:].lstrip('0')) / n + sum(math.log2(x+1) for x in sorted(Counter(vector).values(), reverse=True))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:].lstrip('0')) / n + sum(math.log2(x+1) for x in Counter(vector).values()) + math.log2(len(set(vector))) / n - len([x for x in set(vector) if x == 0]) / (n * len(set(vector)))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:].lstrip('0')) / n + sum(math.log2(x+1) for x in sorted(Counter(vector).values(), reverse=True))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:].lstrip('0')) / n + sum(math.log2(x+1) for x in sorted(Counter(vector).values(), reverse=True))




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  frequency = Counter(vector).values()
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in frequency) - min(sum_elements, n) ** 0.5




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  frequency = Counter(vector).values()
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in frequency) - min(sum_elements, len(vector)) ** 0.5 - sum(math.sin(x) for x in frequency)




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  frequency = Counter(vector).values()
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in frequency) - min(sum_elements, len(vector)) ** 0.5




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in Counter(vector).values()) - min(sum_elements, len(vector)) ** 0.5 - abs(sum(1 for x in vector if x < 0))




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 / (x+1) for x in Counter(vector).values())




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  unique_elements = len(set(vector))
  
  # calculate entropy using Shannon entropy formula
  entropy = -sum((Counter(vector)[x]/len(vector)) * math.log2(Counter(vector)[x]/len(vector)+1e-9) for x in Counter(vector).keys())
  
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / unique_elements) - entropy




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  entropy = -sum((p / len(set(vector))) * math.log2(p / len(set(vector))) for p in Counter(vector).values())
  return -(n + 1) * math.log2(n + 1) - sum_elements / (n + 1) - trailing_zeros / n - entropy




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) + sum(math.log(x+1) for x in Counter(vector).values()) - min(sum_elements, n) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum(math.log(x+1) for x in Counter(vector).values()) - (sum_elements / (n + 1)) * math.log(len(set(vector)))




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  entropy = -sum((p / len(vector)) * math.log2(p / len(vector)) for p in Counter(vector).values())
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - entropy




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in Counter(vector).values()) + sum(math.log(x+1) for x in Counter(vector).values()) - min(sum_elements, len(vector)) ** 0.5
  - math.exp(-sum(x**2 for x in Counter(vector).values()))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       np.sqrt(np.sum((np.array(list(Counter(vector).values())) - sum_vector / unique_elements) ** 2)) / np.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       np.sum(np.array(list(Counter(vector).values())))**2 / sum(map(abs, vector)) * min(n, unique_elements)
       ) + np.exp(-sum(x for x in Counter(vector).values()))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
     ) - math.exp(-sum(x for x in Counter(vector).values()))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
      ) - sum_vector / (n * unique_elements) * math.exp(-sum_vector / (n * unique_elements))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
  ) + math.exp(-sum(x for x in Counter(vector).values()))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
      math.exp(-sum_vector / (unique_elements * n)) *
      math.sin(sum_vector / (unique_elements * n)) + 
      len([x for x in range(1, max(vector)+1) if x not in set(vector)]) / n)

  return -math.log((len([i for i in range(1, max(vector)+1) if i not in vector]) + unique_elements - trailing_zeros) * sum(map(abs, vector)) ** (unique_elements - trailing_zeros) * math.exp(-sum_vector / (unique_elements * n))) / (n * min(n, unique_elements))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) *
       math.sin(sum_vector / (unique_elements * n)) + 
       len([x for x in range(1, max(vector)+1) if x not in set(vector)]) / n)

  return -(sum_vector / (unique_elements * n) - 
       min(n - leading_ones, n) / n * 
       sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values()) / unique_elements + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) *
       math.sin(sum_vector / (unique_elements * n)) + 
       len([x for x in range(1, max(vector)+1) if x not in set(vector)]) / n)




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) *
       math.sin(sum_vector / (unique_elements * n)) + 
       len([x for x in range(1, max(vector)+1) if x not in set(vector)]) / n)




#score: {'n8_size512.txt': 308}
#island_id: 3
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       len([x for x in range(1, max(vector)+1) if x not in set(vector)]) / n - 
       (math.exp(-sum_vector / (unique_elements * n)) *
       math.sin(sum_vector / (unique_elements * n))) - 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in set(vector)]) / n)




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:].lstrip('0')) / n + sum(math.log2(x+1) for x in sorted(Counter(vector).values(), reverse=True))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:].lstrip('0')) / n + sum(math.log2(x+1) for x in sorted(Counter(vector).values(), reverse=True))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(math.log2(x+1) for x in sorted(Counter(vector).values(), reverse=True))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:].lstrip('0')) / n + sum(math.log2(x+1) for x in sorted(Counter(vector).values(), reverse=True))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector))[2:]) / n + sum(map(lambda x: math.log2(x+1), Counter(vector).values()))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(map(math.log2, map(lambda x: x+1, Counter(vector).values())))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(str(sum(vector)).rstrip('0')) / n + sum(map(math.log2, map(lambda x: x+1, Counter(vector).values())))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - entropy(frequency.values(), base=2) / np.log2(n)
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # New improvement
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + np.sqrt(n)
  return return_value




#score: {'n8_size512.txt': 286}
#island_id: 2
#version_generated: 3
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -((sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) * (np.abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n) + min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + np.sqrt(n))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + np.sqrt(n)
  return return_value




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  frequency = Counter(vector).values()
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in frequency) + sum(math.log2(x+1) if x > 0 else 0 for x in frequency)




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in Counter(vector).values()) + sum(math.log(x+1) if x > 0 else 0 for x in Counter(vector).values()) - sum_elements * math.log(len(set(vector)))/len(set(vector))




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  freq = Counter(vector).values()
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in freq) + sum(math.log2(x+1) if x > 0 else 0 for x in freq)




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  freq = Counter(vector).values()
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in freq) + sum(math.log2(min(x+1, n) if x > 0 else 0) for x in freq)




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  freq = Counter(vector).values()
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in freq) + sum(math.log2(x+1) if x > 0 else 0 for x in freq) - max(sum_elements, n)**0.5




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  frequency = Counter(vector).values()
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in frequency) - min(sum_elements, n) ** 0.5 - sum(math.sin(x) for x in frequency)
  - sum(x**3 for x in frequency if x > 0)




#score: {'n8_size512.txt': 364}
#island_id: 1
#version_generated: 3
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  freq = Counter(vector).values()
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in freq) - math.prod(1+x if x > 0 else 1 for x in freq)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement
  weighted_variance = variance / np.std(vector)
  return_value = (sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) * weighted_variance
  return return_value

  # Further improvement
  skewness = ((np.sum((x - median)**3 for x in vector)) / (n * variance**3))**(0.5)
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + skewness




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + min(vector)**5/(n**4)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement
  weighted_variance = variance / np.std(vector)
  return_value = (sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) * weighted_variance
  return_value += (max(vector) - min(vector)) ** 2 / (4 * variance)
  return return_valu




#score: {'n8_size512.txt': 364}
#island_id: 1
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  freq = Counter(vector).values()
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in freq) - math.prod(1+x if x > 0 else 1 for x in freq) - sum(math.log2(f + 1) for f in freq)




#score: {'n8_size512.txt': 364}
#island_id: 1
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  freq = Counter(vector).values()
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in freq) - math.prod(1+x if x > 0 else 1 for x in freq) + abs(sum_elements) / (max(freq) + 1)




#score: {'n8_size512.txt': 364}
#island_id: 1
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  freq = sorted((Counter(vector).values()), reverse=True)
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in freq) - math.prod(1+x if x > 0 else 1 for x in freq)




#score: {'n8_size512.txt': 364}
#island_id: 1
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  freq = sorted((Counter(vector).values()), reverse=True)
  
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in freq) - math.prod(1+x if x > 0 else 1 for x in freq)
  - min(freq) / max(freq) if min(freq) < 0 and max(freq) > 0 else 0




#score: {'n8_size512.txt': 364}
#island_id: 1
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  freq = sorted((Counter(vector).values()), reverse=True)
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in freq) - math.prod(1+x if x > 0 else 1 for x in freq)
  return -sum_elements / n + math.prod([x**-freq.count(y)/(n+1) for y in set(vector)]) * math.log(n+1)




#score: {'n8_size512.txt': 316}
#island_id: 1
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in Counter(vector).values())




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) + len(set(vector)) / n - math.log2(len(set(vector)))




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(format(sum(vector), 'b').lstrip('0') or '0') / n + sum(math.log2(x+1) for x in Counter(vector).values())




#score: {'n8_size512.txt': 328}
#island_id: 0
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector)).lstrip('0b') or '0').bit_length() / n + sum(math.log2(x+1) for x in Counter(vector).values())




#score: {'n8_size512.txt': 327}
#island_id: 0
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * max(vector)) - len(bin(sum(vector)).lstrip('0b') or '0') / n + sum(math.log2(x+1) for x in Counter(vector).values()) - math.log2(len(set(map(int, vector))))




#score: {'n8_size512.txt': 364}
#island_id: 1
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  freq = Counter(vector).values()
  
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in freq) - math.prod(1+x if x > 0 else 1 for x in freq) + abs(sum_elements) / max(freq, default=1)




#score: {'n8_size512.txt': 364}
#island_id: 1
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  freq = sorted(Counter(vector).values(), reverse=True)
  
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in freq) - math.prod(1+x if x > 0 else 1 for x in freq)




#score: {'n8_size512.txt': 364}
#island_id: 1
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  freq = Counter(vector).values()
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in freq) - math.prod(1+x if x > 0 else 1 for x in freq) + abs(sum_elements) / (max(freq) + 1) - sum(math.log2(x+2) for x in freq)




#score: {'n8_size512.txt': 364}
#island_id: 1
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  freq = Counter(vector).values()
  return -sum_elements / (n + 1) - math.log2((n + 1) * (trailing_zeros + 1) / len(set(vector))) - sum(x**2 for x in freq) - math.prod(1+x if x > 0 else 1 for x in freq) - math.log2(min(freq, key=lambda x: abs(x)) + 1)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # New features
  correlation = sum((x - median)**2 for x in vector) / sum((x - median)**2 for x in set(vector))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + correlation




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # New logic to prioritize vectors with lower sum of elements and more trailing zeros
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 2
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((sum_elements > len(vector) // 2) and trailing_zeros == 0)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 2
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) // n)**2




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 2
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements - len(vector) // 2) * (trailing_zeros / n) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.exp(-sum_elements/n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n + 1) - trailing_zeros / (2 * n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(np.sort(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum([i for i in set(vector)]) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum([i**6/(n*n*n*n*n) for i in vector])) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement:
  if sum(1 for x in vector if x) > n//2:
    return math.exp(-n/sum_elements)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement: 
  if sum(1 for x in vector if x) > n//2:
    return math.exp(-n/sum_elements)
  
  # Additional improvement: 
  if sum(1 for x in vector if x) <= n//2 and sum(vector) >= (len(vector) - trailing_zeros)*0.5:
    return math.sqrt(len(vector))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Additional improvement: 
  if sum(1 for x in vector if x) > n//2:
    return math.exp(-n/sum_elements)
  
  # New addition: 
  return -(math.exp(-(sum_elements/n)**2) * (sum_elements / n) ** 2 + math.exp((n - sum(1 for x in vector if x)) ** 2/(n**2)) * ((n - sum(1 for x in vector if x)) / n) ** 2)




#score: {'n8_size512.txt': 330}
#island_id: 3
#version_generated: 3
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / (len(set(vector)) * n) + 
       math.exp(-sum(map(abs, vector)) / (len(set(vector)) * n)) * 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, len(set(vector))) + 
       np.sqrt(sum((x - sum(map(abs, vector)) / len(set(vector))) ** 2 for x in Counter(vector).values())) / np.sqrt(len(set(vector))))




#score: {'n8_size512.txt': 312}
#island_id: 3
#version_generated: 3
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
      math.exp(-leading_ones / n) * min(n, unique_elements) + 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      (n - leading_ones) / n * (unique_elements - trailing_zeros) / n
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) * (1 - len([i for i in range(1, max(vector)+1) if i not in vector]) / n)
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) * (1 - len([i for i in range(1, max(vector)+1) if i not in vector]) / n))

  # Sort the vector by values and count trailing zeros
  sorted_vector = [x for x in sorted(vector)]
  trailing_zeros = 0
  while sorted_vector[-1] == 0:
    sorted_vector.pop()
    trailing_zeros += 1

  return -(sum(sorted_vector) + 
       len(sorted_vector) - trailing_zeros)




#score: {'n8_size512.txt': 268}
#island_id: 3
#version_generated: 3
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(1 for elem in vector) + len(str(sum(map(abs, vector)))) - len(str(sum(map(abs, vector))).rstrip('0'))) / (n * len(set(vector))))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(Counter(map(str, vector)).values()) * (2 - abs(2 * sum(Counter(map(str, vector)).values()) / len(vector) - 1)) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(1 - math.sin(math.pi * (sum_elements / len(vector)))) ) - ((trailing_zeros > 0) and (sum_elements < len(vector) // 2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((sum_elements > len(vector) // 2) and trailing_zeros == 0) * sum_elements




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n)) ** 0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = np.sum(x for x in set(vector))

  if sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2:
    return_value -= (max_freq/min_freq)**2
  elif sum_elements > n/2 and sum(1 for x in vector if x) < n//2:
    return_value += (max_freq/min_freq)**2

  return return_value




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n)) ** 0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (variance/np.std(vector)) * np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x))))
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((np.sum(x**2 for x in vector) - sum_elements**2 / n)) ** 0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # New term added
  return_value = return_value + variance**2 / (n * np.std(vector)**2)
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a weight to the priority based on the frequency of elements
  freq_weight = sum((x/len(vector))**(1/3) for x in frequency.values()) / (n ** 2)
  
  return priority + sum(frequency.values()) / (n * max_freq) - freq_weight

  # Improve the weight by adding a penalty term to discourage vectors with too many unique elements
  penalty = math.exp(-n/(unique_elements)) * (unique_elements - n/2)**2
  
  return priority + sum(frequency.values()) / (n * max_freq) - freq_weight - penalt




#score: {'n8_size512.txt': 340}
#island_id: 2
#version_generated: 3
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  priority = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a weight to the priority based on the frequency of elements
  freq_weight = sum((x/len(vector))**(1/3) for x in frequency.values()) / (n ** 2)
  
  return priority + math.sqrt(sum(x**2 for x in vector)) * n / len(vector) - max_freq/min_freq - abs(sum_elements/n - median)**2




#score: {'n8_size512.txt': 278}
#island_id: 3
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(math.log10(n) + math.log10(unique_elements) + 
       (sum_vector / n)**2 + 
       min(n - leading_ones, n) / n * 
       math.sqrt((sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / (unique_elements * n)) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
   min(n - leading_ones, n) / n * 
   math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
   len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
   (unique_elements - trailing_zeros) / n + 
   sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
   math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n +
   0.5*(1 - math.erf((leading_ones/n)-0.5))
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum(x for x in Counter(vector).values()))/n
  ) ** 0.5




#score: {'n8_size512.txt': 311}
#island_id: 3
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
     ) + math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n - sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n)




#score: {'n8_size512.txt': 270}
#island_id: 3
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
      math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n - 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) ** 0.5
  )




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)
  
  trailing_zeros = str(sum_elements).zfill(n).count('0')
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (gmean(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)
  
  trailing_zeros = str(sum_elements).zfill(n).count('0')
  
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  
  return_value += (gmean(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)
  
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (math.gcd(*vector) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 345}
#island_id: 2
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and np.sum(vector) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and np.sum(vector) < n//2):
    return -np.sqrt(n)

  variance = np.sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (gmean(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency)

  return return_value




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, -sum_elements)




#score: {'n8_size512.txt': 260}
#island_id: 1
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -(trailing_zeros / n) ** 2 - (sum_elements - len(vector) // 2) * 2
  else:
    return -(trailing_zeros / n) ** 2 + (len(vector) // 2 - sum_elements) * 2




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((sum_elements > len(vector) // 2) and trailing_zeros == 0) * sum_elements - abs(sum_elements - len(vector) // 2) * min(trailing_zeros, len(vector) // 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-trailing_zeros/n) - math.log(sum_elements + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.exp(-sum_elements / n) + math.sqrt(sum_elements) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n / (n + math.exp(-sum_elements/n))) - trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements)/n) - trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def loss_function(x):
    return -np.sum(x) * (n / (n + np.exp(-np.sum(x)/n))) - len([i for i in reversed(list(map(int, x))) if i == 0])
  res = minimize(loss_function, [0.5]*len(vector), method="SLSQP")
  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n / (n + math.exp(-sum_elements/n))) - trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements / (n + math.exp(-sum_elements/n)) ** 2 - trailing_zeros




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(bin(sum_elements)[2:].zfill(n).rstrip('0')) - leading_zeros
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)*len([x for x in vector if x])/(n/2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Calculate the priority based on the sum of elements, number of trailing zeros and uniqueness of elements
  return -(sum_elements / n) + (n - sum(1 for x in vector if x)) ** 2 / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = (sum(x**2 for x in vector) - sum_elements**2 / n) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(sum(vector)/n) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) +
       math.exp(-sum_vector / (unique_elements * n)) *
       math.sin(sum_vector / (unique_elements * n)) + 
       math.sin(sum_vector / n) * math.cos(sum_vector / n))




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  return -(variance + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) + math.exp(-math.sqrt(n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([(-1)**i for i in range(len(vector)) if vector[i] != 0]) + math.log2(n) * (vector.count(0) / len(vector))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) and trailing_zeros > 0) * max(trailing_zeros / n, -sum_elements)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, -sum_elements) - ((trailing_zeros == 0) and (sum_elements <= len(vector) // 2)) * sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str, vector))))[2:].zfill(len(vector)).count('0') / n)




#score: {'n8_size512.txt': 336}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of frequencies and the normalized variance
  frequency_sum = sum(frequency.values()) / len(frequency)
  variance_normalized = variance / (sum_elements / n)

  return_value += (frequency_sum + variance_normalized) / 2

  # Calculate the priority based on the entropy of the vector
  entropy = -sum((freq / len(vector)) * math.log(freq / len(vector), 2) for freq in frequency.values())
  return_value += entropy

  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of frequencies and the normalized variance
  frequency_sum = sum(frequency.values()) / len(frequency)
  variance_normalized = variance / (sum_elements / n)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (frequency_sum + variance_normalized) / 2
  return_value = math.exp(-return_value) + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of frequencies and the normalized variance
  frequency_sum = sum(frequency.values()) / len(frequency)
  variance_normalized = variance / (sum_elements / n)

  # Calculate a new weight based on the sum of frequencies and the variance
  weight = 0.5 * (frequency_sum + variance_normalized)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += weight

  # Apply a threshold to the result
  return min(max(-100, return_value), 100)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of frequencies and the normalized variance
  frequency_sum = sum(frequency.values()) / len(frequency)
  variance_normalized = variance / (sum_elements / n)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (frequency_sum + variance_normalized) / 2
  return return_valu




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements)/n) - trailing_zeros / (n + 1e-6)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements)/n) - trailing_zeros / (n + abs(sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -math.exp(-abs(sum_elements)/n) * (sum_elements + trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements)/n) - trailing_zeros - (trailing_zeros / n)




#score: {'n8_size512.txt': 331}
#island_id: 3
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) *
       math.sin(sum_vector / (unique_elements * n)) +
       len([x for x in set(vector) if x < 0]) / n - 
       max(1, sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
      ) - math.exp(-sum_vector / (unique_elements * n)) * math.sin(sum_vector / (unique_elements * n)) * (unique_elements - trailing_zeros) / n




#score: {'n8_size512.txt': 311}
#island_id: 3
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) *
       math.sin(sum_vector / (unique_elements * n)) +
       len([x for x in set(vector) if x < 0]) / n
       ) - sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def loss_function(x):
    s = sum(x)
    t = len([i for i in reversed(list(map(int, x))) if i == 0])
    return -s * (n / (n + math.exp(-s/n))) - t
  res = minimize(loss_function, [1.]*len(vector), method="SLSQP")
  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(vector) * (n / (n + np.exp(-np.sum(vector)/n))) - len([i for i in reversed(list(map(int, vector))) if i == 0])




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def loss_function(x):
    return -np.sum(x) * (n / (n + np.exp(-np.sum(x)/n))) - len([i for i in reversed(list(map(int, x))) if i == 0])
  res = minimize(loss_function, [1]*len(vector), method="SLSQP")
  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len([i for i in reversed(list(map(int, vector))) if i == 0])
  return -sum_elements * (n / (n + math.exp(-sum_elements/n))) - trailing_zeros / n




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add a new term that captures the skewness of the distribution
  skewness = (np.sum((vector - median) ** 3) / len(vector)) / np.std(vector)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += skewness
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  # Calculate the priority as a combination of the previous metrics
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Add the normalized sum of frequencies and the normalized variance
  frequency_sum = np.sum(frequency.values()) / len(frequency)
  variance_normalized = variance / (sum_elements / n)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (frequency_sum + variance_normalized) / 2
  return return_value




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) *
       math.sin(sum_vector / (unique_elements * n)) + 
       len([x for x in range(1, max(vector)+1) if x not in set(vector)]) / n +
       sum(x*(x-1)/2 for x in Counter(vector).values()) / sum(map(abs, vector)) - 
       math.pow(sum_vector/unique_elements, 3))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) / (len(set(vector)) * n) + 
       math.sqrt(sum((x - sum(map(abs, vector)) / len(set(vector))) ** 2 for x in Counter(vector).values())) / math.sqrt(len(set(vector))) + 
       len([i for i in range(1, max(vector)+1) if i not in set(vector)]) / n + 
       (len(set(vector)) - bin(sum(map(abs, vector))).count('0')) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, len(set(vector))) + 
       math.exp(-(sum(map(lambda x: abs(x), vector)) / (len(set(vector)) * n))) * 
       math.sin(sum(map(lambda x: abs(x), vector)) / (len(set(vector)) * n)) + 
       sum(x*(x-1)/2 for x in Counter(vector).values()) / sum(map(abs, vector))
  )




#score: {'n8_size512.txt': 310}
#island_id: 3
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / (unique_elements * n) + 
      min(n - leading_ones, n) / n * 
      math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
      len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
      (unique_elements - trailing_zeros) / n + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
      math.exp(-sum_vector / (unique_elements * n)) *
      math.sin(sum_vector / (unique_elements * n)) + 
      len([x for x in range(1, max(vector)+1) if x not in set(vector)]) / n +
      sum(x*(x-1)/2 for x in Counter(vector).values()) / sum(map(abs, vector)) - 
      min(n - leading_ones, n) * math.cos(sum_vector / (unique_elements * n))
  )




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum(x for x in Counter(vector).values())) + 
       sum(abs(x) for x in Counter(vector).values()) / (unique_elements * n))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) / (n * len(set(vector))) + 
       sum((x - sum(vector) / len(set(vector))) ** 2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, len(set(vector)))
     )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
      math.exp(-sum(x for x in Counter(vector).values())) * (1 - len([i for i in range(1, max(vector)+1) if i not in vector]) / n) + 
      sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements)
     ) - math.exp(-sum_vector / (unique_elements * n))




#score: {'n8_size512.txt': 358}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n)
  - 0.5 * len({x: Counter(vector)[x] for x in Counter(vector).values() if x != 0}) / unique_elements




#score: {'n8_size512.txt': 330}
#island_id: 3
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  sum_vector = sum(map(abs, vector))
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))
  
  return -(sum_vector / (unique_elements * n) + 
       min(n - leading_ones, n) / n * 
       math.sqrt(sum((x - sum_vector / unique_elements) ** 2 for x in Counter(vector).values())) / math.sqrt(unique_elements) + 
       len([i for i in range(1, max(vector)+1) if i not in vector]) / n + 
       (unique_elements - trailing_zeros) / n + 
       sum(x**2 for x in Counter(vector).values()) / sum(map(abs, vector)) * min(n, unique_elements) + 
       math.exp(-sum_vector / (unique_elements * n)) * len([i for i in range(1, max(vector)+1) if i not in vector]) / n - 
       0.5 * len({x for x in Counter(vector).values() if x != 0}) / unique_elements
  )




