#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 2
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) if str(vector).lstrip('0') else 0
  
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 2
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 2
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements - min(vector)) - trailing_zeros / (n * max(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (trailing_zeros / (n+1))




#score: {'n8_size512.txt': 256}
#island_id: None
#version_generated: None
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = 0
  for elem in reversed(vector):
    if elem == 0:
      trailing_zeros += 1
    else:
      break
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 2
#generate time11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 2
#generate time11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 2
#generate time11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector)))).lstrip('0b'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 2
#generate time11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) if str(vector).lstrip('0') else 0
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 2
#generate time11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements + trailing_zeros / (n if n else 1))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 2
#generate time11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 273}
#island_id: 2
#version_generated: 2
#generate time11:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in reversed(vector) if x == 0])
  return -sum_elements - trailing_zeros / n - sum_elements ** 2 / (n * n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x if x != 0 else 0 for x in vector) / len(vector) - sum(1 for _ in reversed(vector) if _ == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n) * (n - sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  return -sum(vector) * np.log2((n - len([i for i in vector if i == 0])) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in reversed(vector)])))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 291}
#island_id: 2
#version_generated: 3
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - bin(int(''.join(map(str,vector)))).count('0') / n ** 2




#score: {'n8_size512.txt': 286}
#island_id: 2
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 283}
#island_id: 2
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + abs(sum_elements - len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 2
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n)




#score: {'n8_size512.txt': 279}
#island_id: 2
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / (len(vector) // 4)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 2
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n)




#score: {'n8_size512.txt': 266}
#island_id: 2
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + sum(1 for i in vector if i == 0) * (n // 2 - sum_elements / len(vector))




#score: {'n8_size512.txt': 272}
#island_id: 2
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / (n * max(abs(x) for x in vector))) * trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for i in vector if i == 0])))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements + (trailing_zeros / (n+1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for i in vector if i == 0])))
  return -sum_elements + (n - trailing_zeros) / n - sum_elements**2/(4*n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 if i == 0 else 2**31 for i in vector))[2:]) - len(str(sum(1 if i == 0 else 2**31 for i in vector)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum([1 for i in vector if i == 0])))
  return -sum_elements / (n + 1) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zeros = str(sum([1 if i == 0 else 0 for i in reversed(vector)]))
  return -sum_elements * (n - len(zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in reversed(vector)])))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in reversed(vector)])))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements ** 2 / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in reversed(vector)])))
  return -(sum_elements ** 2) * (n - trailing_zeros) / (n * sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements / (n + 1)) + (trailing_zeros / (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements + (trailing_zeros / (n+1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements + (vector.count(0) / (n+1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements + (trailing_zeros / (n+1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + (trailing_zeros / (n+1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -sum_elements + (trailing_zeros / (n+1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros / (n+1))




#score: {'n8_size512.txt': 291}
#island_id: 2
#version_generated: 3
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 270}
#island_id: 2
#version_generated: 3
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (trailing_zeros / n) + min(sum_elements > len(vector) // 2, 1) * (-trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements + trailing_zeros) / (n * (n - 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - min(trailing_zeros, n)) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -sum_elements + (n - leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / n ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements / (n * max(vector))) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + min(trailing_zeros / n, len(vector) - trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements / (n * max(vector))) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.
  
  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set
  
  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements + leading_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -sum_elements + trailing_zeros / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum([1 if i == 0 else 0 for i in vector])))
  return -(sum_elements ** 2) * (n - leading_ones) / (n * sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in reversed(vector)])))
  return -sum_elements * (n - trailing_zeros) / ((n + 1) * sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + (trailing_zeros / (n+1) ** 2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements + (trailing_zeros / (n+1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + (trailing_zeros / max(n, 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (trailing_zeros / n) * (n-trailing_zeros) 




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements + (trailing_zeros / (n+1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (trailing_zeros / (n+1)) * (n-trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (trailing_zeros / (n+1)) * sum_elements




#score: {'n8_size512.txt': 284}
#island_id: 2
#version_generated: 3
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - min(trailing_zeros / n, 1) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 2
#version_generated: 3
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + ((abs(sum_elements-len(vector)//2)) > 0.5) * (trailing_zeros / n)




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) > 1) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements + (trailing_zeros / (n+1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  leading_ones = len(str(sum(1 for x in vector if x)).lstrip('0'))
  return -(sum_elements + leading_ones) / (n+1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements + (trailing_zeros / (n+1)) * (1 - sum_elements / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (vector.count(0) if len(vector) > 0 else 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + trailing_zeros) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(len([elem for elem in vector if elem == 0])))
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 283}
#island_id: 2
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + abs(sum_elements - len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - (bin(int(''.join(map(str,vector))) & ((1 << len(vector)) - 1)).count('0') / n) ** 2 + (sum_elements > len(vector) // 2) * (bin(int(''.join(map(str,vector))) & ((1 << len(vector)) - 1)).count('0') / n)




#score: {'n8_size512.txt': 283}
#island_id: 2
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + np.abs(sum_elements - len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in reversed(vector)])))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(i == 0) for i in vector]))[::-1])
  return -sum_elements - (n - trailing_zeros) / n if sum_elements != 0 else 1




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in reversed(vector)])))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n+2) - min((trailing_zeros + len(vector)) / (n+2), 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if x else 0 for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -sum_elements + (trailing_zeros / (n+1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (trailing_zeros / (n+1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 if i == 0 else 0 for i in reversed(vector)))) - 1
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - (trailing_zeros + 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + trailing_zeros) / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - (trailing_zeros / n) * np.log2(n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) 
  return -sum_elements / max(1, n) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 + (trailing_zeros / n) * np.exp(-abs(sum_elements - len(vector) // 2))




#score: {'n8_size512.txt': 288}
#island_id: 2
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 283}
#island_id: 2
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) or (trailing_zeros == 0))




#score: {'n8_size512.txt': 283}
#island_id: 2
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + abs(sum_elements - len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements - min(vector)) * (trailing_zeros / n + 1) ** (-max(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  max_element = max(vector)
  return -(sum_elements - min(vector)) - len([i for i in reversed(vector) if i == 0]) / (n * max_element)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements * max(vector)) - trailing_zeros / (n * min(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in str(sum(1 for i in vector if i == 0)) if i == '0'])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 for i in vector if i == 0])))
  return -sum_elements + (n - trailing_zeros) / n - sum_elements * trailing_zeros / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(vector))) - len(str(sum(vector)).rstrip('0'))
  return -(sum_elements + leading_zeros) / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * (trailing_zeros + 1)) if sum_elements != 0 else 0




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / (2 * n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * (n - 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * (n - 1)) + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * (n - 1)) + trailing_zeros / n




#score: {'n8_size512.txt': 283}
#island_id: 2
#version_generated: 3
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0'))
  return -sum_elements - (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * len(vector) - (trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = str(len([elem for elem in vector if elem == 0])).count('0')
  return -(sum_elements / len(vector)) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum([0] * (len(vector) - sum_elements))))
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - (trailing_zeros / n) * np.log2(n + 1) - np.sum([1.0/(i+1) for i in range(trailing_zeros)])




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - (trailing_zeros / n) * np.log2(n + 1) - sum(1 for elem in vector if elem > 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** 2 * (n - 1) + trailing_zeros / (n * (n - 1)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements * (n - 1) + trailing_zeros) / ((n ** 2) - 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** 2 + (trailing_zeros / (n - min(trailing_zeros, n))) if sum_elements else sum_elements) / (n * (n - 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements / max(1, n) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements / max(1, n) - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - min(trailing_zeros / n, sum_elements / (n * (max(vector) + 1)))




#score: {'n8_size512.txt': 283}
#island_id: 2
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + abs(sum_elements - len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 270}
#island_id: 2
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (trailing_zeros / n) - min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n)




#score: {'n8_size512.txt': 270}
#island_id: 2
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - ((trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - (trailing_zeros / n + sum_elements / (n * max(vector))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - min(trailing_zeros / n, (n - len(set(vector))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -sum_elements / max(1, n) - min(trailing_zeros / n, sum_elements / (n * (max(vector) + 1))) 
  # Add a logarithmic term to the result
  -math.log2(sum_elements + 1) + math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / max(1, n) - min(trailing_zeros / n, (n * max(vector)) / (max(vector) + sum(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(i == 0) for i in vector]))[::-1])
  return -sum_elements / max(1, abs(sum_elements)) - (n - trailing_zeros) / n if sum_elements != 0 else 1




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum([int(i == 0) for i in vector]))[::-1].count('0')
  return -sum_elements - (n - trailing_zeros) / n if sum_elements != 0 else 1




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(i == 0) for i in vector]))[::-1])
  return -sum_elements - (n - trailing_zeros + min(sum_elements, 1)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(len([elem for elem in vector if elem == 0])))
  return -sum_elements + (trailing_zeros / n) ** 2 - ((sum_elements / n) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(x) for x in vector if x != '0'])))-len(str(sum([int(x) for x in vector])))

  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements + (trailing_zeros / n) ** 2) + np.log10(trailing_zeros + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements * (n / (n + trailing_zeros))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 2
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) 
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) 
  return -sum_elements / max(1, n) + (trailing_zeros / (n ** 0.5))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n + trailing_zeros) if sum_elements > 0 else 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0)).replace("0b", ""))
  return -(sum_elements + (trailing_zeros + 1) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for elem in vector if not bool(elem))))
  return -sum_elements + leading_ones / (n - leading_ones)




#score: {'n8_size512.txt': 285}
#island_id: 2
#version_generated: 3
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n) + sum(1 for i in vector if i == 0)




#score: {'n8_size512.txt': 274}
#island_id: 2
#version_generated: 3
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (len(vector) / (n + 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 291}
#island_id: 2
#version_generated: 3
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 274}
#island_id: 2
#version_generated: 3
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + min(max(sum_elements / len(vector), 0.5) * (n - trailing_zeros) / n, 1)




#score: {'n8_size512.txt': 291}
#island_id: 2
#version_generated: 3
#generate time12:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 290}
#island_id: 2
#version_generated: 3
#generate time12:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (n - trailing_zeros) / (n ** 2) + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 2
#version_generated: 3
#generate time12:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Adjusting for imbalanced vector sums
  adjustment_factor = 1 - abs(2 * sum_elements / len(vector) - 1)
  
  return -sum_elements - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) + adjustment_factor




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n)




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) 
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n**0.5)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0'))
  return -(sum_elements ** 0.5 + trailing_zeros / max(1, n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) 
  return -(sum_elements ** 0.5 + trailing_zeros * (n**-1)) / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * (trailing_zeros + 1)) ** 2 if sum_elements != 0 else 0




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * (trailing_zeros + 1)) if sum_elements != 0 else -trailing_zeros / n




#score: {'n8_size512.txt': 255}
#island_id: 3
#version_generated: 2
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) / (n * len([x for x in vector if not x]))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * (trailing_zeros + 1)) if sum_elements != 0 else sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector if i != 0)
  return -(sum_elements + len([i for i in vector if i == 0])) / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n + 1) - (trailing_zeros / n) + sum_elements * trailing_zeros / (n * (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  return -(sum_elements + len([i for i in vector if i == 0])) / (n+1)




#score: {'n8_size512.txt': 291}
#island_id: 2
#version_generated: 3
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n) + min((len(set(vector)) < len(vector) // 3), 1) * sum_elements




#score: {'n8_size512.txt': 285}
#island_id: 2
#version_generated: 3
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 258}
#island_id: 2
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + min((sum(vector) > len(vector) // 2), 1) * (bin(int(''.join(map(str,vector)))).count('0') / n)




#score: {'n8_size512.txt': 283}
#island_id: 2
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + min((sum_elements > len(vector) // 2), 1) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) - sum(1 for x in set(vector)) / (n**0.5)




#score: {'n8_size512.txt': 285}
#island_id: 2
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  distinct_sum = len(set(vector))
  return -sum_elements * (n - trailing_zeros) + min((sum_elements > n // 2), 1) * (trailing_zeros / n) + min((distinct_sum < n // 3), 1) * sum_elements




#score: {'n8_size512.txt': 299}
#island_id: 2
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 2
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (trailing_zeros / n) ** 2 + min((abs(sum_elements - len(vector) // 2)), 1) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), abs(sum_elements - len(vector) // 2))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n ** 2 - 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements * (n - trailing_zeros) + 1) / ((n ** 2) - 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * (n - 1)) + (n - trailing_zeros) / (2 * n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * n + len([i for i in vector if i == 0])) / (n ** 2 - 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** 2) + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 274}
#island_id: 2
#version_generated: 3
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10e-6) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 2
#version_generated: 3
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) * (2 - abs(sum(1 for x in vector if x) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(map(abs, vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements * (n - 1) + trailing_zeros) / ((n ** 2) - 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements + trailing_zeros) / (n * (1 + abs(sum_elements - n/2)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * (n - sum(1 for i in vector if i == 0)) + len([i for i in vector if i == 0])) / ((n ** 2) - 1)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -((sum_elements ** 0.5 + trailing_zeros) / max(1, n)) * min(len(set(vector)), n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n) - (sum(vector)/n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if not i)).lstrip('0'))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0')) - 1
  return -(sum_elements ** 2) + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  leading_zeros = len(str(sum(1 for i in vector)).lstrip('0'))
  trailing_zeros = len(bin(sum(1 for i in vector))[2:]) - len(bin(sum(1 for i in vector))[2:].rstrip('0'))
  return -(sum_elements + leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -sum_elements / (n * max(len(str(i)) for i in vector) + 1e-6) - trailing_zeros / n




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 288}
#island_id: 2
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 297}
#island_id: 2
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements % 4) >= 3)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(i == 0) for i in vector]))[::-1])
  return -sum_elements / max(1, abs(sum_elements)) - ((n - trailing_zeros) / (2 * n)) ** 2 if sum_elements != 0 else 1




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(i == 0) for i in vector]))[::-1])
  return -sum_elements / max(1, abs(sum_elements)) - (n - trailing_zeros) / n if sum_elements != 0 else min(sum_elements, n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -sum_elements + (n - leading_ones) / (n * n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements + (n - leading_ones) / n - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - leading_ones) / n - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -sum_elements + (n - leading_ones) / n * (trailing_zeros := len(str(sum(1 for elem in vector if elem == 0))))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 2
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / len(vector)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = str(len([elem for elem in vector if elem == 0])).count('0')
  return -(sum_elements / len(vector)) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / len(vector)) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = str(len([elem for elem in vector if elem == 0])).count('0')
  return -(sum_elements / len(vector)) + (trailing_zeros / n) ** 2 - (len(vector) - trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / len(vector)) + (trailing_zeros / n) ** 3 - abs(sum_elements - n/2) * (trailing_zeros / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / len(vector) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for elem in vector if elem != 0)**3




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / len(vector)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + np.log(trailing_zeros) / n




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 220}
#island_id: 0
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -sum_elements / max(1, n) + (trailing_zeros / n if trailing_zeros else float('-inf'))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -sum_elements / max(1, len(vector)) - trailing_zeros / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (1 / (trailing_zeros + 1)) + 1) / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + (trailing_zeros / (n - trailing_zeros)) * np.log(n)) / max(1, n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) - abs(sum_elements - n/2) + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for _ in range(n) if _ not in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in sorted(vector)[::-1] if elem != 0)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + min(trailing_zeros, n)) / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + trailing_zeros) / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:])) - len(str(bin(sum(1 for elem in vector if elem != 0))[2:]))
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x > 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[-len(str(n)):-1].count('0') / n) ** 2




#score: {'n8_size512.txt': 268}
#island_id: 2
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5 + (abs(sum_elements - len(vector) // 2) / len(vector))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 2
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) - n/2)**2 + len([elem for elem in vector if elem == 0]) / (n * 2)




#score: {'n8_size512.txt': 298}
#island_id: 2
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + min((n/2 - sum_elements) / n, 0)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time12:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + trailing_zeros ** 2 / n**2 - abs(sum_elements - n/2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time12:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem) - n/2) ** 2 / (n * 2) + len([elem for elem in vector if elem == 0]) / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time12:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs(sum_elements - n/2) * ((trailing_zeros / n)**0.5)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time12:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n))




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 2
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n) - (trailing_zeros / len(vector)) * np.log(len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 2
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + max(trailing_zeros / (n - trailing_zeros), 1e-6)) / max(1, n)




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 2
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem != 0 and elem > n/2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs((sum_elements - n/2) / n) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) - abs(sum_elements - n/2) * (trailing_zeros / n) + np.exp(-trailing_zeros/n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**0.5 + bin(sum(1 for x in vector if x == 0))[2:].count('0')) / max(1, n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time12:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (trailing_zeros / max(1, n)) + min(trailing_zeros, n)) / max(1, n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(vector))




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_count = len([elem for elem in vector if elem != 0])
  
  return -(non_zero_count / (n * 2)) + (zero_count / n) ** 2 - abs(non_zero_count - n/2) * (zero_count / n)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for elem in vector if 0 < elem < n/(n*2))




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (n / sum_elements) + trailing_zeros) / max(1, n)




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2) + min(-sum_elements, -(n - trailing_zeros))




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem) / n + (len([elem for elem in vector if not elem]) / n) ** 2




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(min(n, len(vector)), 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:])) - len(str(bin(sum(1 for elem in vector if elem != 0))[2:]))

  return -(sum_elements ** (trailing_zeros / max(len(str(vector)), 1)) + sum_elements) / n




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem != 0) / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + trailing_zeros ** 2 / n**2 - abs(sum_elements - n/2) * (trailing_zeros / n)**(1/3)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) ** 2) / (n * 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros ** 2) / (n * 4)) - abs(sum_elements - n/2) * ((3*trailing_zeros) / (8*n))




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem != 0) / n




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem) / n




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs((sum_elements - n/2) * (trailing_zeros / n)) + sum(1 for elem in vector if elem != 0) / n




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs((sum_elements - n/2) * (trailing_zeros / n))




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs((sum_elements - n/2) * (trailing_zeros / n)) + sum(1 for elem in vector if elem != 0) / (n * 1.5)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs((sum_elements - n/2) * (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum([i for i in range(1, n+1) if i not in vector])

  return -(non_zero_sum / (n * (n+1)/2)) + (zero_count / n) ** 2 - abs(non_zero_sum - n/2) * (zero_count / n)




#score: {'n8_size512.txt': 279}
#island_id: 2
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum([elem for elem in vector if elem != 0])

  return -(non_zero_sum / (n * 2)) + (zero_count / n) ** 2 - abs(non_zero_sum - n/2) * (zero_count / n)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum / (n * 2)) + (zero_count / n) ** 2 - abs(non_zero_sum - n/2) * (zero_count / n)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum / (n * 2)) + (zero_count / n) ** 2 - abs(non_zero_sum - n/2) * (zero_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros / n) / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**0.5 + sum(1 for x in vector if x == 0)) / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + min(trailing_zeros / (n - 1), 1)) / max(1, n)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if i**2 < sum_elements < (i+3)**2)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2))




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) or 1) / n)**2 - abs(sum(1 for elem in vector if elem != 0) - n/2) * ((len([elem for elem in vector if elem == 0]) or 1) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + trailing_zeros ** 2 / (n * 3) - abs(sum_elements - n/2) * trailing_zeros / (n * 4) + sum(1 for elem in vector if elem != 0) / (n * 5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 + 0.001 * trailing_zeros) / max(min(n, len(vector)), 1))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time12:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).replace('0', ''))
  return -(sum_elements ** 0.5 + trailing_zeros) / max(min(n, len(vector)), 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + trailing_zeros) / max(min(n, len(vector)), 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** 0.5 + len(vector) - leading_ones) / max(1, n)




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time12:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time12:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + trailing_zeros) / min(n, len(vector))




#score: {'n8_size512.txt': 301}
#island_id: 2
#version_generated: 3
#generate time13:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) or 1) / n) ** 2 - abs(sum(1 for elem in vector if elem != 0) - n/2) * ((len([elem for elem in vector if elem == 0]) or 1) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2) - len([i for j, i in enumerate(vector) if i == 0]) * (n-trailing_zeros)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for elem in vector if elem == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem) / n - min(sum(1 for elem in itertools.groupby(vector)), len([elem for elem in vector if elem == 0])) / n




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(sum(1 for elem in vector if elem) - n/2) * (len([elem for elem in vector if elem == 0]) / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem)) + (len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(sum(1 for elem in vector if elem) - n/2) * (len([elem for elem in vector if elem == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + max(-1, min(0.5, sum_elements - n/2))




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2))
  - abs(sum_elements - n/2) * 0.5




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs((sum_elements - n/2) * (trailing_zeros / n)) - sum(1 for elem in vector if elem != 0 and elem > n/2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs((sum_elements - n/2) / n) * (trailing_zeros / n) + sum(1 for elem in vector if elem > n/2) - sum(1 for elem in vector if elem < 0)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem != 0 and elem > n/2) - sum(1 for elem in vector if elem < n/2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(min(n, len(vector)), 1) * min(sum_elements, n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not bool(elem)))) - 1
  return -(sum_elements ** 0.5 + (n - leading_zeros)) / max(min(n, len(vector)), 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs((sum_elements - n/2) * (trailing_zeros / n)) + sum(1 for elem in vector if elem != 0) / n - min(sum_elements, trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time13:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs((sum_elements - n/2) * (trailing_zeros / n)) - abs(sum_elements - n/2) * (sum_elements > n/2)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n-1, 1, -1) if (i+1)//2 < sum_elements < (i+3)//2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 3)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+4)//2)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) / (n * 2)) + (len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(sum(1 for elem in vector if elem != 0) - n/2) * (len([elem for elem in vector if elem == 0]) / n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n)) - sum(1 for elem in vector if elem != 0) / (n * 1.5)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n)) - sum(1 for elem in vector if elem != 0) / (n * 3)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n)) + min(1, (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in range(n) if (i+1)//2 < sum(vector) < (i+3)//2) + len([elem for elem in vector if elem == 0]) / n




#score: {'n8_size512.txt': 298}
#island_id: 2
#version_generated: 3
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2) - sum(1 for elem in vector if elem != 0 and sum_elements > n/2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[3:].count('1')
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements + (n - leading_ones - trailing_zeros)) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (len(vector) / (n + 1)) + trailing_zeros) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** 0.5 + bin(sum(1 for elem in vector if elem == 0))[2:].count('0')) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, min(n, len(vector), (sum_elements + len(str(trailing_zeros))) / 10))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + len(str(trailing_zeros))) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time13:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**0.5 for x in vector) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(min(n, len(vector)), 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + (trailing_zeros / len(vector)) ** 0.5) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 263}
#island_id: 0
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (leading_ones + 0.5) + trailing_zeros) / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + trailing_zeros) / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + trailing_zeros) / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) / n) ** 2) - abs(sum(1 for elem in vector) - n/2) * (len([elem for elem in vector if elem == 0]) / n)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 3) - abs((sum_elements - n/2) * (trailing_zeros / n)) + sum(1 for elem in vector if elem) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector) / (n * 2)) + ((vector.count(0) / n) ** 2 - abs(sum(1 for x in vector) - n/2) * (vector.count(0) / n))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * 2)) + ((vector.count(0) / n) ** 2 - abs(sum(x for x in vector) - n/2) * (vector.count(0) / n))




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(vector))




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**0.5 + bin(sum(1 for elem in vector if elem == 0))[2:].count('0')) / max(1, n)




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + min(trailing_zeros + 1, n)) / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n) - (trailing_zeros / len(vector)) * np.log(len(vector)) - abs(sum_elements - n**2/(4*n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + trailing_zeros * np.log(len(vector))) / max(1, len(vector))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) - n/2)**2 + (len([i for i in vector if i == 0]) / n)**2 - abs(sum(1 for i in vector if i) - n/2) * (len([i for i in vector if i == 0]) / n)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem != 0) / n




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem != 0) / n) * np.exp(-((abs(sum_elements - n/2) * (trailing_zeros / n)) + ((sum(1 for elem in vector if elem != 0) / n))) ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.array(vector) != 0)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum_elements / n




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(vector))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time13:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len([elem for elem in vector if not elem])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + sum(1 for elem in vector if elem) / n




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + min(trailing_zeros, n)) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + min(len(str(sum(1 for x in vector if x == 0))), n)) / max(1, n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + min(trailing_zeros, n)) / max(n, len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + trailing_zeros) / min(n, len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + sum(0 if x > n/2 else len(str(x)) for x in vector)




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2/(n**2*2) + len([x for x in vector if x == 0]) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x < 0) / n




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / (n * 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for _ in range(n)) / n




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
                      sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - abs(trailing_zeros/(n*2)-0.5)*2




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2))
  - abs(sum_elements - n/2) * abs(trailing_zeros / n) * min((n-1)/2, 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in vector if x == 0]) ** 2 / (n * 2) - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / (n * 3)




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(vector) - n/2) * len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([x for x in vector if x == 0]) ** 2 / (n * 2)




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements / (n * 2) + trailing_zeros ** 2 / n - abs(sum_elements - n/2) * trailing_zeros / n




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time13:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n - ((sum(x for x in vector) - n/2) ** 2) / (n * 4)




#score: {'n8_size512.txt': 261}
#island_id: 3
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0'))
  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -((sum_elements ** 0.5) + (trailing_zeros / len(vector))) * min(n, len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:])) - len(str(bin(sum(1 for elem in vector if not elem == 0))[2:]))

  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(vector))




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([x for x in vector if x == 0]) ** 2 / (n * 4) - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / (2 * n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + (n - len([x for x in vector if x == 0])) ** 2 / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in vector if x == 0]) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements / (n * 2)) + (trailing_zeros ** 2 / n) - abs(sum_elements - n/2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n - np.log(len([x for x in vector if x > 0]))/n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + len([x for x in vector if x == 0]) / (n ** 2)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n - (sum(x for x in vector) % 2)




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 298}
#island_id: 2
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros + 1) / n) ** 2 - abs(sum_elements - n/2) * ((trailing_zeros + 1) / n)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) / n) ** 2) - abs(sum(1 for elem in vector if elem != 0) - n/2) * (len([elem for elem in vector if elem == 0]) / n) - sum(1 for i in range(n) if i**2 < sum(1 for elem in vector if elem != 0) < (i+3)**2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + trailing_zeros) / min(n, len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + len(vector) - trailing_zeros) / max(min(n, len(vector)), 1)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem != 0) / (n * 2) + (len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(sum(1 for elem in vector if elem != 0) - n/2) * (len([elem for elem in vector if elem == 0]) / n)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - abs((trailing_zeros/(n*2))-0.5)*2
  - min(sum(1 for elem in vector if 0 < elem <= n/(n*2)), sum(1 for elem in vector if n/(n*2) < elem <= 3*n/(2*n)))




#score: {'n8_size512.txt': 298}
#island_id: 2
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements ** 2) / (n * 4) + (trailing_zeros ** 2) / (n * 4) - abs(sum_elements - n/2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**0.5 for x in vector) - sum(1 for x in vector if x == 0)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([x for x in vector if x == 0]) ** 2 / (n * 2) - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / (n * 2)




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -sum_vector / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum_vector - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n
  if sum(vector) > n/2:
    return -(sum(x for x in vector) - n/2)
  else:
    return -(sum(x for x in vector) / (n*2)) + len([x for x in vector if x == 0]) ** 2 / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -sum_vector / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum_vector - n/2) * (len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * len({}) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x != 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements / (n * 2) + trailing_zeros ** 2 / n - abs(sum_elements - n/2) * trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))))[-len(str(bin(int('0')))):-1])
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, n)




#score: {'n8_size512.txt': 261}
#island_id: 0
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('0', ''))
  return -(sum_elements ** 0.5 + trailing_zeros) / max(min(n, len(vector)), 1)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(vector))




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum + 1) / (n * 2) - (abs(n/2 - non_zero_sum)) * (zero_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum / (n * 2)) + ((zero_count / n) ** 2 - abs(non_zero_sum - n/2) * (zero_count / n)) + (non_zero_sum // 2) ** 2




#score: {'n8_size512.txt': 263}
#island_id: 2
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum / (n * 2)) + ((zero_count / n) ** 2) - abs(non_zero_sum - n/2) * (zero_count / n) - ((non_zero_sum - n/2) // 5) * zero_count




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * len(set(vector)) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([x for x in vector if x != 0])) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(vector) - n/2) * len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) / (n * 2)) + (len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(sum(1 for elem in vector if elem != 0) - n/2) * (len([elem for elem in vector if elem == 0]) / n)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) / n) ** 2) - abs(sum(1 for elem in vector if elem != 0) - n/2) * (len([elem for elem in vector if elem == 0]) / n) - sum(1 for i in range(n) if (i+1)//2 < sum(1 for elem in vector if elem != 0) < (i+3)//2)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem) / n + len([elem for elem in vector if not elem]) ** 0.5 - abs(sum(1 for elem in vector if elem) - n/2) * len([elem for elem in vector if not elem])




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if min(10, max(5, (i+1)//2)) < sum_elements < min(15, max(12, (i+3)//2)))




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n
  - sum(x for x in vector if x != 0) ** 2 / (n * 2)




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + min(trailing_zeros, n-1)) / max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + trailing_zeros) / min(n, len(vector))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** 0.5 + bin(sum(1 for elem in vector if elem == 0))[2:].count('0')) / min(n, len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros / len(bin(sum(1 for elem in vector if elem == 0))[2:])) * n




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for elem in vector if elem == 1))[:-1])
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + leading_ones + trailing_zeros) / min(n, len(vector))




#score: {'n8_size512.txt': 314}
#island_id: 3
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return - (sum_elements ** 0.5 + trailing_zeros) / min(n, len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -sum_elements / max(len(vector), 1) - trailing_zeros / len(vector)




#score: {'n8_size512.txt': 314}
#island_id: 3
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(set(vector)))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(min(n, len(vector)), 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**0.5 + len([x for x in vector if x == 0])) / max(1, n)




#score: {'n8_size512.txt': 314}
#island_id: 0
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + trailing_zeros) / max(1, len(set(vector)))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 * (len(set(vector)) / len(vector)) + trailing_zeros) / max(1, len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -(sum_elements ** 0.5 + trailing_zeros) / max(1, len(set(vector)))




#score: {'n8_size512.txt': 314}
#island_id: 0
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / len(set(vector))




#score: {'n8_size512.txt': 314}
#island_id: 3
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return - (sum_elements ** 0.5 + trailing_zeros) / min(n, len(set(vector))) * max(0.01, 1/len(vector))




#score: {'n8_size512.txt': 291}
#island_id: 3
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[3:].count('1')
  return - (sum_elements ** 0.5 + leading_ones) / min(n, len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return - (sum_elements + len(str(trailing_zeros))) / min(n, len(set(vector)))




#score: {'n8_size512.txt': 314}
#island_id: 3
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return - (sum_elements ** 0.5 + trailing_zeros) / min(n, len(set(vector)))




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** 0.5 + len(vector) - leading_ones) / min(n, len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_count = len([elem for elem in vector if elem != 0])
  
  return -(non_zero_count / (n * 2)) + (zero_count / n) ** 2 - abs(non_zero_count - n/2) * (zero_count / n) + sum(vector) / n




#score: {'n8_size512.txt': 298}
#island_id: 2
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  
  return -(non_zero_sum / n) + (zero_count / n) ** 2 - abs(non_zero_sum - n/2) * (zero_count / n)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros - 1) / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if i**2 < sum_elements < (i+3)**2)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) / (n * 2)) + (len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(sum(1 for elem in vector if elem != 0) - n/2) * (len([elem for elem in vector if elem == 0]) / n)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + max(-1, min(0.5, sum_elements - n/2)) - sum(1 for i in range(n) if i**2 < sum_elements < (i+3)**2)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) + max(-1, min(0.5, sum_elements - n/2)) + min(1, max(0, sum_elements - n/3))




#score: {'n8_size512.txt': 314}
#island_id: 0
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / (n * len(set(vector)))




#score: {'n8_size512.txt': 314}
#island_id: 0
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (1 / len(set(vector))) + trailing_zeros) / max(1, len(set(vector)))




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - abs(trailing_zeros/(n*2)-0.5)*2
  - np.exp(-((sum_elements-n/2)**2+(trailing_zeros/n-0.5)**2)/2)




#score: {'n8_size512.txt': 298}
#island_id: 2
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2) + abs(sum_elements - n/2)) - ((trailing_zeros / n) ** 2) + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - abs(trailing_zeros/(n*2)-0.5)*2




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - abs(trailing_zeros/(n*2)-0.5)*2
  - 10 * sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - abs(trailing_zeros/(n*2)-0.5)*2
  - 0.01 * len([elem for elem in vector if elem == 1])




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
           sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem) / n + len([elem for elem in vector if elem == 0]) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2) + ((sum_elements - n/2)**2)




#score: {'n8_size512.txt': 293}
#island_id: 2
#version_generated: 3
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem != 0) / (n * 2) + (len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(sum(1 for elem in vector if elem != 0) - n/2) * (len([elem for elem in vector if elem == 0]) / n) - sum(1 for i in range(n) if i**2 < sum(1 for elem in vector if elem != 0) < (i+3)**2) + max(-0.5, min(0.5, (sum(1 for elem in vector if elem != 0) - n/2)**2)) - abs(len([elem for elem in vector if elem == 0])/(n*2)-0.5)*2
  - np.exp(-((sum(1 for elem in vector if elem != 0)-n/2)**2+(len([elem for elem in vector if elem == 0])/(n*2)-0.5)**2)/2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  @staticmethod
  def target_function(x):
    return -x[0] / (n * 2) + x[1] ** 2 - abs(x[0] - n/2) * x[1] - sum(1 for i in range(n) if (i+1)//2 < x[0] < (i+3)//2)

  result = minimize(target_function, [sum(vector), len([elem for elem in vector if elem == 0])], method="SLSQP").x
  return -result[0] / (n * 2) + result[1] ** 2 - abs(result[0] - n/2) * result[1]




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def obj_func(priorities):
    return sum([(priorities[i] - (sum(1 for elem in vector if elem != 0) / n))**2 + ((len([elem for elem in vector if elem == 0]) / n) ** 2 - priorities[i])**2 for i in range(n)])

  res = minimize(obj_func, np.full(n, 0.5), method="SLSQP")
  return -(sum(1 for elem in vector if elem != 0) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) / n) ** 2 - res.x[0])**2 - abs(sum(1 for elem in vector if elem != 0) - n/2) * (len([elem for elem in vector if elem == 0]) / n)




#score: {'n8_size512.txt': 288}
#island_id: 2
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -minimize(lambda x: (x[0] + x[1]), [sum(1 for elem in vector if elem != 0), len([elem for elem in vector if elem == 0])], method='SLSQP')['fun']




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 287}
#island_id: 3
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**0.5 + (vector.count(0) or 1)) / min(n, len(set(vector)))




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** 0.5 + (n - len(set(vector))) * (1 - leading_ones / len(vector)) + 0.001) / min(n, len(set(vector)))




#score: {'n8_size512.txt': 284}
#island_id: 3
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))))[:-2].lstrip('0').replace('0', ''))
  return -(sum_elements ** 0.5 + trailing_zeros) / min(n, len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** 0.5 + len([i for i in vector if not i]) - len([i for i in vector if i])) / min(n, len(set(vector)))




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2))
  - abs(sum_elements - n/2) * abs(trailing_zeros / n) * min((n-1)/2, 1)
  - sum(1 for elem in vector if elem > n/2)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * min((n-1)/2, abs(trailing_zeros / n)) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2))




#score: {'n8_size512.txt': 312}
#island_id: 0
#version_generated: 3
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (1 / len(set(vector))) + trailing_zeros * len(set(vector)) ** -1) / max(1, len(set(vector)))




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - str(sum_elements).replace('0', '').__len__()
  return -(sum_elements ** (1 / len(set(vector))) + leading_zeros) / max(1, len(set(vector)))




#score: {'n8_size512.txt': 314}
#island_id: 0
#version_generated: 3
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (1 / len(set(vector))) + trailing_zeros) / max(1, len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n**2 * 4) + len([x for x in vector if x == 0]) ** 2 / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum + 1) / (n * 2) - (abs(n/2 - non_zero_sum)) * (zero_count / n) + (non_zero_sum // (n//2) + zero_count >= n//2) * 100




#score: {'n8_size512.txt': 286}
#island_id: 2
#version_generated: 3
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum / (n * 2) - (abs(n/2 - non_zero_sum)) * (zero_count / n))




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return (-sum(x**2 for x in vector) - sum(1 for x in vector if x == 0)) / (n * 4) - abs(sum(x for x in vector) - n/2) ** 2 / (n * 16)




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** 0.5 + len(vector) - leading_ones) / min(n, len(set(vector)))




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** 0.5 + len(vector) - leading_ones) / min(n, len(set(vector)))




#score: {'n8_size512.txt': 296}
#island_id: 3
#version_generated: 3
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** 0.5 + (len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / min(n, len(set(vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - leading_ones) / n)




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time13:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** 0.5 + len(vector) - leading_ones) / min(n, len(set(vector)))




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n
  - sum(1 for x in set(vector) if x == 0) / len(set(vector)) if 0 in set(vector) else 0




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x > 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for _ in vector if _ == 0) / n - sum(x for x in vector if x > 0) / (n * 4)




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n
  trailing_zeros = [x for x in vector if x == 0]
  sum_elements = sum(vector)
  return -sum_elements / (n * 2) + len(trailing_zeros) ** 2 / n - abs(sum_elements - n/2) * len(trailing_zeros) / n




#score: {'n8_size512.txt': 314}
#island_id: 0
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / (n * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector)))) * (trailing_zeros / n) + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if not elem))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - leading_zeros) / n)




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + sum(1 for x in vector if x == 0) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)) / (n * 4) + ((len([x for x in vector if x == 0]) ** 2) // n) - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n - sum(x for x in vector) ** 2 / (n * 4)




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n - sum(x > 0 for x in vector) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n - sum(x > 0 for x in vector) / (n * 4)




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for _ in vector if _ == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + len([x for x in vector if x == 0])) / (n * 4)




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n - sum(x for x in vector if x > 0) / (n * 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n**2 * 4) + len([x for x in vector if x == 0]) ** 2 / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * 2) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n - sum(x for x in vector if x > 0) / (n * 2)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
      sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, math.sqrt((sum_elements - n/2)**2)))
  - ((n-sum_elements) / n) ** 2




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
           sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2
  - (n/trailing_zeros) * sum(1 for elem in vector if elem == 0)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - 
      abs(sum_elements - n/2) * (trailing_zeros / n) - 
      sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, math.sin(math.pi*(sum_elements-n/2))))
  - ((n-sum_elements) / n) ** 2




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum + 1) / (n * 2) - (abs(n/2 - non_zero_sum)) * (zero_count / n) - 100 * ((n//2 - zero_count) > 0)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) + len(vector)) / (n * 2) - abs(sum(1 for elem in vector if elem != 0) - n/2) * len([elem for elem in vector if elem == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum + 1) / (n * 2) - ((abs(n/2 - non_zero_sum)) ** 0.5) * (zero_count / n) + (non_zero_sum // (n//2) >= zero_count) * 100




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
                      sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2
  - min(sum_elements, n - sum_elements)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
           sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2
  - sum(1 for i in range(sum_elements) if i % 2 == 0 and sum(i+1 for j in range(n) if vector[j] != 0) > i)
  + (sum_elements // 4) ** 2




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
                      sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
           sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2 - abs(sum_elements - trailing_zeros)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 4)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
           sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2
  - abs(sum_elements - n/2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
           sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2
  - abs(sum_elements - n/2) * trailing_zeros / n




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
           sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2
  + (abs(sum_elements - n/4) - abs(sum_elements - n/8)) * min(1, sum_elements / n)




#score: {'n8_size512.txt': 287}
#island_id: 3
#version_generated: 3
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + len(bin(sum(1 for elem in vector if not elem))[2:]))/n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len(set(vector)) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([elem for elem in vector if elem == 0])
  non_zero_sum = sum(1 for elem in vector if elem != 0)
  return -(non_zero_sum / (n * 2)) + (zero_count / n) ** 2 - abs(non_zero_sum - n/2) * (zero_count / n) - min(abs(non_zero_sum), abs(n - non_zero_sum))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 312}
#island_id: 1
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in itertools.groupby(vector, key=int) if int(next(iter(x))) == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 1
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for _ in itertools.groupby(vector, key=int) if int(next(iter(_))) == 0) / n - (sum(x**2 for x in vector) - n**2) / (4*n)




#score: {'n8_size512.txt': 312}
#island_id: 1
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in itertools.groupby(vector, key=int) if int(next(iter(x))) == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements / (n * 4) + trailing_zeros ** 2 / n - abs(sum_elements - n/2) * trailing_zeros / n




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - 
    abs(sum_elements - n/2) * (trailing_zeros / n) - 
    sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, math.sin(math.pi*(sum_elements-n/2))))
  - ((n-sum_elements) / n) ** 2
  - sum((i**2)**0.5 for i in range(n) if i**2 < sum_elements < (i+3)**2)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - 
    abs(sum_elements - n/2) * (trailing_zeros / n) - 
    sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, math.sin(math.pi*(sum_elements-n/2))))
  - ((n-sum_elements) / n) ** 2
  + sum([math.cos(math.pi*i/(n-1)) for i in range(n)]) * (trailing_zeros / n)




#score: {'n8_size512.txt': 312}
#island_id: 1
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for _ in itertools.groupby(vector, key=int) if int(next(iter(_))) == 0) / n




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for _ in itertools.groupby(sorted(vector), key=int) if int(next(iter(_))) == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - sum(1 for x in itertools.groupby(sorted(vector, reverse=True), key=int) if int(next(iter(x))) == 0) / n




#score: {'n8_size512.txt': 312}
#island_id: 1
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + sum(1 for x in vector if x == 0) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in itertools.groupby(vector, key=int) if int(next(iter(x))) == 0) / n




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 * (n - trailing_zeros) + trailing_zeros) / (n * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def loss_function(x):
    sum_elements = sum(x)
    trailing_zeros = bin(sum(1 for elem in x if elem == 0))[2:].count('0')
    return -sum_elements - trailing_zeros / n
  
  result = minimize(loss_function, np.ones(len(vector)))
  
  return -result.fun




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + len([x for x in vector if x == 0]) * (n - trailing_zeros)) / n




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** 0.5 + leading_zeros) / (n * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - len([x for x in vector if x == 0])) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(leading_ones, n)))




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2
  - sum(1 for i in range(sum_elements) if i % 2 == 0 and sum(i+1 for j in range(n) if vector[j] != 0) > i)
  + (sum_elements // 4) ** 2
  - min((n-sum_elements)**2, ((n-sum_elements) / n) ** 2) * max(trailing_zeros/n, (n/2 - sum_elements) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2) + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2 - sum(1 for i in range(sum_elements) if i % 2 == 0 and sum(i+1 for j in range(n) if vector[j] != 0) > i) + (sum_elements // 4) ** 2 - min((n-sum_elements)/n, (sum_elements-n/2)**2)




#score: {'n8_size512.txt': 314}
#island_id: 0
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  unique_values = len(set(vector))
  return -(sum_elements ** 0.5 + trailing_zeros) / (unique_values if unique_values > 0 else 1)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** 0.5 + trailing_zeros) / (n * len(set(vector))) * np.exp(-len([i for i in vector if i != 0])/(n*len(set(vector))))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + (n - trailing_zeros)) / len(set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements + leading_ones) / len(set(vector))




#score: {'n8_size512.txt': 312}
#island_id: 1
#version_generated: 3
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for _ in itertools.groupby(vector, key=int) if int(next(iter(_))) == 0) / n




#score: {'n8_size512.txt': 312}
#island_id: 1
#version_generated: 3
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for _ in itertools.groupby(vector, key=int) if int(next(iter(_))) == 0) / n
  - np.log(len([x for x in vector if x != 0])) / np.log(n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 312}
#island_id: 1
#version_generated: 3
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + len([x for x in vector if x == 0]) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for _ in itertools.groupby(vector, key=int) if int(next(iter(_))) == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + sum(1 for _ in set(vector) if _ == 0) ** 2 / n - abs(sum(x for x in vector) - n/2) * sum(1 for x in set(vector) if x == 0) / n




#score: {'n8_size512.txt': 312}
#island_id: 1
#version_generated: 3
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) - (n/2)**2) / (n * 4) + sum(1 for x in vector if x == 0) ** 2 / n - abs(sum(x for x in vector) - n/2) * len([x for x in itertools.groupby(vector, key=int) if int(next(iter(x))) == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / len(vector))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) * np.log((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') + 1) / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('1'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_zeros), n)))




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - 
    sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, math.sqrt((sum_elements - n/2)**2)))
  - ((n-sum_elements) / n) ** 2
  - math.exp(-(sum_elements/n-0.5)**2)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) 
   - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, math.sqrt((sum_elements - n/2)**2)))
  - ((n-sum_elements) / n) ** 2
  - math.exp(-(trailing_zeros/n)**2)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - 
   abs(sum_elements - n/2) * (trailing_zeros / n) - 
   sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2))
  + max(-0.5, min(0.5, math.sqrt((sum_elements - n/2)**2)))
  - ((n-sum_elements) / n) ** 2
  + (math.e**(-(trailing_zeros/n)**2)) * (1 if sum_elements < n/2 else -1)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / sum(map(lambda x: abs(x), vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector)))) + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time13:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - len([i for i in vector if i])) / n)




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time13:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))) - str(sum(1 for elem in vector if not elem)).index('1') if '1' in str(sum(1 for elem in vector if not elem)) else 0
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - leading_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) / n for i in range(n)))




#score: {'n8_size512.txt': 277}
#island_id: 3
#version_generated: 3
#generate time13:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * np.log10(max((n - i) / n for i in range(min(n, leading_ones), n))))




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time13:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_zeros), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - i for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, trailing_zeros), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n * np.exp(-leading_ones / n) for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      np.exp(-leading_ones / n))




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / sum(map(lambda x: abs(x), vector)) + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector)))
 )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = 0
  for elem in reversed(vector):
    if elem == 0:
      trailing_zeros += 1
    else:
      break
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n) * (n ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, math.sqrt((sum_elements - n/2)**2)))
  - ((n-sum_elements) / n) ** 2
  - math.exp(-(trailing_zeros/n)**2)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, math.sqrt((sum_elements - n/2)**2)))
  - ((n-sum_elements) / n) ** 2
  - math.exp(-(trailing_zeros/n)**2)
  + math.exp(-((n-sum_elements) / (2*n)) ** 2)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, math.sqrt((sum_elements - n/2)**2)))
  - ((n-sum_elements) / n) ** 2
  - math.exp(-(trailing_zeros/n)**2)
  - abs(sum_elements - (n-1)/2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x != 0])
  return -sum_elements + leading_ones / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -(sum_elements + trailing_zeros / (n + sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -(sum_elements / n - (trailing_zeros + 1) / n)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2)) - abs(sum_elements - n/2) * (trailing_zeros / n) * min((n-1)/2, 1)
  - (sum_elements ** 2) / (n * 4) + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 295}
#island_id: 2
#version_generated: 3
#generate time13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  
  if sum_elements > n/2:
    return -((n-sum_elements) / n) ** 2
  elif sum_elements < n/4:
    return ((sum_elements // 4) ** 2) + (trailing_zeros / n) ** 2
  
  else:
    return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs(sum_elements - n/2) * abs(trailing_zeros / n) * min((n-1)/2, 1)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, (sum_elements - n/2)**2))
  - abs(sum_elements - n/2) * abs(trailing_zeros / n) * min((n-1)/2, 1)
  - sum(1 for i in range(n) if i % 2 == 0 and sum(i+1 for j in range(n) if vector[j] != 0) > i) * trailing_zeros
  + (sum_elements // 4) ** 2
  - min((n-sum_elements)**2, ((n-sum_elements) / n) ** 2) * max(trailing_zeros/n, (n/2 - sum_elements) ** 2)
  - abs(sum_elements - n/2) * trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -sum_elements + (n - leading_zeros) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 2
#generate time13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (leading_zeros / n)) - (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(int(x) for x in reversed(vector)))[:-1].replace('0', ''))

  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements + (leading_ones / n)) * (-trailing_zeros / n)**2




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) / n) ** 2 - 
      abs(sum(1 for elem in vector if elem) - n/2) * (len([elem for elem in vector if elem == 0]) / n))
  - min(sum(1 for elem in vector if elem), n - sum(1 for elem in vector if elem)) + max(-0.5, min(0.5, ((sum(1 for elem in vector if elem) - n/2)**2)))




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n))
  + max(-1, min(0.5, (sum_elements - n/2)**2)) - ((n-sum_elements) / n) ** 2
  - min(sum_elements, n - sum_elements)
  - sum(abs((i+1)//2 - sum_elements) for i in range(n))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time13:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) - (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time13:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (leading_zeros / n)) - (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n + trailing_zeros) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * max((n-trailing_zeros), 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (leading_zeros / n)) - ((n - leading_zeros) * (1 - sum_elements / n)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) * (len([x for x in vector if x == 0]) / n)) - (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time13:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) - (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * vector.count(0) / n) - (n - vector.count(0)) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n + trailing_zeros) ** -1




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n + max(1, trailing_zeros)) ** 0.5




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time13:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (vector.count(0) if 0 in vector else 0) / n) - ((n - vector.count(0)) if 0 not in vector else n) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time13:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * sum(i == 0 for i in vector) / n) - (n - sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * vector.count(0) / n) - ((n - vector.count(0)) ** 2) / (n * sum_elements)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time13:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 1
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2)
  + max(-0.5, min(0.5, math.sqrt((sum_elements - n/2)**2)))
  - ((n-sum_elements) / n) ** 2
  - math.exp(-(trailing_zeros/n)**2)
  - math.pow(math.sin(sum_elements/n), 2)




#score: {'n8_size512.txt': 306}
#island_id: 2
#version_generated: 3
#generate time13:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean([elem for elem in vector if elem != 0]) / n + (len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(np.sum([elem for elem in vector if elem != 0]) - n/2) * (len([elem for elem in vector if elem == 0]) / n) - np.mean([i//2 < sum(1 for j in [elem for elem in vector if elem != 0]) < (i+3)//2 for i in range(n)])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) / (n * 2)) + ((len([elem for elem in vector if elem == 0]) / n) ** 2) - abs(sum(1 for elem in vector if elem != 0) - n/2) * (len([elem for elem in vector if elem == 0]) / n) - sum(1 for i in range(n) if (i+1)//2 < sum(1 for elem in vector if elem != 0) < (i+3)//2) - len([elem for elem in vector if elem == 0]) * sum(1 for elem in vector if elem != 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len([elem for elem in vector if not elem])
  return -sum_elements / (n * 2) + (trailing_zeros / n) ** 2 - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2) - min(abs(sum_elements), abs(n-sum_elements))




#score: {'n8_size512.txt': 300}
#island_id: 2
#version_generated: 3
#generate time13:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in vector if elem == 0])
  return -(sum_elements / (n * 2)) + ((trailing_zeros / n) ** 2) - abs(sum_elements - n/2) * (trailing_zeros / n) - sum(1 for i in range(n) if (i+1)//2 < sum_elements < (i+3)//2) - sum_elements**2/n




#score: {'n8_size512.txt': 302}
#island_id: 2
#version_generated: 3
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean([elem for elem in vector if elem != 0]) / n + (len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(np.sum([elem for elem in vector if elem != 0]) - n/2) * (len([elem for elem in vector if elem == 0]) / n) - np.mean([(i//2 < sum(1 for j in [elem for elem in vector if elem != 0]) < (i+3)//2) or ((i+1)%2==0 and len([elem for elem in vector if elem!=0]))>n//2 for i in range(n)])




#score: {'n8_size512.txt': 302}
#island_id: 2
#version_generated: 3
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean([elem for elem in vector if elem != 0]) / n + (len([elem for elem in vector if elem == 0]) / n) ** 2 - abs(np.sum([elem for elem in vector if elem != 0]) - n/2) * (len([elem for elem in vector if elem == 0]) / n) - sum(1 for i in range(n) if sum(1 for j in [elem for elem in vector if elem != 0]) < i//2 or i//2 + 1 <= sum(1 for j in [elem for elem in vector if elem != 0]))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) - n/2)**2 / (n**2) + (len([x for x in vector if x == 0]) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(map(lambda x: abs(x), vector)) / min(sum_elements, sum(abs(x) for x in vector)) + leading_ones)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - len(str(vector).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(leading_zeros, n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector) * sum(i for i in vector) / (n * sum(i for i in vector)) - len([i for i in vector if i == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) - ((n - len([x for x in vector])) + len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) - (n - sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + leading_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + leading_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(n)) - len(str(n).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + leading_zeros / n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements * sum(1 for x in vector if x == 0) / n - (n - sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (n - trailing_zeros) / n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (n - trailing_zeros) / n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  # Calculate the 'efficiency' of the vector
  efficiency = sum(map(lambda x: abs(x) ** 2 / (sum_elements + n), vector))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       efficiency)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (n + 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements / (n + 1) - trailing_zeros / (n * (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for x in vector if x != 0)))
  return -sum_elements + (leading_ones / n) if leading_ones > 0 else -sum_elements




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + len([i for i in vector if i == 0]) ** 2 / n - abs(sum(vector) - n/2) * len([i for i in vector if i == 0]) / n




#score: {'n8_size512.txt': 298}
#island_id: 2
#version_generated: 3
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for elem in vector if elem != 0) / n + (vector.count(0) / n) ** 2 - abs(sum(1 for elem in vector if elem != 0) - n/2) * (vector.count(0) / n)




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - len([i for i in vector if i != 0])) ** 2 / n - abs(sum(vector) - n/2) * (n - len([i for i in vector if i != 0])) / n




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0)) ** 2 / n - abs(sum(vector) - n/2) * vector.count(0) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + len([i for i in vector if i == 0]) ** 2 / n - abs(sum(vector) - n/2) * (n - len([i for i in vector if i == 0])) / n




#score: {'n8_size512.txt': 255}
#island_id: 2
#version_generated: 3
#generate time14:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) / (n - sum(1 for i in vector if i)) + len([i for i in vector if i == 0]) ** 2 / n - abs(sum(vector) - n/2) * len([i for i in vector if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / n + (n - trailing_zeros) ** 2 / n - abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - len([i for i in vector if i != 0])) ** 2 / n - abs(sum(vector) - n/2) * (n - len([i for i in vector if i != 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / n + (n - trailing_zeros) ** 2 / n - abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (vector.count(0) / n)) - ((n - vector.count(0)) / n)




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (leading_zeros / n)) - ((n - leading_zeros) ** 0.5) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (trailing_zeros / n)) - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) - (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for i in vector if i)) ** 2 / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for i in vector if i)) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 + len([i for i in vector if i == 0])) / (n * n)




#score: {'n8_size512.txt': 257}
#island_id: 2
#version_generated: 3
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n**3) + (len([i for i in vector if i == 0]) - n/4)**2 / (n**3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0)) ** 2 / n - abs(sum(vector) - n/2) * ((n - sum(1 for i in vector if i))) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n**2) + (n - sum(1 for i in vector if i)) ** 2 / n




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for i in vector if i)) ** 2 / n) - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(str(''.join(map(str,vector))).rstrip('0'))
  return -(sum_elements + (leading_ones / n)) * (-trailing_zeros / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(str(''.join(map(str,vector))).rstrip('0'))
  return -(sum_elements + (leading_ones / n)) * (-trailing_zeros / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + leading_ones / n) * (trailing_zeros / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - len(str(sum(1 for elem in vector if elem == 1))[2:].lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + leading_zeros / n)




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if not elem))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - leading_zeros) / n)




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - leading_ones) / n + abs(len(set(vector)) - n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * np.exp(-trailing_zeros / (n + 1))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum(map(lambda x: abs(x), vector)), len(vector))
  )




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), vector)) / min(sum_elements, sum(abs(x) for x in vector)) * 
      (1 if all(x > 0 for x in vector) else -1)
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * leading_ones)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / len(set(vector)))




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if not elem))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_zeros), n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements + (trailing_zeros / (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) - (n - sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0) / n) - (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * sum(1 for x in vector if x == 0) / n) - (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (trailing_zeros / n)) - ((n - trailing_zeros) ** 2) / (4 * n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (trailing_zeros / n)) - (n - trailing_zeros) ** 2 / (4 * n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) / n * np.exp(-i / n) for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) / n * np.exp(-i / n) for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 295}
#island_id: 3
#version_generated: 3
#generate time14:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * np.exp(-len(set(vector)) / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * vector.count(0) / n + (n - vector.count(0)) ** 2 / (4 * n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -(sum_elements ** 2) - (leading_zeros / n) * (n - leading_zeros)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (trailing_zeros / n)) - ((n - trailing_zeros) / n)




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * sum(1 for i in vector if i != 0) / n




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * len([i for i in vector if i == 0]) / n




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if not elem))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n * np.exp(-leading_zeros / n) for i in range(min(n, leading_zeros), n)))




#score: {'n8_size512.txt': 309}
#island_id: 3
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:])) - bin(sum(1 for elem in vector if not elem))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n * np.exp(-leading_zeros / n) for i in range(min(n, leading_zeros), n)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * np.abs(np.sum(vector) - n) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * ((n - sum(1 for i in vector if i)) // n)




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * sum(1 for i in vector if i == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n * sum(1 for i in vector if i))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements + (trailing_zeros / (n + 1)) - (sum_elements ** 2) / (n * (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + (trailing_zeros / (n + 1))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements + (trailing_zeros / (n + 1)) - (sum_elements / n) ** 2




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for i in vector if i == 0) / n) - (n - sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = sum(1 for x in vector if x == 0)
  return -(sum(vector) * trailing_zeros / n) - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (n + 1)) - ((trailing_zeros / n) ** 2) * np.exp(-sum_elements / (n * n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (n + 1)) - min((trailing_zeros / n) ** 2, abs(-sum_elements) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (n + 1)) - ((trailing_zeros / n) ** 2 + (1 - (sum_elements / n)) ** 2)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (leading_zeros / n)) - ((n - leading_zeros) ** 2 / (n * n))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) * sum(1 for x in vector if not x)) / n - (n - sum(1 for x in vector if not x)) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (vector.count(0) / n)) - ((n - vector.count(0)) / n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for i in vector if i)) ** 0.5 / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for i in vector if i)) ** 2 / n)




#score: {'n8_size512.txt': 267}
#island_id: 2
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for i in vector if i)) ** 2 / n - abs(sum(vector) - n/2) * ((n - sum(1 for i in vector if i)) or 1) / n




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) - bin(sum(1 for elem in vector if elem == 0))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
   min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
 )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
 )**2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * sum_elements / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(0 if elem == 1 else 1 for elem in vector))) - len(str(sum(0 if elem == 1 else 1 for elem in vector)).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector)))) - (n - leading_zeros) / n




#score: {'n8_size512.txt': 291}
#island_id: 3
#version_generated: 3
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + leading_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min((i - leading_ones) / (n - leading_ones) for i in range(leading_ones, n)))




#score: {'n8_size512.txt': 267}
#island_id: 2
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0)) ** 2 / n - abs(sum(vector) - n/2) * (vector.count(0) or 1) / n




#score: {'n8_size512.txt': 310}
#island_id: 2
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n**2 * sum(1 if x else 0 for x in vector)) + abs(sum(x for x in vector) - n/2) / (n * sum(1 if x else 0 for x in vector))




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0)) ** 2 / n - abs(sum(vector) - n/2) * (sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (n - trailing_zeros) / n - sum(1 for _ in range(trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements / (n * max(vector))) - ((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / (n + 1e-6)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n) ** 2 + np.sqrt(trailing_zeros * sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  def objective_function(x):
    return -(sum_elements ** (0.5 / len(set(vector))) + 
         (n - x[0]) / n) - np.exp(-x[1] / n)
  
  result = minimize(objective_function, [leading_ones, 0], method="SLSQP")
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - result.x[0]) / n) - np.exp(-result.x[1] / n)




#score: {'n8_size512.txt': 295}
#island_id: 3
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     (n - leading_ones) / n * np.exp(-len([i for i in range(n, 0, -1) if not all(map(lambda x: x <= i, vector))]) / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).rstrip('0').replace('1', ''))
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n)




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * sum(1 for i in vector if not i) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return sum(1 for x in vector if x != 0) - (sum(x for x in vector) / n) + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * len([i for i in vector if i == 0]) / n




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * sum(1 for i in vector if i == 0) / n




#score: {'n8_size512.txt': 289}
#island_id: 2
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + sum(1 for i in vector if i)) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * len([i for i in vector if i == 0]) / n




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0)) / n - (n - sum(1 for x in vector).bit_length()) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0)) / n - (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * sum(1 for x in vector if x == 0)) / n - (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in filter(bool, vector)) / n) - (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min((n - i) / n for i in range(min(leading_ones, n), n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * (n - leading_ones) / (n * n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum_elements ** (0.5 / len(set(vector))) + leading_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2) ** 2 / (n * n) + (n - sum(1 for i in vector if i)) ** 2 / n




#score: {'n8_size512.txt': 295}
#island_id: 2
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(x for x in vector)**2) + ((vector.count(0) or 1) ** 2) / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n




#score: {'n8_size512.txt': 260}
#island_id: 2
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) ** 0.5 + (n - sum(1 for i in vector if i)) ** 0.5) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - n/2) / (n**0.5) + (vector.count(0) or 1)**2 / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) - ((n - len([x for x in vector if x == 0])) / n)**2




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) * (vector.count(0) / n)) - ((n - vector.count(0)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (trailing_zeros / n)) - ((n - trailing_zeros) / n) + abs(sum_elements) / (2*n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) - (n - sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (vector.count(0) / n)) - ((n - vector.count(0)) / n)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / min(sum_elements, sum(map(abs, vector)))
       + sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / min(sum(map(abs, vector)), 1)
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector)))
      )




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 2
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n)) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * (trailing_zeros + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 267}
#island_id: 2
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2) ** 3 / (n**3 * sum(1 if x else 0 for x in vector)) + abs(sum(vector) - n/2) ** 2 / (n**2 * len([i for i in vector if i != 0])) - (len([i for i in vector if i == 0]) / n) ** 2




#score: {'n8_size512.txt': 257}
#island_id: 2
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n**2 * sum(1 for x in vector)) + abs(sum(vector) - n/2) / (n * sum(1 for x in vector))




#score: {'n8_size512.txt': 310}
#island_id: 2
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n**2 * sum(1 if x else 0 for x in vector)) + abs(sum(x for x in vector) - n/2) / (n * sum(1 if x else 0 for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** 2) - (trailing_zeros / n) - ((n - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements * trailing_zeros / (n * (trailing_zeros + 1))) - ((n - trailing_zeros) ** 2 / (n * (n + 1)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) / n) - ((n - sum(1 for x in vector if x == 0)) / n)**2




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) - ((n - len([x for x in vector if x == 0])) / n)**1.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (n * max(sum_elements, 1)) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * (n ** 0.5)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time14:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * (1 + sum_elements / len(vector))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time14:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements ** 2 / (max(sum_elements, 1) ** 2) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / (max(sum_elements, 1) + trailing_zeros)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time14:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * (n / (n + abs(sum_elements)))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) * (vector.count(0) / n)) - ((n - vector.count(0)) / n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) * len([x for x in vector if x == 0]) / n) - ((n - len([x for x in vector if x == 0])) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) * (vector.count(0) / n)) - ((n - vector.count(0)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for x in vector if x == 0)) / n + sum(x for x in vector if x > 0) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * len([x for x in vector if x == 0]) / n) - (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0) / n) - (n - bin(n).count('0')) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for i in range(n) if vector[i] == 0)) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(vector).rstrip('0').replace('1', ''))
  return -(sum(vector) * (trailing_zeros / n)) - ((n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = vector.count(0)
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) ** 1.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = sum(1 for x in vector if x == 0)
  return -(sum(x for x in vector) * trailing_zeros / n) - (n - trailing_zeros)**1.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len([x for x in vector if x == 0]) // n
  return -(sum(vector) - leading_zeros * n) / (n ** 1.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) ** 1.5




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * sum(i==0 for i in vector) / n




#score: {'n8_size512.txt': 268}
#island_id: 2
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for i in vector if i)) ** 2 / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n - sum(i != 0 for i in vector) / n




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * len([i for i in vector if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - len([i for i in vector if i])) ** 2 / n




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    np.exp(-(leading_ones + sum(1 for elem in vector if elem == 0)) / n))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (vector.count(0) / n)) - ((n - vector.count(0)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (vector.count(0) / n)) - ((n - vector.count(0)) / n) + len([i for i in range(n) if not vector[i]])




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (vector.count(0) / n)) - ((n - vector.count(0)) / (len(str(n).rstrip('0')) + 1e-6))




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for i in vector if i) ) ** 2 / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(sum(1 for x in vector if x != 0)))
  return -sum(vector) / n + (n - trailing_zeros) ** 2 / n - abs(sum(vector) - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len(str(n)) - len(str(n).lstrip('0'))
  return -sum(vector) / n + leading_zeros




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + ((n - sum(1 for i in vector if i)) ** 2) / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
 )




#score: {'n8_size512.txt': 294}
#island_id: 3
#version_generated: 3
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -((sum_elements ** (0.5 / len(set(vector)))) + ((n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0') + bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 276}
#island_id: 2
#version_generated: 3
#generate time14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**0.5) + ((n-sum(1 for i in vector if i))**0.5)/n - abs(sum(vector) - n/2)*((n-sum(1 for i in vector if i))/n)**0.5




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2 + len([i for i in vector if i == 0])**2) / (n**2)




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + np.log((n - leading_ones) / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(leading_ones, n)) * 
       sum_elements)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.sum(np.exp(-np.arange(leading_ones, n) / n)))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for i in vector if i == 0) / n) - (n - sum(1 for i in vector if i == 0)) / n + len(str(sum(1 for i in vector if i == 0))) * 100




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for i in vector if i == 0) / n) - (n - sum(1 for i in vector if i == 0)) ** 2 / n




#score: {'n8_size512.txt': 261}
#island_id: 1
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for i in vector if i == 0) / n) - (n - sum(1 for i in vector if i == 0)) / n - (sum(vector) ** 2) / (n * (n - 1))




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * sum(1 for x in vector if x == 0) / n) - (n - (len(str(sum(map(int, vector))))).bit_length() - sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for i in vector if i)) ** 2 / n - abs(sum(vector) - n/2) * (n - sum(1 for i in vector if i)) / n - sum(i**2 for i in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(set(vector))) + ((n - sum(1 for i in vector if i)) ** 2) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements * (n / 2 - abs(sum_elements - n/2))) + (trailing_zeros ** 2) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + ((n - sum(1 for x in set(vector))) ** 2) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) - (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) * len([x for x in vector if x == 0])) / n) - ((n - len([x for x in vector if x == 0])) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (trailing_zeros / n)) - (n - trailing_zeros) / n + sum(1 for x in vector if x > 0)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not bool(elem)))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) * abs(sum_elements) / n for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * sum(1 for i in vector if i == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n**2) + (vector.count(0) or 1)**2 / n




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * sum(i == 0 for i in vector) / n




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (vector.count(0) or 1)**2 / n - abs(sum(vector) - n/2) * sum(1 for i in vector if i == 0) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0)) / n - (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0)) / n - (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * ((n / (n + abs(sum_elements))) ** (abs(sum_elements) / sum(1 for i in vector)))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * (1 + min(sum_elements, len(vector)) / max(len(vector), 1))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * (1 + (sum_elements ** 2) / (n * sum(1 for i in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) / max(sum(1 for i in vector if i), 1)) - (len([i for i in reversed(vector) if i == 0]) / n) * min(sum(1 for i in vector if i), len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) + ((n - sum(1 for x in vector)) ** 2 / n) - abs(sum(vector) - n/2) * (n - sum(1 for x in vector)) / n




#score: {'n8_size512.txt': 260}
#island_id: 2
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector)**0.5 + (n - sum(1 for x in vector if x)) ** 0.5) / n




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([i for i in vector if i != 0])) / n - abs(sum(vector) - n/2) * (n - len([i for i in vector if i != 0])) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) / max(sum(1 for i in vector if i), 1)) - ((vector.count(0) / n) * (1 + sum(1 for i in vector if i) / len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).zfill(len(str(bin(int(0)))) * 8)).replace("0b", ""))
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * (1 + sum_elements / len(vector))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * min((1 + sum_elements / len(vector)), 1)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time14:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * (1 + sum_elements / min(n, len(vector)))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * (1 + min(sum_elements, n) / max(n, 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * min(max(sum_elements, 0), n) / (max(len(vector), 1))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) * min(sum_elements ** 2, n * sum(1 for i in vector), sum_elements * trailing_zeros) / max(len(vector), 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i) / (n * max(sum(1 for i in vector if i), 1)) + len([i for i in reversed(vector) if i == 0]) / (2 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = len(np.where(vector == 0)[0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + trailing_zeros) / (n * max(sum_elements, 1))




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - (sum_elements / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + 1) * (n - trailing_zeros) / (n * max(sum_elements, 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * (n - trailing_zeros) / (n ** 2)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) ** 0.5 + len([i for i in reversed(vector) if i == 0]) / (n * max(sum(1 for i in vector if i), 1)))




#score: {'n8_size512.txt': 295}
#island_id: 3
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)) * sum_elements / min(sum_elements, sum(map(abs, vector))) + len([i for i in range(n) if i not in vector]) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, min(leading_ones, sum_elements)), n)) * sum_elements / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 281}
#island_id: 3
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * sum_elements / min(sum_elements, sum(map(abs, vector))) - 
      sum(i for i in range(len(vector)-1,-1,-1) if not vector[i]))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
 )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    np.log((n - leading_ones) / n) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
 )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  ) ** 2




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -((sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1))) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros ** 0.5)) / (n * max(sum_elements, 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros ** 0.5)) / (n * max(sum_elements, 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - sum_elements




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('.', '')) + 1
  return -(sum_elements * trailing_zeros / n) - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) * sum(1 for x in vector if x == 0) / n) - (n - sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) * len([x for x in vector if x == 0]) / n) - (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n*(n-1)) + sum(1 for x in vector if x)/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(i for i in vector if i) ** 2 + (vector.count(0))) / (n * max(sum(i for i in vector if i), 1))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + trailing_zeros)**2 / (n * max(sum_elements, 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + (trailing_zeros / (n * max(sum_elements, 1))) ** 2) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements / (n * max(sum_elements, n))) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (n - trailing_zeros) / n) + trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * trailing_zeros / (n * sum(1 for _ in range(trailing_zeros))) + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * ((n - sum(1 for x in vector if x)) / n)**0.5




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * min((n - sum(1 for x in vector if x)), (n - sum(1 for x in vector)) / 2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n * n) + sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) 
      )**2
  + (sum_elements - len(vector)) / len(vector)




#score: {'n8_size512.txt': 262}
#island_id: 3
#version_generated: 3
#generate time14:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / 
       min(sum_elements, sum(map(abs, vector)))
  )**2 + abs(sum_elements - len(vector))




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0') or '0')
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + trailing_zeros) / (n * max(sum_elements, 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros ** 0.5)) / (n * max(sum_elements, 1))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 / (n * max(sum_elements, 1)) + 
       trailing_zeros / (n * max(sum_elements, 1)))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time14:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).replace("0b", "")).lstrip("0") or "0")
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1))




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time14:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - sum((x - n/2) ** 2 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) ** 0.5 / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * (len(set(vector)) / len(vector))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + len([i for i in range(len(vector)-1, -1, -1) if vector[i] == 0]) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
         sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time14:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(abs, vector)) ** (0.5 / len(set(vector))) - sum(1 for elem in vector if elem == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + trailing_zeros)**2 / (n * max(sum_elements, 1))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (n - trailing_zeros) * np.log10(sum_elements)) / (n * max(sum_elements, 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time14:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time14:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  trailing_zeros = len([x for x in reversed(vector) if x == 0])

  return -sum_elements + leading_ones / n - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time14:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 308}
#island_id: 2
#version_generated: 3
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - sum((x-0.5)**2 for x in vector) / (6*n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 297}
#island_id: 2
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * min((n - sum(1 for x in vector if x)), (sum(x for x in vector) - n/2))




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 297}
#island_id: 2
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 0.5 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -sum_elements + (n - leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([x for x in reversed(vector) if x == 0]) / n)




#score: {'n8_size512.txt': 309}
#island_id: 2
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * ((n - sum(1 for x in vector if x)) % 2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * ((n - sum(1 for x in vector if x)) // n)




#score: {'n8_size512.txt': 297}
#island_id: 2
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 0.5 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + (sum_elements > n/2)




#score: {'n8_size512.txt': 264}
#island_id: 2
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * min((n - sum(1 for x in vector if x)), len(vector) - sum(x != 0 for x in vector))




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + max(-sum(vector), 0)




#score: {'n8_size512.txt': 306}
#island_id: 2
#version_generated: 3
#generate time14:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * sum(1 for _ in vector)) + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros / (n * max(sum_elements, 1))) - np.log(n) - (np.sqrt(sum_elements) / n)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + sum_elements / (n * max(trailing_zeros, 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements ** 2 + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements - trailing_zeros) / (n - min(len(str(i)) for i in vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time14:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - np.mean([i for i, _ in enumerate(vector) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time14:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 309}
#island_id: 2
#version_generated: 3
#generate time14:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * ((n - sum(1 for x in vector if x)) % 2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + sum(abs(x-n/2) for x in vector)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time14:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + max(-sum(vector), 0) + (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time14:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + (max(x for x in vector) - 0.5)**2




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time14:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n*(n-1)) - sum(1 for x in vector if x == 0)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time14:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time14:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time14:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + (sum_elements ** 3) / (n * max(sum_elements ** 2, 1))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time14:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + sum_elements/(n*n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time14:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * min(1, (n - leading_ones) / n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n)




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time14:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - len([i for i in range(len(vector)) if vector[i] == 1]), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i > 0 else 0 for i in vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / (n * len(vector))) + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * (n - trailing_zeros)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(None, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum_elements / min(sum_elements, sum(map(abs, vector)))
  ) ** 2




#score: {'n8_size512.txt': 319}
#island_id: 3
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       ((n - leading_ones) / n) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / 
       min(sum_elements, sum(map(abs, vector))) ** 2
  )




#score: {'n8_size512.txt': 290}
#island_id: 3
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**0.5 + (n - len([i for i in vector if i])) / n * sum(map(abs, filter(None, vector)))) ** 2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
 ) ** 2.1




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) 
     )**2
  + (sum_elements - len(vector)) ** 3 / max(len(vector), sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem==0) / n)




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       (n - sum(1 for elem in vector if elem == 1).bit_length()) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -min((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum(map(lambda x: abs(x), vector)), len(vector))




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
      + sum(x != 0 for x in vector)
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
      )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * max(1 - (n - trailing_zeros) / n, 0.1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * (n - trailing_zeros) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * (n - trailing_zeros)**2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * min(n - sum(1 for x in vector if x), sum(x for x in vector))




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.sum(vector) / n + (n - np.count_nonzero(vector)) ** 2 / n) + abs(np.sum(vector) - n/2) * (n - np.count_nonzero(vector)) / n




#score: {'n8_size512.txt': 284}
#island_id: 2
#version_generated: 3
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min(abs(sum(x for x in vector) - n/2), abs(n-sum(x for x in vector)))




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 297}
#island_id: 2
#version_generated: 3
#generate time15:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 0.5 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 308}
#island_id: 2
#version_generated: 3
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n + sum(x > 0 for x in vector) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + max(-sum(vector), 0) + (max(vector) - min(vector)) / n + min((x**3)/n for x in vector)




#score: {'n8_size512.txt': 258}
#island_id: 2
#version_generated: 3
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + np.std(vector)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + (trailing_zeros / n)) - np.log(n) - (np.sqrt(sum_elements) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (leading_zeros / n) * (n - leading_zeros) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * ((n - trailing_zeros) ** 2 / (1 + sum_elements))




#score: {'n8_size512.txt': 311}
#island_id: 3
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * 
       np.exp(-(leading_ones + sum(1 for elem in set(vector) if elem)) / n))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * np.exp(-leading_ones / (n - min(n, leading_ones))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(max((n - i) / n for i in range(min(n, leading_ones), n)), sum_elements / n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.log(n) * sum(x > 0 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 273}
#island_id: 2
#version_generated: 3
#generate time15:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x for x in vector) ** 2 / (n * n)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time15:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / (4 * n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0) - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements * (sum_elements + trailing_zeros)**0.5 / n




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time15:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) - sum_elements/(n*n-1)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time15:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + abs(sum_elements - n/2)/n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (n - trailing_zeros) / n * (2 - (sum_elements / sum(range(n+1))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + leading_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n + 1) - (trailing_zeros / (n + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - leading_zeros) / n - sum(map(lambda x: x**2, vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / n if sum_elements != 0 else -trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - leading_zeros) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * ((n - trailing_zeros) ** 2 / (1 + sum_elements)) + (n - trailing_zeros) / (1 + sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (len([i for i in reversed(vector) if i == 0]) / n) * ((n - len([i for i in reversed(vector) if i == 0])) ** 2 / (1 + sum(vector))) - np.sum(np.log10(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * (n ** 2 / (1 + sum_elements)) - ((n - trailing_zeros) / (1 + sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time15:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 278}
#island_id: 3
#version_generated: 3
#generate time15:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * np.exp(-len([i for i in vector if i==0]) / n))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time15:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * 
       np.exp(-leading_ones / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - len(str(sum(0 if elem == 1 else 1 for elem in vector)))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_zeros, n) / n)




#score: {'n8_size512.txt': 311}
#island_id: 3
#version_generated: 3
#generate time15:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_zeros, n) * 
      np.exp(-leading_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - leading_zeros) / (n ** 2) * np.log10(n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / (2 * n ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i > 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i > 0 else 0 for i in vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * (n ** 2)  # Improved function




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) - (n-sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - min(x for x in vector) * len(set(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).lstrip('0')) if str(vector).endswith('0') else 0
  return -(sum_elements ** 2 + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -(sum_elements ** 2 + (trailing_zeros / n))




#score: {'n8_size512.txt': 295}
#island_id: 2
#version_generated: 3
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) + np.sum(np.abs(np.diff(vector))) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + (abs(sum(x for x in vector) - n/2) / n) * ((n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(map(lambda x: abs(x), vector)) / min(sum(map(lambda x: abs(x), vector)), len(vector))
  )




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in reversed(vector) if x == 0])
  
  return -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements + len([x for x in reversed(vector) if x == 0])) / (n + sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  trailing_zeros = len([x for x in reversed(vector) if x == 0])

  # Use a more efficient way to calculate the ratio of ones and zeros
  ones_ratio = leading_ones / n
  zeros_ratio = trailing_zeros / n

  return -sum_elements + max(ones_ratio, zeros_ratio)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) - sum_elements / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time15:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -((sum_elements + 1) * np.log(sum_elements + 1) + (trailing_zeros + 1) * np.log(trailing_zeros + 1)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n*(n-1)) - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements ** (0.5 / len(set(vector))) * np.exp(-len([i for i in vector if i == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n) * min((n - trailing_zeros) / n, 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * max(1 - (n - trailing_zeros) / n, 0.1) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * max(1 - (n - trailing_zeros) / n, 0.5) - (sum_elements ** 2) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 if x else 0 for x in vector))[2:]) // 4
  return -sum_elements / (n + trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 / (n * max(sum_elements, 1))) - np.log(n) - ((np.sqrt(sum_elements) + trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) - sum(1 for _ in range(trailing_zeros))




#score: {'n8_size512.txt': 287}
#island_id: 3
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(1 for elem in vector if elem == 0) / min(sum(map(abs, vector)), n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(i for i in range(n) if bin(sum(1 for elem in vector[:i] if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / len(vector))




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 274}
#island_id: 2
#version_generated: 3
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(map(abs, filter(lambda x: x != 0, vector))) / n




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in vector if i < 0]) * n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector)**2/n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x/n) for x in vector)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n*(n-1)) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 273}
#island_id: 2
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n*max(abs(x) for x in vector)) - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 266}
#island_id: 2
#version_generated: 3
#generate time15:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) / n) + abs(sum(x for x in vector) - n/2) * ((n - sum(1 for x in vector if x))/n)**0.5




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector)/n + (n-sum(1 for x in vector if x))**2/n




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum((x >= 0) for x in vector)




#score: {'n8_size512.txt': 320}
#island_id: 2
#version_generated: 3
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - abs(sum(x for x in vector) - 2*(min(vector)+n/2))/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x)))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i > 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i > 0 else 0 for i in vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** (3/4)) + ((trailing_zeros / n) * (n ** 2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i > 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (leading_zeros / n) * (n - leading_zeros)**2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * (n - trailing_zeros)**2 + abs(sum_elements) ** 0.5




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 274}
#island_id: 2
#version_generated: 3
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(abs(x)-min(abs(x) for x in vector) for x in vector)/n




#score: {'n8_size512.txt': 268}
#island_id: 2
#version_generated: 3
#generate time15:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for i in range(len(vector)) if vector[i] == 0) / n




#score: {'n8_size512.txt': 278}
#island_id: 3
#version_generated: 3
#generate time15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem != 0) * max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 284}
#island_id: 3
#version_generated: 3
#generate time15:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum(map(lambda x: abs(x), vector)), len(vector)) + 
      (sum(map(lambda x: x ** 2, vector)) / sum(map(lambda x: abs(x), vector))) ** 0.5
  )




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: x**2/n, vector)) - np.log(n) - (np.sqrt(sum(vector)/n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + sum_elements/(n*n) + (trailing_zeros/n)**3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + sum_elements/(n*n) - ((trailing_zeros/n)**0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + sum_elements/(n*n) - (trailing_zeros/n)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time15:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + sum_elements/(n*n) - (trailing_zeros**2)/(n*n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time15:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) - sum_elements/(n*n) - len(set(vector))/n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * np.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum_elements + (trailing_zeros / n) * (n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) - sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + max(-min((x**2/n) for x in vector), 0) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) - (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.array(vector))
  trailing_zeros = len([i for i in reversed(list(map(str,vector))) if i == '0'])
  return -((sum_elements / n) ** 2 + (trailing_zeros / n) ** 2) - (np.log(n) + 1) * ((sum_elements > len(vector) // 2) > 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + sum(x ** 2 for x in vector) / (n * (max(vector) ** 2)) + len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 286}
#island_id: 2
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(1 for _ in vector)) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + max(-sum(vector), 0)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 3 + trailing_zeros ** 2) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) + abs(sum_elements - n/2)/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  
  return -(sum_elements ** 3 / (n * max(sum_elements, 1))) - np.log(n) - (np.sqrt(sum_elements) / n) + abs(sum_elements - n/2)/n




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.log((sum(1 for i in vector if i) ** 2 + len([i for i in reversed(vector) if i == 0])) / (n * max(sum(1 for i in vector if i), 1))) - np.log(n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.log((sum(1 for i in vector if i) ** 2 + len([i for i in reversed(vector) if i == 0])) / (n * max(sum(1 for i in vector if i), 1))) - np.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.log((sum(vector) ** 2 + vector.count(0)) / (n * max(sum(vector), 1))) - np.log(n)




#score: {'n8_size512.txt': 300}
#island_id: 2
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - (n-sum(vector))**2/(2*n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(abs(x-0.5) for x in vector)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  if sum(x for x in vector) < n/2:
    return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  else:
    return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('1'))
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - leading_zeros) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time15:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + sum(1 for elem in vector if not elem) / n)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-trailing_zeros / n) * (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 282}
#island_id: 3
#version_generated: 3
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n + 
       sum_elements / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector)**2/n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - abs(sum(vector) - n/2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - leading_zeros) / (n ** 2) * np.log10(n) + sum(1.0/(10.0**np.floor(np.log10(i))) for i in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - leading_zeros) / n * np.log10(n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 259}
#island_id: 2
#version_generated: 3
#generate time15:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i, x in enumerate(vector) if x == 0]) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements + (n - trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for val in vector if val)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time15:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i)**2 + (len([i for i in reversed(vector) if i == 0]) - 1)) / ((n * max(sum(1 for i in vector if i), 1)) ** 1.5)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time15:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) - sum_elements/(n*n) - len(set(vector))/n - (sum_elements**3)/(n*n*n)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time15:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) - (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector)




#score: {'n8_size512.txt': 305}
#island_id: 3
#version_generated: 3
#generate time15:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
 ) + sum(map(lambda x: x**2, map(abs, filter(None, vector)))) / (sum(map(abs, vector)) ** 1.5)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time15:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
    sum(1 for elem in vector if elem == 0) ** (0.5 / len(set(vector))))




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time15:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(abs(x) for x in vector) * n / len(vector) + max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x ** 2 / n if x != 0 else 1 for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x ** 2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time15:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - ((np.sqrt(sum_elements)) / n) - (sum_elements/(n*n)) - (len(set(vector))/n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - (np.sqrt(sum_elements) / n) - sum_elements/(n*n) - len(set(vector))/n - min(sum_elements, n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time15:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** 2 + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - ((np.sqrt(sum_elements)) / n) - (sum_elements/(n*n)) - (len(set(vector))/n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i > 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n)) * (len(vector) ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i > 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros / n)) - ((n - trailing_zeros) / n) * (max(vector) - min(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i > 0)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements / n + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority_v0`.
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 for x in reversed(vector) if x == 0)))
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(list(itertools.takewhile(lambda x: x == 1, reversed(vector))))
  return -sum_elements + leading_ones / n




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + (trailing_zeros ** 2) / (n * max(sum_elements, 1))) - np.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time15:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements + trailing_zeros) / (n * max(sum_elements, 1)) - np.log(n) - abs(sum_elements - n/2)/n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, filter(None, vector)))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)) - sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 273}
#island_id: 2
#version_generated: 3
#generate time15:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - (sum(x for x in vector)**2)/(n*(n-1))




#score: {'n8_size512.txt': 306}
#island_id: 2
#version_generated: 3
#generate time15:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector)/n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(abs(x) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(vector, min(vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x**3 for x in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time15:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 + min(abs(x) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + 2 * trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(vector) - leading_ones
  
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + trailing_zeros) / (n*(len(vector)+1))




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 2
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > 1e-6) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 2
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 2
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector) - sum(x for x in vector if x == 0)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:]) // 4
  return -sum_elements + trailing_zeros / (n ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time15:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for x in vector if x == 1)))
  return -sum_elements + (n - leading_ones) / n




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time15:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 0.5) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time15:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * np.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time15:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements ** 2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
       (1 if leading_ones > 0 else 2)
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
       + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector)), len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time15:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
    (n - leading_ones) / n * sum(abs(x) for x in filter(lambda x: x == 0, vector)) / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:].lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time16:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * np.sqrt(len(set(vector)) / n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(x for x in set(filter(lambda x: x != 0, vector)))
      )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (sum_elements / n)**2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(x**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 280}
#island_id: 3
#version_generated: 3
#generate time16:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max(((n - i) * min(i, n)) / (n * n) for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) if x != 0 else 1 for x in vector) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (min(sum_elements, len(vector)) if sum_elements > 0 else len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones))




#score: {'n8_size512.txt': 299}
#island_id: 3
#version_generated: 3
#generate time16:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_zeros, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time16:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time16:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time16:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time16:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time16:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + sum(1 for x in vector if x == 0) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time16:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time16:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(1 for i in range(len(vector)-1, -1, -1) if vector[i] == 0))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), min(n, len(vector))))
 )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n))) ** 1.3




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) / (n + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(1 - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time16:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) * min(trailing_zeros, n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) ** 0.5 / n) ** 2




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (1 - (trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time16:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.sin(np.pi * (trailing_zeros / n))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time16:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n * np.exp(-leading_zeros / n) for i in range(min(n, leading_zeros), n)) + 
      sum(abs(x) for x in filter(lambda x: abs(x) < 0.1, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 319}
#island_id: 3
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n * np.exp(-(leading_ones + sum(x > 0 for x in vector)) / n) for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements / (n * max(1, leading_ones)) + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + (trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements + (trailing_zeros / n)) * max(1, min(n, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for _ in range(len(vector)-1) if sorted(vector)[::-1][_+1] == 0)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  if sum(vector) < n/2:
    return -(n-sum(vector))/n
  else:
    return -(sum(vector)-n)/n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time16:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements * (n - trailing_zeros) / n + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(x**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements**2, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.mean([i for i in vector if i == 0])




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time16:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / len(vector) * trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements / (n * max(1, leading_ones)) + trailing_zeros / n) + sum(vector) ** 2 / (n ** 3)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements / (n * max(1, vector.count(1))) + len(str(sum(1 for x in vector if x == 0))) - 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements / (n * max(1, leading_ones)) + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0') - 1
  return -(sum_elements / (n * max(1, leading_ones)) + trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 2
#version_generated: 3
#generate time16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / sum(x for x in vector)) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + abs(sum(vector) - n/2) + sum(1 for x in vector if x==0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(map(lambda x: x**2, vector))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n*len(vector))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time16:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - sum(1 for elem in vector if elem), 0) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)) ** (0.5 / len(set(vector)))) * ((max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n))) + (n - len(str(sum(1 for elem in vector if elem == 0)))) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
       (n - trailing_zeros) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -((sum_elements ** 0.5) + 
          (n - leading_ones) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(map(abs, vector))) +
          (n - trailing_zeros) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**0.5 + max((n - i) / n for i in range(n)) * min(sum(map(abs, filter(None, vector))), sum(vector)) / sum(vector))**2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) - len([x for x in reversed(vector) for x in (0,) if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + trailing_zeros) / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      min(sum_elements, sum(map(lambda x: abs(x), vector))) / sum(map(lambda x: abs(x), vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(min(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum_elements / min(sum_elements, n)
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n) if not any(i == 1 for i in vector)) * 
       sum(map(abs, vector)) / min(sum(map(abs, vector)), n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum_elements / min(sum_elements, n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n or 1) - 10**-(trailing_zeros.bit_length() + 1) / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + (n - trailing_zeros)) / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + trailing_zeros) / (n or 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + (trailing_zeros / n) * (n - trailing_zeros)) / (n or 1)




#score: {'n8_size512.txt': 299}
#island_id: 2
#version_generated: 3
#generate time16:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 0.5 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 293}
#island_id: 2
#version_generated: 3
#generate time16:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * ((n - sum(1 for x in vector if x)) > 0)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - ((n-trailing_zeros)/(n*len(vector))) + ((trailing_zeros / n) * (1 if sum_elements > len(vector) // 2 else 0))




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n*len(vector)) + (sum_elements % 2 != trailing_zeros % 2)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time16:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n-trailing_zeros)/(n*len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0') - 1
  return -(sum_elements / (n * max(1, leading_ones)) + trailing_zeros / n) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0))) - 1
  return -(sum_elements / (n * max(1, len([i for i in vector if i != 0]))) + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0') - 1
  return -(sum_elements / max(n * leading_ones, n) + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0') - 1
  return -(sum_elements / (n * max(1, leading_ones)) + min(trailing_zeros, n-1) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:])) - len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + sum_elements / n + trailing_zeros / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time16:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time16:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n-trailing_zeros)/(n*len(vector))) + (sum_elements % 2 != trailing_zeros % 2)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time16:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n-trailing_zeros)/(n*len(vector))) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements % 2 - trailing_zeros % 2))




#score: {'n8_size512.txt': 306}
#island_id: 0
#version_generated: 3
#generate time16:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (n-trailing_zeros)/(n*len(vector)) + (sum_elements % 2 != trailing_zeros % 2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector)))) - sum(map(lambda x: x > 0 and 1 or 0, vector)) / min(sum_elements := sum(vector), sum(map(abs, vector)))




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time16:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (n-trailing_zeros)/(n*len(vector)) + (sum_elements % 2 != trailing_zeros % 2) - abs(sum_elements - len(vector) // 2) * min((sum_elements / len(vector)), (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time16:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (n-trailing_zeros)/(n*len(vector)) + (sum_elements % 2 != trailing_zeros % 2) - sum(map(lambda x: x**2, vector))




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time16:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (n-trailing_zeros)/(n*len(vector)) + (sum_elements % 2 != trailing_zeros % 2) - abs(sum_elements - n/2)/n




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time16:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 301}
#island_id: 2
#version_generated: 3
#generate time16:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n - sum(sorted(vector)[::-1]) / n) - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time16:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time16:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 + (n - sum(1 for x in vector if x))**2




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time16:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements - len(vector) / 2) ** 2 - (trailing_zeros / n) ** 2 + (abs(sum_elements - n/2)/n) * min(trailing_zeros, sum_elements % 2 != trailing_zeros % 2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time16:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n**2) + max(min(x for x in vector), 0) - min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time16:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n*(n-1)) + abs(sum(x for x in vector) - n/2) * ((n-sum(1 for x in vector if x)) / n)




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time16:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(abs(x) for x in vector) * len(vector) / n + max(-sum(vector), 0) + (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time16:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
           max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
           sum(map(abs, filter(None, vector)))
  )




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time16:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
      abs(sum(1 for elem in vector if elem == 0)) ** (0.5 / len(set(vector))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0') - 1
  return -(sum_elements / (n * max(1, leading_ones)) + trailing_zeros / n) - (trailing_zeros / n) ** 2 - abs(sum_elements) / (n * leading_ones)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0') - 1
  return -(sum_elements / (n * max(1, leading_ones)) + trailing_zeros / n) - (trailing_zeros / n) ** 2 - (leading_ones / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0') - 1
  return -(sum_elements / (n * max(1, leading_ones)) + (trailing_zeros / n) ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i != 0])
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0') - 1
  return -(sum_elements / (n * max(1, leading_ones)) + ((trailing_zeros / n) ** 2) + np.sqrt(trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - sum(1 for elem in vector if not bool(elem)), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
       sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) - sum(1 for _ in reversed(vector) if _) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) - (vector.count(0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).zfill(n))
  return -(sum_elements / (n * len([i for i in vector if i != 0])) + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -sum_elements / (n * max(1, len(set(vector)))) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements / (n * max(1, len([i for i in vector if i != 0]))) + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements / (n * max(len(set(vector)), 1)) + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x for x in set(vector) if x != 0) / min(sum(map(abs, vector)), len(set(vector))))




#score: {'n8_size512.txt': 145}
#island_id: 2
#version_generated: 3
#generate time16:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n * min(abs(x) for x in vector)) + max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time16:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time16:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time16:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)/n + (n - sum(1 for x in vector if x))**2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      np.exp(-leading_ones / n) * 
      min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.exp(-leading_ones / n) * 
      sum((i / n) ** 2 for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time16:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - leading_ones) / n * sum(abs(x) for x in filter(lambda x: x == 0, vector)) / len(vector) + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time16:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) / sum_elements for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
    (n - leading_ones) / n * sum(1 for x in filter(lambda x: x == 0, vector)) / len(vector))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time16:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (n - trailing_zeros) / (n * len(vector)) + abs(sum_elements - n/2)/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time16:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (n-trailing_zeros)/(n*len(vector)) + (sum_elements % 2 != trailing_zeros % 2) - abs(sum_elements - n/2)/n + sum(1 for i in vector if i == 0)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time16:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (n-trailing_zeros)/(n*len(vector)) + (sum_elements % 2 != trailing_zeros % 2) - abs(sum_elements - n/2)/n - max(0, sum_elements - n/2)**2




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 2
#generate time16:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) / (len(vector) * n) - ((trailing_zeros / n) ** 2) + (abs(sum_elements - len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 2
#generate time16:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / len(vector) - (len(vector) // 2 + 1) / len(vector))**2 - (trailing_zeros / n)**2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time16:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time16:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n) if not any(vector[i:])))




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time16:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in reversed(bin(sum(1 for i in range(n) if not vector[i]))[2:]) if elem == '1') / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x)**(n/len(set(vector))) for x in vector) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
      sum(x > 0 for x in vector) / sum(map(lambda x: abs(x), vector)) - 
      sum(x < 0 for x in vector) / sum(map(lambda x: abs(x), vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time16:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((n % 4 == 3 and sum_elements < n // 2) or sum_elements > n // 2))




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time16:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time16:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min((abs(sum_elements - len(vector) // 2)), abs(trailing_zeros - n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) / 
       sum(map(lambda x: abs(x), vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum_elements / min(sum_elements, sum(map(abs, vector)))
 )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), vector)) / min(sum_elements, sum(abs(x) for x in vector)) + 
      sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)))




#score: {'n8_size512.txt': 294}
#island_id: 3
#version_generated: 3
#generate time16:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector)))) - ((n - len([x for x in vector if x])) / n) * sum(abs(x) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_zeros, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum_elements / max(abs(elem) for elem in vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time16:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time16:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum_elements / max(abs(x) for x in vector))




#score: {'n8_size512.txt': 298}
#island_id: 3
#version_generated: 3
#generate time16:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - trailing_zeros, n) / n)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time17:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time17:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min(sum_elements, len(vector), key=lambda x:abs(x-len(vector)//2))




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time17:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max(-1, -(sum_elements**2)/(n**(2/3))) - min(trailing_zeros/n, 1)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time17:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time17:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * ((trailing_zeros + sum_elements % 2) / n) ** 2




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time17:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time17:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 2.5 * np.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector)**2/n) + max(-sum(vector), 0) - min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2)




#score: {'n8_size512.txt': 258}
#island_id: 0
#version_generated: 3
#generate time17:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector)))).count('0') / n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time17:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > n / 2:
    return -trailing_zeros / n
  elif sum_elements < n / 2:
    return sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (n-trailing_zeros)/(n*len(vector))
  else:
    return -abs(sum_elements - n/2)/n - max(0, sum_elements - n/2)**2




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time17:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(int(''.join(map(str,vector)))).count('0')) ** 2 / (n * len(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
      sum(1 for x in vector if x < 0) * len(vector))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time17:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * 
       max((n - trailing_zeros) / n if trailing_zeros > 0 else 0 for trailing_zeros in range(min(n, leading_ones), n))
      )




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time17:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
      )




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x)))
  return -sum_vector / n - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  if sum(vector) < n/2:
    return -(n-sum(vector))/n
  else:
    return -((sum(vector)-n)/n)**2 - (n - len([x for x in vector if x]))**2 / n + max(-sum(x for x in vector), 0) + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time17:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), 0.5)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time17:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + ((sum_elements == len(vector) // 2) > 0) * sum_elements




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time17:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')

  if sum_elements > n / 2:
    return -trailing_zeros / n
  elif sum_elements < n / 2:
    return (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector))
  else:
    return -(abs(sum_elements - n/2)) / n




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time17:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 2 - 1.5 * (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2) / (n ** 2)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time17:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-abs(sum_elements - len(vector) // 2) / 100)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - sum(abs(x-0.5) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time17:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 3 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time17:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * ((trailing_zeros / n) ** 2 + (trailing_zeros % n) / n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time17:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time17:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')

  if sum_elements > n / 2:
    return -trailing_zeros / (n * (1 + sum_elements))
  elif sum_elements < n / 2:
    return (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector))
  else:
    return -(abs(sum_elements - n/2)) / n




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time17:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements - n/2) * (n-trailing_zeros) / (n*len(vector))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time17:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements - n/2)**2 + (n-trailing_zeros)**2) / (n**2 + len(vector)**2)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time17:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((abs(sum_elements - n/2) / n) + (trailing_zeros / n))




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time17:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-abs(sum_elements - len(vector) // 2) / 100) + np.sin(3 * sum_elements / len(vector)) - np.cos(5 * trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time17:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-abs(sum_elements - len(vector) // 2) / 100) - abs(sum_elements - n) / (n * 2)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time17:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2) / len(vector)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time17:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 0.5 * (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) // 2) < 1e-6) * (trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time17:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * ((trailing_zeros + 1) / (n + 1)) ** 2 + ((sum_elements > n // 2) > 0) * ((trailing_zeros + 1) / (n + 1))




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time17:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  def func(x):
    return -x[0] * (2 - abs(2 * x[0] / len(vector) - 1)) - 1.5 * (x[1] / n) ** 2 + ((x[0] > len(vector) // 2) > 0) * (x[1] / n)
  
  result = minimize(func, [sum_elements, trailing_zeros/n], method='SLSQP')
  return result.fun




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time17:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 1.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-abs(sum_elements - len(vector) // 2) / 100) - sum(np.log10(np.abs(np.array(vector)))) - trailing_zeros




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time17:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')

  return -sum_elements * (n-trailing_zeros) / (n*(1+abs(sum_elements-n/2)))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time17:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros * (1 + abs(sum_elements - n/2))
  elif sum_elements < n / 2:
    return (n-trailing_zeros) * (1 - abs(sum_elements - n/2) / n)
  else:
    return -(abs(sum_elements - n/2)) / n




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time17:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements - n/2) * (n-trailing_zeros) / (n*len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**2 for x in vector) / min(sum_elements, sum(x**2 for x in vector)) + 
       sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), filter(None, vector))) / min(sum_elements, sum(abs(x) for x in vector)) + 
      sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)))




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time17:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), filter(None, vector))) / min(sum_elements, sum(abs(x) for x in vector)) + 
      sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)) + 
      sum(1 for elem in vector if elem == 0) / len(vector))




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time17:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time17:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 0.5 * (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time17:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (max(vector) - min(vector)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
      (1 if leading_ones > 0 else 2)
      + abs(sum(1 for elem in vector if elem == -1)) ** 0.5
      )




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 3
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > n / 2:
    return -trailing_zeros * (1 + sum_elements) / n
  elif sum_elements < n / 2:
    return (n-trailing_zeros) / (n*len(vector))
  else:
    return -(abs(sum_elements - n/2)) / n




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > n / 2:
    return -(n - trailing_zeros) / (1 + sum_elements)
  elif sum_elements < n / 2:
    return (abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector))
  else:
    return 0




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')

  if sum_elements > n / 2:
    return -trailing_zeros / (n * (1 + abs(sum_elements - n/2)))
  elif sum_elements < n / 2:
    return (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector))
  else:
    return -(abs(sum_elements - n/2)) / n




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - sum(1 for x in vector if x) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + max(-sum(vector), 0)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - (n - sum(1 for x in sorted(vector, reverse=True))) / n




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in range(len(vector)) if vector[i] > 0) / len(vector) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time17:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(x for x in set(vector)) * n / len(set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector)/n + (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - min((x**2/n) for x in vector) - abs(sum(vector)-n/2)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time17:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 272}
#island_id: 0
#version_generated: 3
#generate time17:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > n / 2:
    return -trailing_zeros * (1 - abs(sum_elements - n/2) / (n/2))
  elif sum_elements < n / 2:
    return (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector))
  else:
    return -(abs(sum_elements - n/2)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time17:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i == 0) / (n * (abs(sum(vector) - n/2) + len(vector)))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time17:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if abs(sum_elements - n/2) < 1e-6:
    return -(abs(trailing_zeros / (n * len(vector))))
  elif sum_elements > n / 2:
    return -trailing_zeros / (n * (1 + abs(sum_elements - n/2)))
  else:
    return (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector))




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time17:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > n / 2:
    return -trailing_zeros / (n * abs(sum_elements - n/2))
  elif sum_elements < n / 2:
    return (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*abs(sum_elements - n/2))
  else:
    return -(abs(sum_elements - n/2)) / n




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time17:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + trailing_zeros / (n * abs(sum_elements - n/2))) if sum_elements != n/2 else 0




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time17:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + sum_elements**2/n)**(n-trailing_zeros)/n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time17:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - sum(1 for i in range(len(vector)) if abs(vector[i]) < 0.5)




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time17:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time17:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (trailing_zeros / n)) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time17:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum((i, j) for i, j in zip(range(len(vector)-1), range(1, len(vector))) if vector[i] == 0 and vector[j-1] != 0)




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time17:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / len(vector)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time17:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))))) - bin(int(''.join(map(str,vector)))).count('1')
  return -(sum_elements / (2 * len(vector))) ** 2 - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time17:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum((i, j) for i, j in enumerate(vector) if i < j and vector[i] == 0)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time17:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  return -(min(sum(1 for x in vector if x), 3/2*n) - sum(1 for x in vector if not x))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time17:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  if sum(vector) < n/2:
    return -(n-sum(vector))/n
  else:
    return -(sum(vector)-n)/n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time17:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')

  if sum_elements > n / 2:
    return -trailing_zeros / (n * (1 + abs(sum_elements - n/2)))
  elif sum_elements < n / 2:
    return (1 + abs(sum_elements - n/2)) ** 2 * (n-trailing_zeros) / (n*len(vector))
  else:
    return -(abs(sum_elements - n/2)) ** 3 / n




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time17:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -trailing_zeros / (n * (1 + abs(sum_elements - n/2))) if sum_elements > n / 2 else (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector)) if sum_elements < n / 2 else -(abs(sum_elements - n/2)) / n




#score: {'n8_size512.txt': 282}
#island_id: 3
#version_generated: 3
#generate time17:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum_elements / min(sum_elements, n) + 
       (1 - leading_ones / n) * sum_elements / n)




#score: {'n8_size512.txt': 316}
#island_id: 2
#version_generated: 3
#generate time17:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - min((n-i)*x/n for i,x in enumerate(sorted(vector, reverse=True)))




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time17:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**0.5 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 317}
#island_id: 2
#version_generated: 3
#generate time17:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum(x**2 for x in vector) / (n*sum(x for x in vector))




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time17:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -trailing_zeros / (n * (1 + abs(sum_elements - n/2))) if sum_elements > n / 2 else (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector)) if sum_elements < n / 2 else -(abs(sum_elements - n/2)) / n




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time17:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -trailing_zeros / (n * (1 + abs(sum_elements - n/2))) if sum_elements > n / 2 else sum_elements ** 2 / (n*len(vector)) if sum_elements < n / 2 else -(abs(sum_elements - n/2)) / n




#score: {'n8_size512.txt': 318}
#island_id: 0
#version_generated: 3
#generate time17:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros / (n * abs(sum_elements - n/2))
  elif sum_elements < n / 2:
    return (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector))
  else:
    return -(abs(sum_elements - n/2)) / n




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time17:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros / (n * (1 + abs(sum_elements - n/2)))
  elif sum_elements < n / 2:
    return (1 + abs(sum_elements - n/2)) * (n-trailing_zeros) / (n*len(vector))
  else:
    return -(abs(sum_elements - n/2)) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n * np.exp(-leading_ones / n) * 
        sum(map(abs, filter(None, map(lambda x: x**2 if x != 0 else np.log(x+1), vector)))) / min(sum_elements, sum(map(abs, vector))) for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 265}
#island_id: 0
#version_generated: 3
#generate time17:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if abs(sum_elements - n/2) > n/4:
    return -trailing_zeros / (n * abs(sum_elements - n/2))
  else:
    return (abs(sum_elements - n/2)) ** 2 / (n*len(vector))




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time17:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if abs(sum_elements - n/2) < n/trailing_zeros:
    return (n-trailing_zeros) / n
  else:
    return -(abs(sum_elements - n/2)) / n




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time17:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n-trailing_zeros)/len(vector))




#score: {'n8_size512.txt': 325}
#island_id: 0
#version_generated: 3
#generate time17:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros * (n - abs(sum_elements - n/2)) / (n * len(vector))
  elif sum_elements < n / 2:
    return -(abs(sum_elements - n/2) + trailing_zeros) / n
  else:
    return -(abs(sum_elements - n/2)) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(np.log10(np.mean(vector)) + 
       (n - leading_ones) / n * np.log10(n / len(set(vector))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time17:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(int(''.join(map(str,vector)))).rstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time17:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time17:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))))[:-2].zfill(len(vector)).replace('1', '0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time17:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) * (1 - abs(sum_elements / len(vector) - 0.5))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time17:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, min(sum(map(abs, vector)), bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))), n)) * sum(map(abs, vector)) / min(sum(map(abs, vector)), sum(x**2 for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') + min(len(vector) - 1, sum(map(abs, vector))), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(map(lambda x: x > 0, vector)).mean() * (n - len([x for x in vector if x > 0])) / n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time17:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - (sum_elements % n) / n




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time17:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0), sum(1 for i in range(len(vector)) if vector[i] == 0))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if not x) + sum(x for x in vector)) / n - min(abs(x) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - min(x**2/n for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -min((x**2/n) for x in vector) - (sum(x for x in vector) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x))) - 1
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n - min(x**2/n for x in vector)




#score: {'n8_size512.txt': 275}
#island_id: 2
#version_generated: 3
#generate time17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  if sum(vector) < n/2:
    return -min((x/n) for x in vector)
  else:
    return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 276}
#island_id: 2
#version_generated: 3
#generate time17:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x)).rstrip('0'))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - (sum_elements % n) / n + (-min(sum_elements, n)) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(abs(x-0.5*n)**2 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / (4 * n)




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros * (n - abs(sum_elements - n/2))
  elif sum_elements < n / 2:
    return -(abs(sum_elements - n/2) + trailing_zeros)
  else:
    return -(abs(sum_elements - n/2)) // 2




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -(sum_elements - n/2) ** 2 + trailing_zeros / (n * len(vector))
  elif sum_elements < n / 2:
    return -(abs(sum_elements - n/2) + trailing_zeros) / n
  else:
    return -(abs(sum_elements - n/2)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + (n / 2 - abs(sum_elements - n/2)) * len(vector) + trailing_zeros) / n




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros * (n - abs(sum_elements - n/2))
  elif sum_elements < n / 2:
    return -(abs(sum_elements - n/2) + trailing_zeros)
  else:
    return -(sum_elements)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - (sum_elements % n) / n
  score = abs(sum_elements - len(vector) // 2)
  return -score * (2 - abs(2 * score / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - (sum_elements % n) / n




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - (sum_elements % n) / n




#score: {'n8_size512.txt': 277}
#island_id: 1
#version_generated: 3
#generate time17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - (sum_elements % n) / n - 2*sum((x>0 for x in vector))/len(vector)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - (sum_elements % n) / n




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  score = abs(sum_elements - len(vector) // 2)
  return -score * (2 - abs(2 * score / len(vector) - 1)) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((sum_elements % n) / n)**2




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time17:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)) - ((sum_elements % n) / n)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time17:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if abs(sum_elements - n/2) > len(vector):
    return -(trailing_zeros) / (n * len(vector))
  else:
    return -(abs(sum_elements - n/2) + trailing_zeros) / n




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time17:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if abs(sum_elements - n/2) > trailing_zeros:
    return -(abs(sum_elements - n/2)) / n
  else:
    return -trailing_zeros / n




#score: {'n8_size512.txt': 264}
#island_id: 0
#version_generated: 3
#generate time17:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros * (n - abs(sum_elements - n/2)) / (n * len(vector))
  elif sum_elements < n / 2:
    return -(abs(sum_elements - n/2) + trailing_zeros) / n
  else:
    return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time17:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def loss_function(params):
    alpha, beta = params
    return -alpha * sum(vector) + beta * bin(int(''.join(map(str,vector)))).count('0')

  result = minimize(loss_function, [1.0, 1.0], method="SLSQP")
  alpha, beta = result.x

  return -alpha * sum(vector) + beta * bin(int(''.join(map(str,vector)))).count('0')




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * n) + (n - sum(1 for x in vector if x)) ** 2 / (n * n)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time17:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len(vector) - len(str(sum_vector).rstrip('0'))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 302}
#island_id: 2
#version_generated: 3
#generate time17:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len([x for x in vector if x]))/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time17:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)) / n)**2




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time17:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)) / n) ** 2




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time17:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - (sum_elements % n) / n - 10000*sum(1 for i in range(len(vector)) if vector[i] > len(vector) // 2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) * 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (sum(x for x in vector) ** 2 / (n * n))




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time17:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 278}
#island_id: 3
#version_generated: 3
#generate time17:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector)))) - sum(1 for x in vector if x > 0) * min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       sum(x for x in vector if x > 0) * min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector)))) - sum(x for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 264}
#island_id: 0
#version_generated: 3
#generate time17:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -trailing_zeros * (n - abs(sum_elements - n/2)) / (n * len(vector))
  elif sum_elements < n / 2:
    return -(abs(sum_elements - n/2) + trailing_zeros) / n
  else:
    return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time17:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 / (n * len(vector)) + 2*trailing_zeros/len(vector) if sum_elements > n / 2 else -(abs(sum_elements - n/2) + trailing_zeros) / n




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time17:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if abs(sum_elements - n/2) > trailing_zeros:
    return -(abs(sum_elements - n/2))
  else:
    return -(trailing_zeros / len(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
       ) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n)) - (n - len([x for x in vector if x])) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time17:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time17:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(1 for elem in reversed(vector) if elem == 0)**0.5)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 2
#generate time17:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements % 2 == 0 and trailing_zeros % 4 < 2)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - max(leading_ones, 0)) / n + 
      (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n)
  - sum_elements ** ((len(set(vector))) / (2 * sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      (n - trailing_zeros) / n + 
      ((sum_elements ** 2) / (len(set(vector)) ** 2)) * 
      max(len(str(i)) for i in set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time17:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector) + (len([i for i in range(len(vector)) if vector[i] == 0]) - 1) ** 2




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time17:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - trailing_zeros))




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time17:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + trailing_zeros / len(vector))




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time17:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + 1e-6 * trailing_zeros / len(vector))




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time17:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if abs(sum_elements - n/2) > trailing_zeros:
    return -(abs(sum_elements - n/2))
  else:
    return -(trailing_zeros / len(vector)) * (n-abs(sum_elements - n/2))/abs(sum_elements - n/2)




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time17:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (trailing_zeros / len(vector)))




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time17:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(int(''.join(map(str,vector)))).count('1')
  return -(abs(sum_elements - n/2) + (len(vector) - leading_ones) / len(vector))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time17:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n-1)/2) + 0.5 * trailing_zeros / len(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
       + (n - (len(str(sum(1 for elem in vector if elem == 0))) or 0)) / n)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time17:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n - sum_elements / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
       + (n - trailing_zeros) / n - 
       sum(abs(x) for x in filter(lambda x: x < 0, vector)) / sum(abs(x) for x in vector)
       )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)) * min(1, sum_elements / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements + (n - leading_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + sum(1 for i in range(n) if not vector[i]))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       np.exp(-len([i for i in vector if i == 0]) / n) * (n - len([i for i in vector if i == 0])) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time17:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')

  # Calculate the optimal threshold to maximize the priority
  def objective(threshold):
    return -sum_elements ** (0.5 / len(set(vector))) + \
        (n - leading_ones) / n * threshold + (1 - threshold)

  result = minimize(objective, 0.5).x[0]

  # Calculate the final priority
  return -(sum_elements ** (0.5 / len(set(vector)))) + \
      (n - leading_ones) / n * result




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time17:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time17:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x > 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time17:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * (2 - abs(2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time17:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n), sum_elements / len(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time17:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )**2




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - n/2) + (trailing_zeros / len(vector))) * sum_elements




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (trailing_zeros / len(vector))) * min(1, 1/(abs(sum_elements - n/2) + (trailing_zeros / len(vector))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (trailing_zeros / len(vector)) * (1 - abs(sum_elements - n/2)))




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (trailing_zeros / len(vector)) ** 0.5)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 + 1e-6 * (trailing_zeros / len(vector)))))




#score: {'n8_size512.txt': 258}
#island_id: 0
#version_generated: 3
#generate time18:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/3)) + 5e-6 * max(1, trailing_zeros / len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0) - min(x**2/n for x in vector) - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x > 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + np.exp(-np.sum(np.abs(np.array(vector))) / n)




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x > 0) * (1 - sum(vector) / len(vector)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x > 0) * (2 - abs(2 * sum(x ** 2 for x in vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x > 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))[2:].count('0') + len(vector) - sum(1 for x in vector if x > 0)) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / max(len(vector), 1))) 




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(x for x in set(vector) if x < 0)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(int(''.join(map(str, vector)))).count('1')
  return -(abs(sum_elements - n/2) + (len(vector) - leading_ones) / len(vector))




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n+1)/2) + 2*trailing_zeros / len(vector))




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time18:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (trailing_zeros / len(vector)) ** 1.5)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements ** 3 / (len(vector) ** 3)




#score: {'n8_size512.txt': 264}
#island_id: 1
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - max(sum_elements, len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (trailing_zeros / len(vector)) * (n - abs(sum_elements - n/2)))




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(abs(sum_elements - n/2) + bin(int(''.join(map(str,vector)))).count('0') / len(vector))




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (trailing_zeros / len(vector)) if trailing_zeros > 0 else float('-inf'))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** 1.7




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('0', '')) 
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n) ** 1.3




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time18:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector))) ** (0.5 / len(set(vector)))) * ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**2 for x in vector) / min(sum_elements, sum(x**2 for x in vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), vector)) / min(sum_elements, sum(abs(x) for x in vector))
 )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum(abs(x) for x in vector), sum_elements) / 
    min(sum(abs(x) for x in vector), sum_elements)
  )




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time18:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - trailing_zeros) / n) - ((sum_elements/n)**2 + (trailing_zeros/n)**2)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time18:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2)) ** 0.5 * (n - sum(1 for x in vector if x == 0))




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time18:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 + 1e-9 if n % 2 == 0 else n/2)) + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time18:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - trailing_zeros) / n) * min(abs(sum_elements - n/2), n - trailing_zeros, 1)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time18:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - trailing_zeros) / n * min(1, abs(sum_elements - n/2) / n))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - 1 - trailing_zeros) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + (n - leading_ones) / n)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time18:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements / len(vector) + (trailing_zeros / n)) ** 2) + ((abs(sum_elements - len(vector) // 2) > 0.5) * (1 - sum_elements / len(vector))) * (1 - trailing_zeros / n)




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time18:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) and sum_elements % 2 == 1) or sum_elements < len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time18:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) + (-sum(x for x in vector if x < 0) * abs(sum_elements - sum(x for x in vector if x > 0)))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time18:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (-abs(sum_elements - len(vector) // 2) + 1) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log((n - leading_ones) / n) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
     ) - np.sum(np.square(vector)) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time18:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time18:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0) + (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time18:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(map(abs, filter(None, vector))) * 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).replace("0b", "")).lstrip('0'))
  return -(sum_elements ** (1 / len(set(vector))) + 
       -trailing_zeros / n
     )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -min((x/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time18:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) 




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(abs(sum_elements - (n/2 + 1e-9 if n % 2 == 0 else n/2)) + len([i for i in vector if i == 0]) / n)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time18:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) ** 0.5 * (sum(1 for x in vector if x == 0)) / n)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time18:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - (n/2 + 1e-9 if n % 2 == 0 else n/2)) / (min(sum(vector), n) or 1) - (n - bin(int(''.join(map(str,vector))))[:-1].count('0')) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time18:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(vector) - len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time18:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + (abs(sum(x for x in vector if x > 0) - sum(x for x in vector if x < 0))) * ((len(vector) // 2) ** 2)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time18:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1))) - ((len(vector) - bin(int(''.join(map(str, vector))))[2:].count('1')) / n) ** 2 + (-sum(x for x in set(vector) if x < 0) * abs(sum(x for x in set(vector) if x > 0)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  mean_value = sum_elements / len(vector) if sum_elements else 0
  return -sum_elements * (1 - abs(2 * mean_value - 1)) - ((trailing_zeros / n) ** 2) + (((mean_value > 0) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for x in vector if x != 0)))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - leading_ones - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum(int(x) for x in vector))).lstrip('0').lstrip('-'))
  return -(abs(sum_elements - n/2) + (n - 1 - trailing_zeros) / n)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 + 0.5 if n % 2 == 1 else n/2)) + ((n + 1) // 2 - trailing_zeros) / n)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time18:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(abs(sum_elements - n/2) + (n - bin(int(''.join(map(str,vector)))).count('1')) / n)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time18:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    np.exp(-leading_ones / n) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
    len([i for i in range(len(vector)) if not vector[i]]) / len(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)) * min(sum(map(abs, filter(None, vector))), sum_elements) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    np.exp(-leading_ones / n) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  ) ** 0.5




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time18:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_zeros, n), n)) * 
       np.exp(-leading_zeros / n))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 if n % 2 == 1 else n/2.0)) + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - n/2) + (n - trailing_zeros - 1 if trailing_zeros > 0 else 0) / n)




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time18:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 + 1e-9 if n % 2 == 0 else n/2)) + (n - trailing_zeros) / n) * (1 + min(sum_elements, n)/n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time18:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) + (-sum(x for x in vector if x < 0) * abs(sum_elements - sum(x for x in vector if x > 0))) + sum(abs(x-1) for x in (vector[i] <= len(vector)/2 for i in range(len(vector))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (abs(sum_elements - len(vector) // 2) if sum_elements > len(vector) // 2 else 0) - sum(x for x in vector if x < 0)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 if n % 2 == 1 else n/2.0)) + (n - trailing_zeros) / n - sum_elements**2 / (n**2))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(abs(sum_elements - n/2) + (n - bin(int(''.join(map(str,vector)))).count('0')) / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time18:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 if n % 2 == 1 else n/2.0)) + abs(n - trailing_zeros) / n)




#score: {'n8_size512.txt': 264}
#island_id: 3
#version_generated: 3
#generate time18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x)**(1/len(vector)), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x)**2 for x in vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - leading_ones) / n * ((sum_elements > 10) or (leading_ones < n/2)) * min(sum_elements, n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time18:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
       + (n - leading_ones) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x) if x else 0, vector))
      )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) / max(len(bin(x)[2:]) for x in set(vector)) * 
       sum(vector) / sum(map(abs, vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum_elements * trailing_zeros / n
      )




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time18:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / sum(map(lambda x: abs(x), vector)) + 
       sum(1 for elem in vector if not elem) / len(vector)
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
       )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
  ) * (1 + len(set(vector)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
  ) ** (1 + len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_zeros, n), n)))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time18:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements - n/2) * (n - 1 - trailing_zeros) / (n * sum_elements)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time18:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 if n % 2 == 1 else n/2.0)) + (n - trailing_zeros) / n - (sum_elements**2 / (n**2)) - ((n-sum_elements)**2 / (n**2)))




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time18:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 if n % 2 == 1 else n/2.0)) + (n - trailing_zeros) / n - sum_elements**2 / (n**2) - sum_elements/n)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time18:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(abs(sum_elements - (n/2 if n % 2 == 1 else n/2.0)) + (n - trailing_zeros) / n - sum_elements**2 / (n**2))




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time18:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  return -(sum_vector / n + (n - sum_vector) ** 2 / n) - abs(sum_vector - n/2)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time18:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -sum_vector/trailing_zeros




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), vector)) / min(sum_elements, sum(abs(x) for x in vector))
      )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**2 for x in vector) / min(sum_elements, sum(x**2 for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x)**2, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time18:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), vector)) / min(sum_elements, sum(abs(x) for x in vector)) + 
      sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements * len(set(vector)) / (len(set(vector)) ** 0.5) - min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) + ((sum_elements > len(vector) // 2) * (trailing_zeros / n)) + (abs(sum_elements - n//2) * min(abs(x-1) for x in vector))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) + (-sum(x for x in vector if x < 0) * abs(sum_elements - sum(x for x in vector if x > 0))) + sum(abs(x-1) for x in (vector[i] <= len(vector)/2 for i in range(len(vector)))) - (trailing_zeros / n) * sum(x for x in set(vector) if x == 0)




#score: {'n8_size512.txt': 264}
#island_id: 0
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([x for x in vector if x != 0]) - sum(vector) / n + (n - bin(int(''.join(map(str,vector))))[:1:-1].count('0')) / n)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector)))).count('0')) / n - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time18:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time18:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time18:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(abs(x) for x in set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - sum(1 for x in range(n)) / n * (n - sum(1 for x in vector if x))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(vector) - n/2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) + max(sum(x for x in set(vector) if x > 0), 1)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time18:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time18:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 290}
#island_id: 2
#version_generated: 3
#generate time18:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time18:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum([min(i, len(vector)-1-i) for i in range(int(n/2))])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time18:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time18:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((abs(sum_elements - len(vector) // 2)) > 0.5) * (trailing_zeros / n))




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time18:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((abs(sum_elements / len(vector) - 1)) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time18:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector)))).count('0')) / n - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time18:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector)))).count('0')) / n - (sum(vector)**2 + (bin(int(''.join(map(str,vector)))).count('0')-1)**2) / (n**2))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time18:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector)))).count('0')) / n - sum(vector)**2 / (n**2) + abs(sum(vector) - 1) ** 2)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time18:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(c == '0' for c in bin(int(''.join(map(str,vector))))[2:]).bit_length()) / n - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time18:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (-bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time18:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2)) * abs(sum(vector))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum([x**2 for x in vector]) / (n**2))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(c == '0' for c in bin(int(''.join(map(str,vector))))[2:])) / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time18:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector))))[2:].count('0')) / n + (sum(vector) ** 3 - sum([i ** 3 for i in vector])) / (n ** 3))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum([x**2 for x in vector]) / (n**2))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(i for i, x in enumerate(reversed(vector)) if x == 0))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) / n)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time18:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (-bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2) - 1e-6 * ((sum(vector) - n/2) ** 2 + len(bin(int(''.join(map(str,vector))))[2:]) ** 2))




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time18:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (-bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2) - abs(sum(vector)-len(vector)) / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + sum_elements ** 2) / (len(vector) // 2)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time18:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - ((sum(vector) % 2) == 1) * (n - trailing_zeros)




#score: {'n8_size512.txt': 266}
#island_id: 1
#version_generated: 3
#generate time18:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 if i == 0 else -1 for i in vector) / n - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time18:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - (n/2 if n % 2 == 1 else n/2.0)) + (n - bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).replace('0', ''))
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), len(vector)) / n)




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time18:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 1))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - trailing_zeros, n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in vector) / 
       sum_elements)




#score: {'n8_size512.txt': 261}
#island_id: 3
#version_generated: 3
#generate time18:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - leading_ones) // 2) * 
       min(sum(abs(x) for x in vector), sum_elements) / 
       min(sum(abs(x) for x in vector), sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / max(vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time18:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(''.join(map(str,vector)).lstrip('0'))
  return -(abs(sum_elements - n/2) + (n - leading_zeros) / n - sum_elements**2 / (n**2))




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) - abs(sum_elements - n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) + sum(x for x in vector if x > 0)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (-bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2) - abs(sum(vector)-len(vector)) / len(vector) + 2*np.mean(np.log10([x for x in vector if x > 0]))/np.log10(n))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (-bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2)) + (sum(1 for i in vector if i != 0)) / len(vector)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (-bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2) - abs(sum(vector)-len(vector)) / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros / n) ** 2) + (abs(sum_elements - len(vector) // 2))




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time18:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  average_element = sum_elements / len(vector) if vector else float('inf')
  return -sum_elements * (2 - abs(2 * average_element - 1)) - ((trailing_zeros / n) ** 2) + (((average_element > len(vector) // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time18:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((trailing_zeros / n))
  else:
    return sum_elements * (abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 - ((trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(int(''.join(map(str,vector)))).count('0') / n - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2) + 1/(1+sum(vector)/n))




#score: {'n8_size512.txt': 273}
#island_id: 2
#version_generated: 3
#generate time18:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum([min(i, len(vector)-1-i) for i in range(int(n/2))]) - (sum(x for x in vector)**2/(n*(n-1))) + 0.5




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time18:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) - abs(sum(x for x in vector if x > 0) - sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) + sum(x for x in set(vector) if x > 0 and x <= len(vector) // 3)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) + (bin(int(''.join(map(str,vector)))).count('0') / n) - sum(x for x in set(vector) if x < 0)




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time18:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) - sum(1 for _ in range(len(vector)-trailing_zeros))




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time18:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2) - abs(sum(vector)-len(vector)) / len(vector) - sum((1 for x in vector if x == 0)) / len(vector))




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time18:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + bin(int(''.join(map(str,vector)))).count('0') / (n*len(vector)) - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time18:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - (n/2 if n % 2 == 0 else n-0.5)) + bin(int(''.join(map(str,vector))))[2:].count('0') / n - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time18:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) - sum(1 for _ in range(len(vector)-trailing_zeros))
  if sum_elements <= len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((len(vector) // 2 - sum_elements) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) - sum(1 for _ in range(len(vector)-trailing_zeros))
  else:
    return sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) - (((len(vector) // 2 - sum_elements) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) - sum(1 for _ in range(len(vector)-trailing_zeros))




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time18:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) - sum(1 for _ in range(len(vector)-trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str,vector)))).count('0') / n)**2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time18:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time18:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * (max(abs(x) for x in vector) / sum_elements)**1.8)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time18:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - bin(int(''.join(map(str,vector))))[2:].count('0')) / n - abs(sum(vector)-len(vector)) / len(vector) - sum([x**2 for x in vector]) / n)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time18:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - len([i for i in vector if i == 0])) / n - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 306}
#island_id: 0
#version_generated: 3
#generate time18:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + min(0, len(vector) - bin(int(''.join(map(str,vector))))[2:].count('0')) / n - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time18:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  product = 1
  for i in vector:
    if i == 0:
      product *= i
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector)))).count('0') / n) ** 2) + (((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector)))).count('0') / n)) - sum(x for x in set(vector) if x < 0)




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time18:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(operator.itemgetter(x)(vector) for x in set(vector) if x < 0) - sum(1 for _ in range(len(vector)-trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time18:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return (-sum(x**2 for x in vector) + len(set(vector)) - 1) * (n / len(vector)) ** 0.5




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time18:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time18:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time18:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum([1 if i == 0 else 0 for i in vector])) / n - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time18:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 if x > len(vector) // 2 else 0 for x in vector) - (len([x for x in vector if x == 0]) / n)**2 - (bin(int(''.join(map(str,vector)))).count('0') / n)




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time18:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(1 for _ in range(len(vector)-trailing_zeros))
  return -(sum_elements + trailing_zeros)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time18:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time18:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - sum(x**2 for x in vector) / (n**2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (len([i for i in vector if i == 0]) / n) - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(1 for i in vector) - n/2) + (len([i for i in vector if i == 0]) / n) - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + len([i for i in vector if i == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + len([i for i in vector if i == 0]) / (n * n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, (i - n/2 for i in vector))) + (n - sum(1 for i in vector if i == 0)) / n)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time18:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x - n/2) for x in vector) + len([i for i in vector if i == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x)))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time18:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i != 0) - sum(vector) + abs(sum(vector) - n/2)) / (n**2)




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time18:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - sum(x**2 for x in vector) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority_v2`.
  """
  return -(abs(sum(vector) - n/2) + len([i for i in vector if i == 0]) / n - sum(vector)**2 / (n**2))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time18:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) - sum(1 for _ in range(len(vector)-trailing_zeros))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time18:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time18:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0)




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time18:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)) - sum(x for x in set(vector) if x < 0) - sum(x for x in vector if x == 0) - sum(1 for _ in range(len(vector)-trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 + (n - sum([1 for i in vector])) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + sum(1 for i in vector if i == 0) / n - (sum(vector) / n)**2)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time18:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector)) / n - sum(i**2 for i in vector) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 if x == 0 else 10 for x in vector))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time18:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not bool(elem))))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + sum(0 for _ in vector if _ == 0) / n)




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time18:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - sum(i**2 for i in vector) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - ((sum(vector) - n/2)**2 + (n - sum(1 for i in vector if i == 0))/n**2))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time18:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - (sum(vector)**2 + sum(i**2 for i in vector)) / (n**2))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + sum(1 for x in vector if not x)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(abs(x) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (len(str(sum([int(x == 0) for x in vector]))) - len(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time18:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))

  return -sum_vector / n - trailing_zeros / n




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time18:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - sum(i**2 for i in vector) / n)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time18:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.sqrt((sum(vector)**2 + sum(i**2 for i in vector)) / (n**2)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + len(str(n)) - sum(1 for i in vector if i == 0))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time18:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 - element for element in vector) + abs(sum(vector) - n/2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time18:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements - (trailing_zeros / n) if sum_elements > 0 else -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time18:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time18:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(bin(int(''.join(map(str, vector)))).replace("0b", ""))[::-1].lstrip("1"))
  return -sum_elements + leading_ones / (n * 1.0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time18:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time18:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - ((sum(vector)**2 + sum(i**2 for i in vector))) ** 0.5 / (n * 1.5))




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time18:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([i**2 for i in vector]) / n)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time18:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std(vector))




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time18:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std(vector) * (n - abs(sum(vector) - n/2)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     np.log((n - leading_ones) / n) * 
     min(np.sum(np.abs(vector)), sum_elements) / min(sum_elements, np.sum(np.abs(vector))))




#score: {'n8_size512.txt': 290}
#island_id: 2
#version_generated: 3
#generate time19:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in reversed(vector) if i == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 2
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(x) for x in vector[::-1]])))
  return -sum_elements / (n * max(1, trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in reversed(vector) if x == 0])
  
  # The original function has a negative bias towards higher sums and more trailing zeros,
  # which is not justified. A more reasonable approach would be to normalize the priority
  # by the size of the cap set.
  return sum_elements / n - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 1) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in reversed(vector) if elem == 0))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector))) ** (0.5 / len(set(vector)))) * max(1 - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n, 0) + sum(map(lambda x: x**2, filter(None, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -sum_elements/n + (n-trailing_zeros)**2/n - abs(sum_elements-n/2) * (n-trailing_zeros)/n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(x) for x in vector[::-1]])))
  return -sum_elements / (n * max(1, 0.5 + 0.5*trailing_zeros/n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([int(x) for x in vector[::-1]]))[2:])
  return -sum_elements / (n * max(1, trailing_zeros))




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(x) for x in vector[::-1]])))
  return -sum_elements / (n * max(1, trailing_zeros)) if sum_elements != 0 else -trailing_zeros




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time19:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements / (n * len(str(sum([int(x) for x in vector[::-1]]))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / (n * n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x)))
  return -sum_elements / n - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -((sum_vector / n) + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs((sum(vector)**2 + sum(i**2 for i in vector))) ** 0.5 / (n * 3))




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n) ** 0.5 * ((sum(vector)**2 + sum(i**2 for i in vector))) ** 0.5) / (n * 3)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std(vector) / n)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - ((sum(vector)**2 + sum(i**2 for i in vector))) ** 0.5 / (n * 3))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x)))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  zeros_count = len([x for x in vector if x == 0])
  return -sum_vector / n + zeros_count / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 269}
#island_id: 0
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n + np.mean(np.abs(np.diff(vector))) - 1)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(-x for x in vector) / (n * len(str(int(''.join(map(str, vector))))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([int(x) for x in vector[::-1]]))[2:]) - (len(str(sum([int(x) for x in vector[::-1]]))) if sum([int(x) for x in vector[::-1]]) == 0 else 0)
  return -sum_elements / (n * max(1, trailing_zeros)) if sum_elements != 0 else -trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector)))).rstrip('0').replace('-',''))
  return -sum_elements / (n * max(1, trailing_zeros)) if sum_elements != 0 else -trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(str(sum([int(x) for x in vector[::-1]]))) ** 0.5 if sum(vector) != 0 else -len(str(sum([int(x) for x in vector[::-1]]))))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector/n - (n - sum(1 for x in vector if x)) ** 2 / (n * trailing_zeros) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / (n * trailing_zeros)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / (n * len(str(sum([int(x) for x in vector[::-1]]))) or 1)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * len(str(sum(x for x in vector[::-1])))) if sum(x for x in vector) != 0 else -len(str(sum(x for x in vector[::-1])))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([int(x) for x in vector[::-1]]))[2:].lstrip('0'))
  return -sum_elements / (n * max(1, trailing_zeros)) if sum_elements != 0 else -trailing_zeros




#score: {'n8_size512.txt': 310}
#island_id: 3
#version_generated: 3
#generate time19:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * min(sum_elements, n) / max(sum_elements, n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector)))




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time19:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + ((n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0') + len(vector)) / n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max(((n - i) / n) * 
         sum(map(lambda x: abs(x)**2, filter(None, vector)))
         for i in range(min(n, leading_ones), n)) *
       min(sum_elements, sum(map(abs, vector))) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time19:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(sum(vector) - n/2)**3/(n**3))




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time19:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - (sum(map(lambda x: x**2, vector))) / n)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + sum(0 if i == 0 else 1 for i in vector) / n - (sum(vector)**2 + sum(i**2 for i in vector)) / (n**2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean(np.abs(np.array(vector) - n/2)) + (n - sum(1 for i in vector if i == 0)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:].lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_zeros) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std(vector)**2)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2) / (np.std(vector) + 1e-6))




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector) / (n * len(str(sum([int(x) for x in reversed(vector)]))) or 1)




#score: {'n8_size512.txt': 271}
#island_id: 1
#version_generated: 3
#generate time19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / (n * len(bin(sum(map(int, vector)))[2:]) or 1)




#score: {'n8_size512.txt': 271}
#island_id: 1
#version_generated: 3
#generate time19:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / (n * len(bin(sum([int(x) for x in vector[::-1]]))[2:]) or 1)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time19:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n + np.sum(-p * np.log(p) for p in [i / sum(vector) for i in vector]) / (np.std(vector) + 1e-6))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - len(str(vector).lstrip('0').replace('(', '').replace(')', '')))/n - np.mean((np.array(vector) - np.mean(np.array(vector)))**2)/(np.std(np.array(vector)) + 1e-6))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.var(vector))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - (np.mean((vector - np.mean(vector))**2) / (np.std(vector) + 1e-6)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + sum(0 if i == 0 else 1 for i in vector) / n - (n**2 * np.var(vector)) / (n*(np.mean(vector)**2 + 1e-6)))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time19:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - (vector @ np.flip(vector)) / (n * n))




#score: {'n8_size512.txt': 284}
#island_id: 3
#version_generated: 3
#generate time19:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + np.log((n - leading_ones) / n) * sum_elements)




#score: {'n8_size512.txt': 271}
#island_id: 1
#version_generated: 3
#generate time19:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / (n * len(bin(sum([int(x) for x in vector[::-1]]))[2:]) or 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) - (vector.count(0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n
      )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 271}
#island_id: 1
#version_generated: 3
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / (n * len(bin(sum([int(x) for x in vector[::-1]]))[2:]) or 1)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(str(sum(map(int, reversed(vector))))) or 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(bin(sum(vector))[2:]) if sum(vector) != 0 else 1)




#score: {'n8_size512.txt': 271}
#island_id: 1
#version_generated: 3
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / (n * len(bin(sum([int(x) for x in vector[::-1]]))[2:]) or 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / (n * len(bin(sum([int(x) for x in vector[::-1]]))) or 1)




#score: {'n8_size512.txt': 341}
#island_id: 1
#version_generated: 3
#generate time19:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -sum(x) / (n * len(str(sum([int(y) for y in vector[::-1]]))) or 1)

  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
         {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.abs(np.sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2) - (np.std(vector)**2) / (2*n))




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time19:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - ((np.sum((vector - np.mean(vector))**2)) ** 0.5) / (n * 1.5))




#score: {'n8_size512.txt': 289}
#island_id: 2
#version_generated: 3
#generate time19:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * (max(vector) + min(vector)))




#score: {'n8_size512.txt': 257}
#island_id: 2
#version_generated: 3
#generate time19:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(x for x in vector)) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x]) ** 0.5) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - sum(1 for x in vector if x == 0) / len(vector)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time19:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]])))
  return -(sum_elements / (n * trailing_zeros)) if trailing_zeros else -sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (n - len(str(sum([int(y) for y in vector[::-1]])))) / n)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time19:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(str(sum([int(y) for y in vector[::-1]]))) or 1)




#score: {'n8_size512.txt': 290}
#island_id: 3
#version_generated: 3
#generate time19:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) * 
       sum(1 for elem in vector if elem == 0) / len(vector)
       ) ** 3




#score: {'n8_size512.txt': 291}
#island_id: 3
#version_generated: 3
#generate time19:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
       len([i for i in set(vector) if i == 0]) / unique_elements
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum_elements, sum(map(abs, vector))) / sum_elements
  ) ** 2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(x for x in vector if x != 0) / min(sum(map(abs, vector)), max(vector)))




#score: {'n8_size512.txt': 309}
#island_id: 3
#version_generated: 3
#generate time19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n) if not any(x & (1 << i) for x in vector)))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2) - (np.std(vector)**2) / (4*n))




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + len([i for i in vector if i != 0]) / n - (np.mean((vector - np.mean(vector))**2) + np.std(vector)**2) / (n))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2) - (np.std(vector)**2) / (4*n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + np.log10((n - sum(1 for i in vector if i == 0)) / (n * np.std(vector))) - 0.5)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.median(vector))**2) - (np.std(vector)**2) / (4*n) - (sum(1 for i in vector if i > 0) / (2 * n)))




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - 2 * np.mean((vector - np.mean(vector))**2))




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time19:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) - n/2)**2 + (n - sum(1 for i in vector if i == 0)) / (4*n))




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time19:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    trailing_zeros = len(str(sum([int(y) for y in x[::-1]])))
    return -sum(x) / (n * trailing_zeros or 1)

  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]]))) - len(str(sum_elements))
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -np.sum(x) / (n * len(str(sum([int(y) for y in vector[::-1]]))) or 1)

  cons = ({'type': 'ineq', 'fun': lambda x: np.sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = np.ones(len(vector))
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]])))
  return -sum_elements / (n * trailing_zeros or 1)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std(vector) / (2*np.sqrt(n)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.abs(np.mean(vector) - n/2).sum() + (n - sum(1 for i in vector if i == 0)) / n)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std(vector))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.var((vector - np.mean(vector)))**0.5)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time19:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]])))
  return -sum_elements / (n * trailing_zeros or 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    sum_elements = sum(x)
    trailing_zeros = len(str(sum([int(y) for y in vector[::-1]]))) - len(str(sum_elements))
    return -(sum_elements / (n * trailing_zeros) if trailing_zeros else 0)

  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]]))) - len(str(sum([int(y) for y in vector])))

  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time19:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -(sum(x) + len(str(sum([int(y) for y in x[::-1]])))) / n
  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)
  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) if not any(vector)) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(map(abs, filter(None, vector))) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)) * sum_elements / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n + np.sum([abs(i - n/2) ** 2 for i in vector]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return (sum(x) / sum(vector)) + (n - len(str(sum([int(y) for y in x[::-1]])))) / n

  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -sum(x) / (n * len(str(sum([int(y) for y in x[::-1]]))) or 1)

  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun

  def optimize_coefficients(x):
    return sum(x) / (n * len(str(sum([int(y) for y in vector[::-1]]))) or 1)

  coefficients = [1.5, 2.7] # adjust these as needed
  optimized_objective_function = lambda x: -optimize_coefficients(x)
  optimized_cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
           {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(optimized_objective_function, x0, method='SLSQP', constraints=optimized_cons)

  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -sum(x) / (n * len(str(sum([int(y) for y in vector[::-1]]))) or 1)

  x0 = [1] * len(vector)
  res = minimize(objective_function, x0, method='SLSQP')

  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]]))) - len(str(sum([int(y) for y in vector])))

  return -sum_elements / (n * trailing_zeros if trailing_zeros else 1)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]])))
  return -sum_vector / (n * trailing_zeros or 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    sum_elements = sum(x)
    trailing_zeros = len(str(sum([int(y) for y in vector[::-1]]))) - (n - len(str(sum([int(y) for y in x[::-1]]))))
    return -sum_elements / (trailing_zeros or 1)

  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x)**3, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**3 for x in vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2) - (np.std(vector)**2) / (4*n))




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time19:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2) - (np.std(vector)**2) / (2*n) - abs(np.sum(vector[0:-1]) - np.sum(vector[-1]))/n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2) - (np.std(vector)**2) / (2*n) + np.sum(np.log(np.abs(vector))))




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time19:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean((vector - np.mean(vector))**2) - (np.std(vector)**2) / (2*n) + (len([i for i in vector if i != 0]) / n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -min(x / n for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x / n for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]]))) - (sum([int(y) for y in vector[::-1]]) == 0)
  
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    sum_elements = sum(x)
    trailing_zeros = len(str(sum([int(y) for y in x[::-1]])))
    return -sum_elements / (n * trailing_zeros or 1)

  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP')
  
  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -sum(x) / (n * len(str(sum([int(y) for y in vector[::-1]]))) or 1)

  x0 = [1] * len(vector)
  res = minimize(objective_function, x0, method='SLSQP')

  return -res.fun




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time19:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]])))
  return -sum_elements / (n * trailing_zeros if trailing_zeros else 1)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time19:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]])))
  return -sum_elements / (n * trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time19:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, min(leading_ones, sum_elements)), n)) * 
      sum_elements / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max(((n - i) * min(sum(map(abs, vector)), sum_elements) / min(sum_elements, sum(map(abs, vector)))) / n 
        for i in range(min(n, min(leading_ones, sum_elements)), n)))




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time19:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (max(abs(x) for x in vector)**2/n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(0)) * sum(1 for x in vector if x == 0) + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * len(str(sum([int(x == 0) for x in vector])))) + max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]]))) - len(str(sum_elements))
  return -(sum_elements + (n * trailing_zeros)) / (2 * n)




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time19:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -(sum(x) + len(str(sum([int(y) for y in vector[::-1]]))) * (n - 1))

  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time19:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]]))) - len(str(sum([int(y) for y in str(sum([int(y) for y in vector[::-1]]))[::-1]])))
  
  return -(sum_elements / (n * trailing_zeros or 1))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) - (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(abs(x) for x in vector)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std(vector))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([i**2 for i in vector])**0.5)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time19:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.median(np.abs(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -min((x/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time19:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - ((np.sum((vector - np.mean(vector))**2)) / (2*np.var(vector)*(n+1))) - np.sqrt(np.sum((vector-np.mean(vector))**2))/((n+1)*np.std(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       min(np.sum(np.abs(np.array(vector))), sum(vector)) / min(sum(vector), np.sum(np.abs(np.array(vector))))
       )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) / n for i in range(min(n, leading_ones), n)) * 
       np.exp(-leading_ones / n) * 
       sum(map(abs, vector)) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
      np.exp(-leading_ones / (2 * n)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    sum_vector = sum(x)
    trailing_zeros = len(str(sum_vector))
    return -(sum_vector + trailing_zeros) / n

  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP')
  return -res.fun




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time19:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(y) for y in vector[::-1]])))
  return -sum_elements / (n * trailing_zeros or 1)




#score: {'n8_size512.txt': 272}
#island_id: 2
#version_generated: 3
#generate time19:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * sum(1 for x in vector if x)) + len([i for i in range(len(vector)) if vector[i] == 0]))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(sum(1 for x in vector))) + (len(vector) - sum(1 for x in vector if x)) ** 2 / len(str(sum(1 for x in vector)))) - min((x**2/len(str(sum(1 for x in vector)))) for x in vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time19:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / (4 * n)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time19:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + sum([i*(len(vector)-2*i+1)//2 for i in range(min(len(vector),n//2+1))])




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time19:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  return -min((x/n) for x in vector)
  return 0




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time19:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum(x**2 for x in vector) / (n * n)) - min((x/n) for x in vector)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time19:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted([x for i, x in enumerate(vector) if x], reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time19:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.sqrt((np.var(vector) ** 2 + np.sum((vector - np.mean(vector)) ** 2)) / (n ** 2)))




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time19:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std((vector - np.mean(vector)))**0.5)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time19:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std((vector - np.mean(vector)))**0.5)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time19:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), min(n, len(vector))))
  )




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time19:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), min(n, len(vector))))
)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum(vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time19:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       (n - len([i for i in vector if i != 0])) / n * 
       sum(map(abs, filter(None, vector)))/sum(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/max(1, sum(vector))
      )




#score: {'n8_size512.txt': 257}
#island_id: 3
#version_generated: 3
#generate time19:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if not elem) / n * 
       sum(map(abs, filter(None, vector))))/min(sum(vector), sum(map(abs, vector)))




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time19:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -(sum(x) + len(str(sum([int(y) for y in vector[::-1]]))) - n)
  
  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)
  
  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    sum_elements = sum(x)
    trailing_zeros = len(str(sum([int(y) for y in vector[::-1]])))
    return -sum_elements / (n * trailing_zeros or 1)

  x0 = [1] * len(vector)
  res = minimize(objective_function, x0, method='SLSQP')

  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -(sum(x) + len(str(sum([int(y) for y in x[::-1]]))) - n)

  cons = ({'type': 'ineq', 'fun': lambda x: sum(x) - sum(vector)}, 
      {'type': 'ineq', 'fun': lambda x: n - len(str(sum([int(y) for y in x[::-1]])))})
  
  x0 = [1]*len(vector)
  res = minimize(objective_function, x0, method='SLSQP', constraints=cons)

  return -res.fun




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time19:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (n * len(str(sum([int(y) for y in vector[::-1]]))) or 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    return -(sum(x) + len(str(sum([int(y) for y in x[::-1]]))) / n)

  res = minimize(objective_function, [1]*len(vector), method='SLSQP')

  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time19:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective_function(x):
    sum_elements = sum(x)
    trailing_zeros = len(str(sum([int(y) for y in vector[::-1]])))
    return -sum_elements / (n * trailing_zeros or 1)

  x0 = [1] * len(vector)
  res = minimize(objective_function, x0, method='SLSQP')
  return -res.fun




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  def objective(x):
    return -x[0] * abs(sum(vector) - n/2) - x[1] * (n - sum(1 for i in vector if i == 0)) / n - x[2] * np.std(vector)
  
  res = minimize(objective, [1.0, 1.0, 1.0], method="SLSQP")
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std(vector))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.std(vector))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean((vector - np.mean(vector))**2)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time19:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 if i == 0 else np.log(i) for i in vector) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time19:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  unique_elements = len(set(vector))
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('1'))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_zeros, n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)**2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
     sum(map(abs, filter(None, vector)))/sum_elements)**3




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([i**2 for i in vector])**0.5)




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time19:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - 2 * np.mean(np.abs(np.array(vector) - np.mean(vector))))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time19:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / len([x for x in vector if x != 0]) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)/len(str(sum([int(x == 0) for x in vector])))) - (max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) - max(-sum_elements, 0)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - abs(min(abs(x) for x in vector)) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) + max(-sum(vector), 0)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time19:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(abs(x)**3 for x in filter(lambda x: x != 0, vector)) / 
    min(sum_elements**2, sum(abs(x)**3 for x in vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**3 for x in vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(abs(x) ** 3 for x in filter(lambda x: x != 0, vector)) / min((sum(vector)) ** 2, (sum(abs(x) ** 3 for x in vector))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time19:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len(str(vector).rstrip('0')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time19:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(vector).lstrip('0'))
  return -sum_elements + leading_ones / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time19:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time19:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time19:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1])
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time19:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (trailing_zeros / (n - 1) if n > 1 else trailing_zeros))




#score: {'n8_size512.txt': 307}
#island_id: 3
#version_generated: 3
#generate time19:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) * (n - sum(map(abs, vector)))/n)




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time19:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([i ** (0.5 / len(set(vector))) for i in vector]) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(map(abs, filter(None, vector)))/sum(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time19:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
          min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
          sum(abs(x) for x in vector) / sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time20:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  def objective_function(params):
    sum_elements, trailing_zeros = params
    return -sum_elements - trailing_zeros / n + np.sum(vector) - 0.1 * len(vector)

  init_guess = [np.sum(vector), len(vector)]
  result = minimize(objective_function, init_guess)
  return -result.fun




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time20:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / n - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time20:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time20:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1) + 
      sum_elements / (n ** (1/3)) + np.log(len(set(vector)) + 1))




#score: {'n8_size512.txt': 295}
#island_id: 3
#version_generated: 3
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1) + 
      (n - len(set(vector))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([i for i in vector if i])**0.5/len(set(vector)) + 
      min(n - sum(1 for _ in vector).bit_length(), n) / n * max(sum(abs(i) for i in set(vector))/sum(vector), 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / n - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time20:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - (vector.index(0) + 1) / n if 0 in vector else -sum_elements




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time20:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  return -(math.log2(trailing_zeros)) * (n - sum_vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (sum_vector ** 2) / (n ** 2)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time20:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / min(trailing_zeros, n) if sum_vector else 0




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1]
  return -sum_elements - len(trailing_zeros) / n




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 2
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1])
  return -(sum_elements / max(1, sum(map(abs, vector))) + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[0] == 0]))[:-1])
  return -sum_elements + leading_zeros / n




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([abs(i - n/2) for i in vector]) + (n - sum(1 for i in vector if i == 0)) / n)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time20:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time20:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / max(1, sum(map(abs, vector))) + len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1]) / n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time20:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1])
  return -(sum_elements / max(1, sum(map(abs, vector))) + trailing_zeros / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   max((n - i) / n for i in range(min(n, leading_ones), n)) * 
   sum_elements / min(sum_elements, sum(map(abs, vector)))
 ) ** 2 * max(1, sum_elements)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time20:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1])
  return -(sum_elements / max(1, sum(map(abs, vector))) + trailing_zeros / n)**2 - abs(sum_elements) * abs(trailing_zeros)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time20:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / max(1, sum(map(abs, vector)))) ** 0.5 + len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1]) / n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time20:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1]
  return -(sum_elements / max(1, sum(map(abs, vector))) + len(trailing_zeros) / n)**2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(map(abs, filter(None, vector)))/sum_elements)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time20:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements + 
       sum(1 for i in range(len(vector)-1, -1, -1) if vector[i] == 0) / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
    sum(abs(x) for x in set(vector)) / sum_elements)




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time20:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements + 
       sum_elements/(n*(unique_elements-1)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time20:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1])
  return -(sum_elements / max(1, sum(map(abs, vector))) + trailing_zeros / n)**2 - abs(sum_elements) * abs(trailing_zeros) + (sum_elements > 0 and sum(map(lambda x: x**2, filter(lambda x: x != 0, vector)), 0))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 317}
#island_id: 0
#version_generated: 3
#generate time20:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n) * np.exp(-np.mean([x**2 for x in vector])**0.5)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time20:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - abs(np.mean([x**2 for x in vector])**0.5)
  - np.std([x for x in vector if x != 0]) * len([x for x in vector if x != 0])




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) * np.exp(-leading_ones / n) / n)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  + (sum(1 for i in vector if i == 0) / n)**0.25




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5) \
      - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0]) * (n/len(vector)) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - (max(abs(x) for x in vector) ** 2 / (n * trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - (max(abs(x) for x in vector) ** 2 / (n * trailing_zeros))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector))
  )




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time20:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time20:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time20:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      np.exp(-leading_ones / n) * 
      sum(map(abs, vector)) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(str(sum([int(x == 0) for x in vector]))) + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(str(sum([int(x == 0) for x in vector])))) - (max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)/len(str(sum([int(x == 0) for x in vector])))) - (max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - (max(abs(x) for x in vector) ** 2 / (n * trailing_zeros))




#score: {'n8_size512.txt': 255}
#island_id: 3
#version_generated: 3
#generate time20:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) ** 3 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
    (sum_elements ** 2) / ((n * trailing_zeros) ** (1/3)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**0.5 for x in set(vector)) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(abs(x)**4 for x in filter(lambda x: x != 0, vector)) / min((sum(vector))**2, (sum(abs(x)**4 for x in vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([abs(x)**4 for x in vector])**0.8 + 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min((sum(vector))**2, (sum(abs(x) ** 3 for x in vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )**2




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n
  - np.sum([(i/2)**2 for i in [n - sum(1 for j in vector if j == 0)]]) * (n - sum(1 for i in vector if i == 0))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n
  - np.exp(-np.sum([i**2 for i in vector])/(4*np.std([i for i in vector])**2))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time20:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n
  - np.mean([abs(x) for x in vector]) / n




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + len([x for x in vector if x == 0]) / (n * (n+1)/2)) - np.mean([x**2 for x in vector])**0.5




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])**0.5




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - np.mean([abs(x) for x in vector]) * len([x for x in vector])




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([x for x in vector if x == 0]) / n - abs(sum(vector) - n/2)) + np.mean([abs(x) for x in vector])**0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + len([i for i in vector if i == 0]) / n)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector])) * len([x for x in vector])
  - (n - sum(1 for i in vector if i == 0)) / n
  - np.mean([abs(x) for x in vector]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n*(n**2)) + (n - sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2) - len([i for i in vector if i == 0]) / n + (np.mean(np.abs(vector))) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 + (n - sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time20:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) - n/2)**2 + (n - sum(1 for i in vector if i == 0)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 297}
#island_id: 2
#version_generated: 3
#generate time20:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / (2 * n)




#score: {'n8_size512.txt': 275}
#island_id: 3
#version_generated: 3
#generate time20:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
  ) * (1 if leading_ones > 0 and sum_elements < 5 else 2)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
       (1 if leading_ones > 0 else 2) + 
       sum((i % n) for i in range(n)) / n
  )




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time20:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
       (1 if leading_ones > 0 else 2) * 
       (1 + (n - leading_ones) / n)
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
     )
  if leading_ones > 0:
    return -(sum_elements ** (0.5 / len(set(vector))) + 
        max((n - i) / n for i in range(min(leading_ones, n), n)) * 
        sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
        )
  else:
    return -(sum_elements ** (0.5 / len(set(vector))) + 
        max((n - i) / n for i in range(n, leading_ones-1, -1)) * 
        sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
        )




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2)) ** 0.5 + (n - sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2) ** 2 / (n * n) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - n/2) - (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time20:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
    + (n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x)**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements**2, len(vector)**2)
       + (n - trailing_zeros) / n
       + np.log(len(set(vector))))




#score: {'n8_size512.txt': 307}
#island_id: 3
#version_generated: 3
#generate time20:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(x**3 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
       + (n - len(str(sum(1 for elem in vector if elem == 0)))) / n
       - (sum(x for x in vector) ** 2) / ((max(vector) + min(vector)) * len(vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 0.5 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time20:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1])
  return -(sum(map(abs, vector)) + trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum([i for i in range(len(vector)) if vector[i] == 0]) - sum(min(i, len(vector)-1-i) for i in range(int(n/2)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum([min(i, len(vector)-1-i) for i in range(int(n/2))]) - sum(x for x in set(sorted(vector))) * n / len(set(sorted(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x)**3 for x in vector) / min(sum_elements, sum(abs(x) for x in vector))
      )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n))
    )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(len(vector) - leading_ones, n) / n * 
    np.exp(-leading_ones / n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - leading_ones) / n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time20:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) + len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time20:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / max(1, sum(map(abs, vector))) + len(bin(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[2:]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time20:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / max(1, sum(map(abs, vector))) + len(str(bin(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0])))[2:]) / n)




#score: {'n8_size512.txt': 259}
#island_id: 2
#version_generated: 3
#generate time20:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / sum(x for x in vector)) - (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time20:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len(str(sum(x == 0 for x in vector)))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i == 0) / n)**2 - np.mean([x**2 for x in vector])**0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) + sum(x for x in vector if x == 0)) / (n * (n/2)**2)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x**3 for x in vector)/n**(3/2)




#score: {'n8_size512.txt': 287}
#island_id: 3
#version_generated: 3
#generate time20:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** 0.5) / len(set(vector))) + (n - sum(1 for elem in vector if elem == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)) ** (0.5 * len(set(vector))) + 
      (n - sum(1 for elem in vector if elem == 0)) / n)




#score: {'n8_size512.txt': 288}
#island_id: 3
#version_generated: 3
#generate time20:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 if x else 0 for x in vector))[2:].count('1')) / n)




#score: {'n8_size512.txt': 319}
#island_id: 3
#version_generated: 3
#generate time20:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:]) - bin(sum(1 for elem in vector if elem == 0))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n**2) - ((n - sum(1 for i in vector if i == 0)) / n)**2




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n
  - np.sum([(i/2)**2 for i in [n - sum(1 for j in vector if j == 0)]]) * (n - sum(1 for i in vector if i == 0))
  + abs(np.polyval(polyfit([x**3 for x in vector], [0]*len(vector), 1), range(len(vector)))).sum()




#score: {'n8_size512.txt': 312}
#island_id: 0
#version_generated: 3
#generate time20:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n**2 * np.var([x for x in vector])) + sum(x**3 for x in vector) / (n**(5/2)) + abs(sum(1 for i in vector if i == 0) - n/2) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i == 0) ** 2 / (n * sum(x**2 for x in vector))) - abs(sum(vector) - n/2)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n
  + (sum(1 for i in vector if i == 0) / n)**0.25
  - np.sum(np.abs(np.array(vector)))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n
  + np.sum([i**2/(i+1) for i, i in enumerate(vector)])**0.25




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i == 0) + sum(abs(i)**2 for i in vector)) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (n - sum(1 for i in vector if i == 0)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5 + (n - sum(1 for i in vector if i == 0)) / n)




#score: {'n8_size512.txt': 263}
#island_id: 1
#version_generated: 3
#generate time20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** 0.5 + len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1]) / n) ** 2)




#score: {'n8_size512.txt': 263}
#island_id: 1
#version_generated: 3
#generate time20:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 0.5 + len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector/trailing_zeros




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time20:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  return -min(sum_vector/trailing_zeros if trailing_zeros > 0 else float('inf'))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / trailing_zeros




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  + (sum(1 for i in vector if i == 0) / n)**0.25
  - np.sum([(i/n) ** 2 for i in [x**2 for x in vector]])**0.5




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  + (sum(1 for i in vector if i == 0) / n)**0.25
  - np.sum(sorted(vector)[::-1]) ** 0.5




#score: {'n8_size512.txt': 269}
#island_id: 0
#version_generated: 3
#generate time20:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n) ** 2 + np.sum([x**4 for x in vector])**(-1/3)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  + (sum(1 for i in vector if i == 0) / n)**0.25
  - np.sum([x**3 for x in vector])**0.333




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum_elements ** 2, sum(x**3 for x in vector)))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time20:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[:-1])
  return -(sum_elements / max(1, sum(map(abs, vector))) + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time20:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([i * (10 ** i) for i in range(len(vector)) if vector[-i] == 0]))[2:]) - len(bin(sum(vector))[2:])
  return -(sum_elements / max(1, sum(map(abs, vector))) + trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))

  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / sum_elements + 
       (n - trailing_zeros) / n)**2




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n
  - math.exp(-np.sum([i**2 for i in vector])/(4*np.std([i for i in vector])**2))
  + np.sum([i**2/(i+1) for i, i in enumerate(vector)])**0.25
  - sum(math.log(i+1) for i in [n-i for i in vector if i != 0]) / len([x for x in vector if x != 0])




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (n - sum(1 for i in vector if i == 0)) / n
  - np.exp(-np.sum([i**2 for i in vector])/(4*np.std([i for i in vector])**2))
  + np.sum([i**(1/3) for i in vector])/(n**(1/2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean([x**2 for x in vector])**0.5 + (n - sum(1 for i in vector if i == 0)) / n) - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / max(unique_elements, 1)) + 
       (n - leading_ones) / n * sum(map(abs, filter(None, vector)))
       ) ** 2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum(map(abs, vector)) ** (0.5 / unique_elements) + sum_elements / min(sum_elements, unique_elements))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time20:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       sum(abs(x) for x in filter(None, vector)) / min(sum(abs(x) for x in vector), len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2)) + (n - sum(1 for i in vector if i == 0)) / n
  - np.mean([x**2 for x in vector])**0.5
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  + (np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n)))
  - np.prod([1 / (x + 1) for x in set(vector)]) / n




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector]) ** 2 * len([x for x in vector])




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])/(n*np.sqrt(len([x for x in vector if x != 0])))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  + len([x for x in vector if x < 0])**(-1)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
           min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time20:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)) - 
       (sum_elements / len(vector)))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time20:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time20:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time20:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros / n) ** 3) + (abs(sum_elements - len(vector) // 2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time20:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector))))) - bin(int(''.join(map(str,vector)))).rfind('0') - 1
  return -(sum_elements + (trailing_zeros / n) ** 2) * ((sum_elements > len(vector) // 2) > 0)




#score: {'n8_size512.txt': 258}
#island_id: 1
#version_generated: 2
#generate time20:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * np.exp((trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time20:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 290}
#island_id: 2
#version_generated: 3
#generate time20:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time20:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time20:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1/3)
  + (np.std([x for x in vector if x != 0]) * np.mean([x**2 for x in vector]))**(1/4)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time20:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])**0.5
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - min(len([x for x in vector if x < 0]), len([x for x in vector if x == 0]))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    np.log((n - leading_ones) / n) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
    sum(map(lambda x: abs(x) * (x < 0), filter(None, vector)))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time20:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
       )**3




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time21:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time21:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time21:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n - 1) ** 2) // n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * n)) - min((x/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * n)) - min((x/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * n)) - min((x/n) for x in vector)




#score: {'n8_size512.txt': 282}
#island_id: 3
#version_generated: 3
#generate time21:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) +
       sum(1 for _ in itertools.groupby(sorted(vector), key=lambda x: x == 0)))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time21:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time21:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n-1, -1, -1) if vector[i] == 0) / n)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time21:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n) ** 0.5
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])**0.25
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1/3)
  + (np.std([x for x in vector if x != 0]) * np.mean([x**2 for x in vector]))**(1/4)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.exp(-sum(1 for i in vector if i > 0) / (n * np.log(n))) + np.mean([x**2 for x in vector])**0.5




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time21:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(log10(np.array([i**2 for i in vector])))/(n*log10(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1/3)
  + (np.std([x for x in vector if x != 0]) * np.mean([x**2 for x in vector]))**(1/4)




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time21:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time21:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - sum(x**2 for x in vector) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 0.5




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time21:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time21:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  + len([x for x in vector if x < 0])**(-1)
  - (np.std([x for x in vector]) / np.mean([x for x in vector]))**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (n - sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 315}
#island_id: 0
#version_generated: 3
#generate time21:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i == 0) / n + (n - sum(i for i in vector)) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - n/2) - sum(1 for i in vector if i == 0) / n + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time21:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, ((sum_elements > len(vector) // 2) > 0))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time21:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + np.exp(-len(vector) / (n ** 0.5))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time21:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time21:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - np.mean([x**2 for x in vector])**0.5 * len([x for x in vector if x != 0])
  - abs(np.std([x for x in vector])) * len([x for x in vector])




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(np.abs(vector)) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i == 0) / n + 
       (np.sum(np.array(vector)) - n/2)**2 / (n**2 * np.std([x for x in vector])**2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 + (n - sum(1 for i in vector if i == 0)) / n - np.sum(np.log(np.array([i**2 for i in vector]))) + len([x for x in vector if x > 0])/(n*np.sqrt(len([x for x in vector if x != 0])))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean([x**2 for x in vector]))**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector])**2 * len([x for x in vector])
  - math.sqrt(sum(1 for x in vector if x < 0)) / (math.sqrt(len([x for x in vector if x != 0]))*gmean([x for x in vector]))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((np.sum(vector) - n/2)**2 + (n - sum(1 for i in vector if i == 0)) / n + np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector]) ** 2 * len([x for x in vector])
  - np.var([x for x in vector if x != 0]) * (sum(1 for i in vector if i < 0))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - (max(abs(x) for x in vector)**2 / (n ** 2 * trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - ((max(abs(x) for x in vector)**2)/(n*trailing_zeros))




#score: {'n8_size512.txt': 255}
#island_id: 2
#version_generated: 3
#generate time21:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * sum(1 for x in vector if x))) - (max(abs(x) for x in vector)**2/(n*len([i for i in range(len(vector)) if vector[i] == 0])))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + (n - sum(1 for x in vector if x)) ** 2 / (4*n) - abs(sum(x for x in vector) - n/2) / 2




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time21:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 268}
#island_id: 2
#version_generated: 3
#generate time21:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + (n - len([i for i in range(len(vector)) if vector[i] == 0])) / n




#score: {'n8_size512.txt': 268}
#island_id: 2
#version_generated: 3
#generate time21:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + sum(x > 0 for x in vector) / n




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time21:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector]) ** 2 * len([x for x in vector])
  - (np.std([x for x in vector]) / np.mean([x for x in vector]))**2




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time21:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector])**2 * len([x for x in vector])
  - (sum(1 for i in vector if i < 0) / n)**2




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time21:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros ** 2) / (n * len(vector)) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time21:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time21:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10**(-5))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 266}
#island_id: 1
#version_generated: 3
#generate time21:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 298}
#island_id: 2
#version_generated: 3
#generate time21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * n) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * n)) - min((x/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * n)) - min((x/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * n)) - min((x/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4) + (sum_elements > 0.5 * n) * sum_elements




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time21:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time21:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(log10(np.array([i**2 for i in vector])))/(n*log10(n))
  - sum(x for x in vector if x > 0)/n
  + len([x for x in vector if x < 0])**(-1)
  - log10(sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n**2 + abs(sum(x for x in vector) - n/2)) 
  + len([x for x in vector if x < 0])**(-1)
  - sum(1 for i in vector if i > 0) / n
  - math.exp(-len([x for x in vector if x < 0]))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**0.5 for x in vector) - min(n - len([i for i,x in enumerate(vector) if x==0]), n) / n




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time21:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)) + 
       (n - leading_ones) / n * sum(x**4 for x in filter(lambda x: x != 0, vector)) / 
       max(sum(map(abs, vector)), sum(x**4 for x in vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (len([i for i in range(len(vector)) if vector[i] == 0]) ** 2) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time21:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**0.5/len(set(vector)) for x in vector) - (n - len([i for i,x in enumerate(vector) if x==0]).__floordiv__(n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(x ** 2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
      (1 if leading_ones > 0 else 2) + 
      sum((i % n) for i in range(n)) / n
  )




#score: {'n8_size512.txt': 264}
#island_id: 1
#version_generated: 3
#generate time21:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + np.tanh(np.abs(sum_elements / len(vector) - 0.5))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 265}
#island_id: 1
#version_generated: 3
#generate time21:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n-trailing_zeros)/10)**2)/(n**2) - ((abs(sum_elements - n/2) > n/4) > 0) * min(trailing_zeros, n//4)




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time21:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)
  if abs(sum_elements - len(vector) // 2) > len(vector) // 4:
    return min(trailing_zeros, len(vector) // 4)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time21:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time21:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time21:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + len(vector))) ** 2




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time21:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)
  if abs(sum_elements - len(vector) // 2) <= len(vector) // 4:
    return -sum_elements / len(vector) + trailing_zeros




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time21:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 260}
#island_id: 1
#version_generated: 3
#generate time21:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4) - np.sum(np.abs(vector - np.mean(vector)))




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time21:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4) + max(abs(sum_elements), trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time21:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time21:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2, (abs(sum_elements - len(vector) // 2) > len(vector) // 4))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time21:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time21:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - abs(np.std([x for x in vector])) * len([x for x in vector])
  - log10((sum(1 for i in vector if i == 0) or 1) / n)**2
  + (n/np.log10(n)) * sum(x**2 for x in vector)
  - (len([i for i in vector if i > 0]) / n)**(-1)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / (n * len(str(sum([int(x == 0) for x in vector]))))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time21:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time21:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time21:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))
  return sum_vector/n + (n - sum(1 for x in vector if x))/n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       sum(1 if i % n != 0 and i < n else 0 for i in range(n)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
       (1 if leading_ones > 0 else 2) + 
       (sum_elements ** (0.5 / len(set(vector)))) * (n - leading_ones) / n
  )




#score: {'n8_size512.txt': 317}
#island_id: 0
#version_generated: 3
#generate time21:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n) * np.exp(-np.std([x for x in vector])**2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n * n) - sum(1 for i in vector if i == 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 / (n**2 + sum(x for x in vector)**2) + (len([x for x in vector if x == 0]) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 / (n**2 + 0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])**1.5
  - sum(x for x in vector if x == 0) / n**1.25
  + (n - np.sum([x for x in vector if x > 0])) / (n*np.log(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n)) - sum(x for x in vector if x > 0)/n)
  - (np.mean([x**2 for x in vector])**0.5) * len([x for x in vector])




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time21:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + np.cos(np.pi * (abs(sum_elements - len(vector) // 2) / (len(vector) // 4)))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time21:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)
  if abs(sum_elements - len(vector) // 2) <= len(vector) // 4:
    return -(sum_elements / len(vector)) + trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time21:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n * (abs(sum_elements - len(vector) // 2) > len(vector) // 4)) / (n * len(vector))) ** 2




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time21:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector])**2 * len([x for x in vector])
  - math.sqrt(sum(1 for x in vector if x < 0)) / (math.sqrt(len([x for x in vector if x != 0]))*gmean([x for x in vector]))
  + math.exp(-sum(x for x in vector)**2/(n*np.sum(np.log(np.array([i**2 for i in vector])))))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time21:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector])**2 * len([x for x in vector])
  - math.sqrt(sum(1 for x in vector if x < 0)) / (math.sqrt(len([x for x in vector if x != 0]))*gmean([x for x in vector]))
  + math.exp(-n) * sum(x for x in vector)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time21:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean([x**2 for x in vector]))**0.5)
  - (gmean([x for x in vector])**(-len([x for x in vector if x < 0])))
  - math.sqrt(sum(1 for x in vector if x < 0)) / (math.sqrt(len([x for x in vector if x != 0]))*gmean([x for x in vector]))
  + sum(x for x in vector if x > 0)**(-1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - n/2) - (n - sum(1 for i in vector if i == 0)) / n + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector])**2 * len([x for x in vector])
  + math.sqrt(sum(1 for x in vector if x < 0)) / (math.sqrt(len([x for x in vector if x != 0]))*gmean([x for x in vector]))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n) - np.mean([x**2 for x in vector])**0.5
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - gmean([x for x in vector])**2 * len([x for x in vector])
  - (math.sqrt(sum(1 for x in vector if x < 0)) / (math.sqrt(len([x for x in vector if x != 0]))*gmean([x for x in vector])))
  + math.exp(-n) * sum(x for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(0 if x == 0 else 1 for x in vector) / n - sum(x**2 for x in vector)**0.5 + (n/2 - np.mean(vector)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean([abs(i) for i in vector]) + (n - sum(1 for i in vector if i == 0)) / n)
  - abs(np.std([i for i in vector if i != 0])) * len([i for i in vector if i != 0])




#score: {'n8_size512.txt': 311}
#island_id: 3
#version_generated: 3
#generate time21:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in vector if x > 0) * max(0, bin(sum(1 for elem in vector if elem == 1))[2:].count('0')) / 
       sum(map(lambda x: abs(x), vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
    (min(sum_elements ** 2, sum(x**3 for x in vector)) ** 0.5)
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
      min(sum_elements ** 2, sum(x**3 for x in vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector))
  )




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time21:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  + len([x for x in vector if x < 0])**(-1)
  - (np.std([x for x in vector]) / np.mean([x for x in vector]))**2
  - abs(np.max(vector)) * len([x for x in vector if x > 0])




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time21:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  + len([x for x in vector if x < 0])**(-1)
  - (np.std([x for x in vector]) / np.mean([x for x in vector]))**2
  - gmean(np.abs(vector)) * np.var(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean([x for x in vector]) - (n/2))**2 + ((n - sum(1 for i in vector if i == 0)) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 268}
#island_id: 2
#version_generated: 3
#generate time21:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -sum_vector / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - trailing_zeros / n




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time21:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > 4*(len(vector) // 5)) > 0) * min(trailing_zeros, len(vector) // 4)
  if abs(sum_elements - len(vector) // 2) <= (len(vector) // 5):
    return -(sum_elements / len(vector)) + trailing_zeros




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time21:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2 + min(trailing_zeros, len(vector) // 4)




#score: {'n8_size512.txt': 277}
#island_id: 1
#version_generated: 3
#generate time21:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  mean_deviation = abs(sum_elements - len(vector) // 2) / (len(vector) ** 0.5)
  return -sum_elements * (1 + np.exp(-mean_deviation)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time21:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * min(trailing_zeros, len(vector) // 4)




#score: {'n8_size512.txt': 272}
#island_id: 3
#version_generated: 3
#generate time21:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, len(vector)), 0, -1) if vector[-i] == 0) * 
       sum(vector) / min(sum(vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + sum(1 if x else 0 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(1 for x in vector if x))




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time21:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean([abs(x) for x in vector])**0.5 - (n - sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i < 0) / n + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n)) - (sum(1 for i in vector if i == 0) / n)**2)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time21:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  mean = sum_elements / len(vector)
  return -mean * (1 + abs(mean - 0.5) ** 2) - ((abs(sum_elements - len(vector) // 2) > 4*(len(vector) // 5)) > 0) * min(trailing_zeros, len(vector) // 4) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time21:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time21:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > 4*(len(vector) // 5)) > 0) * min(trailing_zeros, len(vector) // 4)
  if abs(sum_elements - len(vector) // 2) <= (len(vector) // 5):
    return -(sum_elements / len(vector)) + trailing_zeros
  return sum_elements ** 0.5 - sum_elements / len(vector) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean([x**2 for x in vector]))**0.5)
  - (gmean([x for x in vector])**(-len([x for x in vector if x < 0])))
  - math.sqrt(sum(1 for x in vector if x < 0)) / (math.sqrt(len([x for x in vector if x != 0]))*gmean([x for x in vector]))
  + sum(x for x in vector if x > 0)**(-1)
  - np.sum(np.log2(np.array([i**2 for i in vector]))) / n




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time21:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean([x**2 for x in vector]))**0.5)
  - gmean([x for x in vector])**(-len([x for x in vector if x < 0]))
  - math.sqrt(sum(1 for x in vector if x < 0)) / (math.sqrt(len([x for x in vector if x != 0]))*gmean([x for x in vector]))
  + sum(x for x in vector if x > 0)**(-1)
  - sum(1 for i in vector if i == 0) ** (-1)
  - math.exp(-(n/2) * (np.std([x for x in vector]) / np.mean([x for x in vector]))**2)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector)), 0) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector)))) - sum(1 for i in range(len(vector) - 1, -1, -1) if vector[i] == 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time21:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + sum(x**2/n for x in vector) - max((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i < 0) / n)**2 - sum(x**2 for x in vector)**0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) - n/2)**2 + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5
  - abs(np.std([x for x in vector])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2 + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(log(np.array([i**2 for i in vector])))/(n*log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std([x for x in vector]) / np.mean([x for x in vector]))**2
  - abs(np.max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time21:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - n/2)**2 + (n - sum(1 for i in vector if i == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.tan(np.arccos(sum_elements/len(vector))) if len(vector) != 0 else 0




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 2
#generate time21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 / len(vector) + (trailing_zeros/n)**2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - leading_ones, n) / n * 
      sum(x**2 for x in filter(None, vector)) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * 
       sum(x**2 for x in vector) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - sum(1 for elem in vector if not bool(elem)), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector)) + 
       sum(map(lambda x: abs(x), vector)) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time21:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) * max(abs(x) for x in vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time21:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(leading_ones)[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector))
      )




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time21:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_zeros, n) * 
       min(n, len(vector)) / (n * len(vector)))




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time21:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > 0) and trailing_zeros > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = np.mean(vector)
  std_dev = np.std(vector)
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(mean)**0.5) 
  - abs(std_dev) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (std_dev / mean)**2
  - abs(max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time22:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  - np.sum(log(np.array([i**2 for i in vector])))/(n*log(n))
  + sum(x for x in vector) ** (-1)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time22:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * np.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time22:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-(trailing_zeros / (n+1))) * (1 if sum_elements < len(vector) // 3 else 0)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time22:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-np.log10(n)**2/trailing_zeros)




#score: {'n8_size512.txt': 284}
#island_id: 3
#version_generated: 3
#generate time22:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (sum_elements - leading_ones) / (min(sum_elements, len(vector)) if sum_elements > 0 else len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min((n - i) / n for i in range(n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (min(sum_elements, len(vector)) if sum_elements > 0 else len(vector)))




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time22:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(np.mean(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - 
           np.std([x for x in vector if x != 0])**0.5) ** 2
  - abs(np.max(vector) * len([x for x in vector if x > 0])) ** 2
  + (np.sum(np.log(np.array([i**2 for i in vector]))) / (n * np.log(n))) ** 2
  - sum(x for x in vector if x > 0) / n
  - len([x for x in vector if x < 0]) ** (-1)
  + (np.sum(vector) / n) ** (-1.5)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - abs(np.std(vector)) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(log(np.array([i**2 for i in vector])))/(n*log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std(vector) / abs(max(vector)))**2
  + np.sum(np.abs(np.array(list(set(vector))))) 
  - abs(np.max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -((sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + 
       ((max(abs(x) for x in vector)**2/(n*trailing_zeros)) - 
       (min(abs(x) for x in vector) * n / len(vector))))




#score: {'n8_size512.txt': 255}
#island_id: 2
#version_generated: 3
#generate time22:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)/len([i for i in range(len(vector)) if vector[i] == 0])) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 287}
#island_id: 2
#version_generated: 3
#generate time22:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros) * (min((x**2/n) for x in vector) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * n)) - sum(x / n for x in sorted(vector)[::-1])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * n)) - min((x/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * n)) - min((x/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time22:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time22:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(x for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) - min(abs(x) for x in vector) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (sum(vector)**2)/n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -sum(vector) - (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time22:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - abs(np.mean([x**2 for x in vector])**0.5)
  - abs(np.std([x for x in vector if x != 0])) * len([x for x in vector if x != 0])
  + np.sum(math.log(np.array([i**2 for i in vector])))/(n*math.log(n))
  - sum(x for x in vector) / n
  - math.exp(-len([x for x in vector if x < 0]))
  - (np.std([x for x in vector]) / np.mean([x for x in vector]))**2
  - abs(np.max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return - (abs(sum(vector) - n/2) + len([x for x in vector if x == 0]) / n)**1.5 
  - abs(np.mean([x**2 for x in vector])) * np.mean([x for x in vector])**(-1)
  - np.log(len([x for x in vector if x != 0]))
  + gmean(vector) ** (-1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = np.mean(vector)
  std_dev = np.std(vector)
  return -(abs(mean) + abs(std_dev)) * (n - sum(1 for i in vector if i == 0)) / n - (sum(1 for i in vector if i != 0) / n)**2




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = np.mean(vector)
  std_dev = np.std(vector)
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(mean)**0.5) 
  - abs(std_dev) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (std_dev / mean)**2
  - abs(max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)
  - np.sum(np.exp(-(np.array(vector)-mean)**2/(2*std_dev**2)))/(n*np.sqrt(2*np.pi)*std_dev)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** 2)




#score: {'n8_size512.txt': 295}
#island_id: 3
#version_generated: 3
#generate time22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n + 
       abs(sum_elements) / (unique_elements * sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - (np.std(vector)**2 / (2*n))
  - (sum(1 for i in vector if i == 0) / n)**2
  - np.sum(log(np.array([i**2 for i in vector])))/(n*log(n))
  + sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std(vector) / abs(max(vector)))**2
  - np.sum(np.abs(np.array(list(set(vector))))) 
  - abs(np.max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - abs(np.std(vector)) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(log(np.array([i**2 for i in vector])))/(n*log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std(vector) / abs(max(vector)))**2
  + np.sum(np.abs(np.array(list(set(vector))))) 
  - abs(np.max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-1.5)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - (np.std(vector) / np.mean(vector))**2
  - len([x for x in vector if x != 0])**(-1)
  - np.sum(log(np.array([i**2 for i in vector])))/(n*log(n))
  + np.sum(log(np.array(list(set(map(abs, vector)))))) 
  - abs(max(vector)) * len([x for x in vector if x > 0])
  - sum(x for x in vector) ** (-0.5)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time22:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.sqrt(trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time22:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -(trailing_zeros / n + (sum_elements - len(vector)) * (len(vector) / (2 * len(vector))))
  else:
    return -(trailing_zeros / n + (sum_elements) * (len(vector) / sum_elements))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time22:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum_elements/(len(vector)**2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.sum(np.log10(np.abs(np.array(vector)))) / (n * len(set(vector))) + 
       np.sum(vector) / (2 * n) - 
       np.count_nonzero(vector) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    np.exp(-leading_ones / n) * 
    min((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) / min(sum_elements, len(vector)) * 
       np.exp(-leading_ones / n) + 
       (n - leading_ones) / n * sum(map(abs, filter(None, vector))) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time22:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-(trailing_zeros / (n+1)))) * (1 if sum_elements < len(vector) // 3 else 0)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time22:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-(trailing_zeros / (n+1))) * (1 if sum_elements < len(vector) // 3 else 0) - abs(sum_elements - len(vector) / 2) * trailing_zeros




#score: {'n8_size512.txt': 294}
#island_id: 3
#version_generated: 3
#generate time22:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(len(vector)-1, -1, -1) if vector[i] == 0) / n * sum(map(abs, vector))
       )**2




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time22:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3 + (trailing_zeros / n) ** 2 + (trailing_zeros / n))




#score: {'n8_size512.txt': 260}
#island_id: 1
#version_generated: 3
#generate time22:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i * x for i, x in enumerate(reversed(vector))]) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector)))).count('0') / n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time22:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-np.log10(n)**2/trailing_zeros) - np.sin(sum_elements/len(vector))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)
  if max(abs(x) for x in vector) ** 2 > sum_vector / n:
    return - (sum_vector / trailing_zeros) * min((x**2 / n) for x in vector)
  else: 
    return - (sum_vector / trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  
  return -(sum_vector/trailing_zeros) * math.exp(-min((x**2/n) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector])))) - (max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-np.log10(n)**2/trailing_zeros) + np.sin(np.pi*trailing_zeros/len(vector))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time22:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')

  def obj_func(x):
    return -x[0]*sum_elements - x[1]*trailing_zeros / n + np.exp(-np.log10(n)**2/x[1])

  res = minimize(obj_func, [1.0, 1.0], method="SLSQP")

  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x)**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - leading_ones) / n * 
      sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, n)
  )




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + np.exp(-np.log10(n)**2/trailing_zeros) - ((trailing_zeros > n/3 and sum_elements < len(vector) // 2) or (trailing_zeros <= n/3 and sum_elements > len(vector) // 2))




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros)




#score: {'n8_size512.txt': 291}
#island_id: 3
#version_generated: 3
#generate time22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))[2:])
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / n)




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -((sum_elements ** (0.5 / len(set(vector)))) + ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * np.log(len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(bin(sum(1 for elem in vector if elem == 1))) - 2, n) / n)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = np.mean(vector)
  std_dev = np.std(vector)
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(mean)**0.5) 
  - abs(std_dev) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (std_dev / mean)**2
  - abs(max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)
  - np.sum(np.exp(-(np.array(vector)-mean)**2/(2*std_dev**2)))/(n*np.sqrt(2*np.pi)*std_dev)
  + np.sum(np.abs(np.array(vector)-mean)) / (2 * std_dev)
  - np.count_nonzero(vector) ** 0.5




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = np.mean(vector)
  std_dev = np.std(vector)
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(mean)**0.5) 
  - abs(std_dev) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (std_dev / mean)**2
  - abs(max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)
  - np.sum(np.exp(-(np.array(vector)-mean)**2/(2*std_dev**2)))/(n*np.sqrt(2*np.pi)*std_dev)
  - gmean([x for x in vector if x > 0]) * len([x for x in vector if x > 0])




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time22:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  x = np.sum(np.array(vector))
  return -x - len([i for i in vector if i == 0]) / n - sum(1 for i in vector if i != 0) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + max(-sum(vector), 0) + (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector]))) - max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector]))))




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time22:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-np.log10(n)**2/trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(1 - 2 * sum_elements / len(vector))) - ((trailing_zeros + sum_elements > n) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time22:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time22:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros)
  - abs(sum_elements - len(vector) / 2) / (n ** 0.5)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time22:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 / n - sum(min(i, len(vector)-1-i) for i in range(int(n/2)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum([min(i, len(vector)-1-i) for i in range(int(n/2))]) - sum(x**3 for x in vector) / (n * max(vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (max(vector) - min(vector)) / n + max(-min(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum([min(i, len(vector)-1-i) for i in range(int(n/2))]) - (sum(abs(x) for x in vector) ** 2) / n




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - (np.std(vector) / np.mean(vector))**2
  - math.exp(-len([x for x in vector if x != 0]))
  - stats.gmean(list(set(map(abs, vector)))) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - (np.std(vector) / np.mean(vector))**2
  - math.exp(-len([x for x in vector if x != 0]))
  - np.sum(np.log(np.array([i**2 for i in vector])))/(n*math.log(n))
  + np.sum(math.log(np.array(list(set(map(abs, vector)))))) 
  - abs(max(vector)) * len([x for x in vector if x > 0])
  - sum(x for x in vector) ** (-0.5)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - (np.std(vector) / np.mean(vector))**2
  - len([x for x in vector if x != 0])**(-1)
  - math.log(n) + math.prod(math.exp(-(i - np.mean(vector)) ** 2 / (2 * np.std(vector) ** 2)) for i in vector)
  + math.gcd(*[abs(i) for i in vector]) * len([x for x in vector if x > 0])




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(vector) * (2 - np.abs(2 * np.sum(vector) / len(vector) - 1)) - ((np.sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector)))).count('0') / n) - np.exp(-np.log10(n)**2/bin(int(''.join(map(str,vector)))).count('0')) + np.sum(vector) / len(vector)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time22:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x*x for x in vector)**0.5 - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, min(leading_ones, sum_elements)), n)) * 
       sum(x**2 for x in vector) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: x**0.5 if x > 0 else 0, vector)) - len(set(filter(lambda x: x == 0, vector))) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    (n - leading_ones) / n * min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
      min((n - i) / n for i in range(min(n, unique_elements), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       (n - leading_ones) / n * max((sum(map(abs, filter(None, vector))) - sum_elements) / abs(sum_elements), 0))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time22:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) - 1.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) + (len(vector) % 2 == 1 and trailing_zeros > len(vector)//2)*n/trailing_zeros




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time22:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) * (2 - abs(2 * sum(1 for x in vector if x) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 2 + (sum(1 for x in vector if x) > len(vector) // 2) * ((bin(int(''.join(map(str,vector))))).count('0') / n) - np.exp(-np.log10(n)**2/((bin(int(''.join(map(str,vector)))).count('0'))))




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time22:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) - 1.5 - 0.5 * abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x ** 2 for x in vector) / len(vector) - (bin(int(''.join(map(str, vector))))[-1] == '0') * (n ** 0.5)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - (np.std(vector) / np.mean(vector))**2
  - math.exp(-len([x for x in vector if x != 0]))
  - gmean(list(set(map(abs, vector)))) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)
  - (sum(1 for i in vector if i == 0) / n)**2
  - abs(np.std(vector)) * len([x for x in vector if x != 0]) 
  - np.sum(log(np.array([i**2 for i in vector])))/(n*log(n))
  + sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std(vector) / abs(max(vector)))**2
  + np.sum(np.abs(np.array(list(set(vector))))) 
  - abs(np.max(vector)) * len([x for x in vector if x > 0])
  - sum(x for x in vector) ** (-0.5)
  - (np.mean(vector) / max(vector))**(-1)
  - np.sum((np.array(vector) - min(vector)) ** 2) / ((max(vector) - min(vector)) ** 2)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - gmean([x**2 for x in vector]) * len([x for x in vector if x != 0])
  - squareform(pdist([[i] for i in vector]))[0][n-1]
  + np.sum(math.log([i**2 for i in vector]))/(n*math.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std(vector) / abs(max(vector)))**2
  + gmean([abs(i) for i in set(vector)])
  - max(abs(x) for x in vector) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - np.std(vector)**2
  - len([x for x in vector if x > 0])**(-1)
  - (np.max(vector) / np.min(vector))**2
  + sum(x for x in vector) ** (-0.5)




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time22:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) - 3




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time22:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) - 1.5 - np.sum([i for i in vector if i != 0]) / len(vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time22:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(min(i, len(vector)-1-i) for i in range(int(n/2)))




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time22:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) * (n - len(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x)))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time22:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector) + sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time22:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + sum((i*(len(vector)-2*i+1)//2 if i < (n//2+1) else 0 for i in range(len(vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones) + 
      sum(abs(x) for x in filter(lambda x: x > 1, vector)) * sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(trailing_zeros, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time22:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 287}
#island_id: 2
#version_generated: 3
#generate time22:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -(sum_vector / n + (n - trailing_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum_elements / min(sum_elements, len(vector))
  )




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - np.std(vector)**2
  - len([x for x in vector if x > 0])**(-1)
  - (np.max(vector) / np.min(vector))**2
  + sum(x for x in vector) ** (-0.5)
  - ((n - sum(1 for i in vector if i == 0)) / n)**(3/2) * len([x for x in vector if x < 0])
  - np.sum(np.abs(np.array(list(set(vector)))))/n
  + (np.max(vector) / abs(min(vector)))**(1/4)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - np.std(vector)**2
  - len([x for x in vector if x > 0])**(-1)
  - (np.max(vector) / np.min(vector))**2
  + sum(x for x in vector) ** (-0.5)
  - np.sum(np.log(np.array([i**4 for i in vector]))) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time22:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return - (abs(sum(vector) - n/2) + len([x for x in vector if x == 0]) / n) * (np.std(vector) + 1) + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time22:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(np.mean(vector)) + abs(np.std(vector))) - (n - len([i for i in vector if i == 0])) / n
  - np.sum(np.abs(np.array(vector) - np.mean(vector))) ** 2 / (4 * n)
  + sum(i for i in vector if i > 0)**(-1)
  - abs(np.prod(np.array(vector)) ** 0.5) / len([i for i in vector if i > 0])




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = np.mean(vector)
  std_dev = np.std(vector)
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(mean)**0.5) 
  - abs(std_dev) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (std_dev / mean)**2
  - abs(max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5) 
  - gcd(*[abs(i) for i in vector]) * (sum(1 for i in vector if i > 0))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = np.mean(vector)
  std_dev = np.std(vector)
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(mean)**0.5) 
  - abs(std_dev) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (std_dev / mean)**2
  - abs(max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)
  - np.sum(np.array([i**3 for i in vector]))/(n*np.sum(np.array([i**3 for i in vector])))




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time22:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = np.mean(vector)
  std_dev = np.std(vector)
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n) 
  - abs(std_dev) * len([x for x in vector if x != 0]) 
  - (sum(1 for i in vector if i == 0) / n)**2
  - (std_dev / mean)**2
  + np.sum(np.log(np.array([i**2 for i in vector])))/(n*np.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (max(vector) - min(vector)) * len([x for x in vector if x > 0])
  + np.sum(np.exp(-(i - mean) ** 2 / (2 * std_dev ** 2))) / n
  - (std_dev / abs(mean))**2
  - (sum(1 for i in vector if i < 0) / sum(1 for i in vector if i > 0))**(-1)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time22:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) - 1.5 - (1/(n**(2/3))) * sum(map(lambda x: abs(x-sum_elements/n), vector))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time22:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > 0) and (sum_elements < len(vector) // 2)) or (trailing_zeros / n) ** 2 + np.exp(-np.log10(n)**2/(trailing_zeros+1)) - (n/trailing_zeros) * sum_elements / len(vector)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, sorted(vector))), 0) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    np.log((n - leading_ones) / n) * 
    sum(map(abs, filter(None, vector)), 0) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - np.std(vector)**2
  - len([x for x in vector if x > 0])**(-1)
  - math.exp(len([x for x in vector if x < 0]))
  + sum(x for x in vector) ** (-0.5)
  - ((n - sum(1 for i in vector if i == 0)) / n)**(3/2) * len([x for x in vector if x < 0])
  - np.sum(np.abs(np.array(list(set(vector)))))/n
  + (np.max(vector) / abs(min(vector)))**(1/4)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - np.std(vector)**2
  - len([x for x in vector if x > 0])**(-1)
  - (np.max(vector) / np.min(vector))**2
  + sum(x for x in vector) ** (-0.5)
  - ((n - sum(1 for i in vector if i == 0)) / n)**(3/2) * len([x for x in vector if x < 0])
  - (gmean(np.abs(vector)))**(-2)
  + (np.max(vector) / abs(min(vector)))**(1/4)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - n/2) - (n - sum(1 for i in vector if i == 0)) / n + abs(np.mean(vector))
  - gmean([x**2 for x in vector]) * len([x for x in vector if x != 0])
  - squareform(pdist([[i] for i in vector]))[0][n-1]
  + np.sum(math.log([i**2 for i in vector]))/(n*math.log(n))
  - sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std(vector) / abs(max(vector)))**2
  + gmean([abs(i) for i in set(vector)])
  - max(abs(x) for x in vector) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)
  - ((n - sum(1 for i in vector if i == 0)) / n)**(3/2) * len([x for x in vector if x < 0])
  - np.sum(np.abs(np.array(list(set(vector)))))/n
  + (np.max(vector) / abs(min(vector)))**(1/4)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time22:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * y for x, y in zip(vector, range(1, len(vector) + 1))) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) + (sum_elements - len(vector) // 2) / len(vector)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time22:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time22:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (max(vector) > len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + (sum_elements / len(vector))**2 - (abs(sum_elements/len(vector)-0.5)/(n*0.5))**2




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time22:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros)




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - (np.std(vector)**2 / (2*n))
  - (sum(1 for i in vector if i == 0) / n)**2
  - np.sum(math.log(np.array([i**2 for i in vector])))/(n*math.log(n))
  + sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std(vector) / abs(max(vector)))**2
  - np.sum(np.abs(np.array(list(set(vector))))) 
  - math.exp(sum(math.log(abs(x)) for x in vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)
  - gmean([x for x in vector if x > 0]) * len([x for x in vector if x > 0])




#score: {'n8_size512.txt': 322}
#island_id: 0
#version_generated: 3
#generate time22:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))) 
  - (np.std(vector)**2 / (2*n))
  - (sum(1 for i in vector if i == 0) / n)**2
  - np.sum(log(np.array([i**2 for i in vector])))/(n*log(n))
  + sum(x for x in vector if x > 0)/n
  - len([x for x in vector if x < 0])**(-1)
  - (np.std(vector) / abs(max(vector)))**2
  - np.sum(np.abs(np.array(list(set(vector))))) 
  - abs(np.max(vector)) * len([x for x in vector if x > 0])
  + sum(x for x in vector) ** (-0.5)
  - exp(-np.sum((vector - np.mean(vector))**2) / (2 * n * (np.std(vector))**2))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time22:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * sum(abs(x) for x in vector) / min(sum_elements, n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (sum_elements / len(vector)) ** 2) + np.exp(-np.log10(n)**2/trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: (x**2 if x > 0 else 1) * len(vector), vector)) + min(sum(vector), len(vector)) / 2




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time22:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros % n) ** 2 + (n - trailing_zeros) ** 2) / (2 * n) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros % n) ** 2 - (n - trailing_zeros) ** 2) / (2 * n) - np.exp(-np.log10(n)**2/trailing_zeros)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time22:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - n/2) - (n - sum(1 for i in vector if i == 0)) / n - abs(np.mean(vector))
  - np.std(vector)**2
  - len([x for x in vector if x > 0])**(-1)
  - (np.max(vector) / np.min(vector))**2
  + math.sqrt(sum(x for x in vector))
  - ((n - sum(1 for i in vector if i == 0)) / n)**(3/2) * len([x for x in vector if x < 0])
  - (np.sum(np.abs(np.array(list(set(vector)))))/n)
  + (math.max(vector) / math.fabs(math.min(vector)))**(1/4)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time22:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(1/4) + 
           (abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n) ** 2)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time22:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(abs(sum(vector) - n/2) + (n - sum(1 for i in vector if i == 0)) / n)
  - np.std(np.abs(np.array(list(set(vector)))))**2
  - len([x for x in vector if x > 0])**(-1)
  - (np.max(vector) / min(vector))**2
  + sum(x for x in vector) ** (-0.5)
  - ((n - sum(1 for i in vector if i == 0)) / n)**(3/2) * len([x for x in vector if x < 0])




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time22:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) - (3 + np.sqrt(8*n)) * (sum_elements / len(vector))




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time22:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) - 3 - sum([i for i in vector if i == 0])




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-np.log10(n)**2/trailing_zeros) + sum_elements / len(vector) - 3 + pow(sum_elements / len(vector), 2)




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time22:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(abs(x) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time22:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * len(set(vector))) - sum(1 for x in vector if x == 0)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time22:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + np.cos(np.pi * (2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) * (2 - abs(4 * sum(vector) / len(vector) - 2)) + (len(bin(int(''.join(map(str, vector))))[2:]) / n) ** 0.5 - np.exp(-np.log10(n)**2/(len(bin(int(''.join(map(str, vector))))[2:]))/n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**0.5 for x in set(vector)) - max((n-i)/n for i in range(min(n, bin(sum(1 for elem in vector if elem)).count('1')), n))




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 2
#generate time22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 2
#generate time22:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time22:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not bool(elem))))
  return -(sum_elements ** (0.5 / len(set(vector))) + trailing_zeros / min(n, len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time22:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector)))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time22:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.log((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time22:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.sqrt((sum_elements - len(vector) / 2) ** 2 + (trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(abs(x) for x in vector) * (len(set(vector)) / len(vector)) ** 0.5 - sum(1 for i in range(n) if not any(x & (2**i) for x in vector)) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x for x in vector if x != 0) / min(sum_elements, sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time23:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time23:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time23:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements < len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (trailing_zeros / n)
  else:
    return sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 2
#generate time23:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + max(-min(sum_elements, n // 2), 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 2
#generate time23:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(bin(sum_elements)[2:])) / n) ** 2




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time23:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(map(lambda x: x**2, vector)) / (n**2)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time23:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements > len(vector) // 2) * (sum_elements > len(vector) // 3)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time23:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 299}
#island_id: 3
#version_generated: 3
#generate time23:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - leading_zeros) / n + 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time23:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-sum(1 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))) * 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n + 
       sum(abs(x) for x in filter(None, vector)) / min(sum_elements, n))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time23:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time23:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x)).rstrip('0'))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time23:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (trailing_zeros > 0) * (n-trailing_zeros)**2)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time23:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in set(vector)) ** (0.5 / len(set(vector))) + 
      sum(x for x in vector if x > 0) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
      sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time23:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 299}
#island_id: 2
#version_generated: 3
#generate time23:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + (n - sum(1 for x in vector if x)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time23:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(1 for x in vector if x)) + abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if not x) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time23:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time23:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 266}
#island_id: 0
#version_generated: 3
#generate time23:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 259}
#island_id: 2
#version_generated: 3
#generate time23:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - (len([i for i in range(len(vector)) if vector[i] == 0]) ** 2) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time23:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum(1 for x in range(n) if not any(x+1 <= y for y in vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + len(vector))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(map(lambda x: x**2, vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -((sum_vector / n) * min((x**2/n) for x in vector)) if max(abs(x) for x in vector) ** 2 > (sum_vector / n) else -(sum_vector/trailing_zeros)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time23:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) * (2 - abs(2 * sum(1 for x in vector if x) / len(vector) - 1)) - bin(int(''.join(map(str, vector))))[2:].count('0') / n + ((sum(1 for x in vector if x) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time23:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time23:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-((len(vector)-trailing_zeros)/n)**2)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time23:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 319}
#island_id: 3
#version_generated: 3
#generate time23:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.exp(-leading_ones / n) * 
      sum((i / n) ** 2 for i in range(min(n, leading_ones), n)) + 
      10/(np.log2(sum_elements+1)*(n-1)))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time23:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n - trailing_zeros) / (n * n))




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time23:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * 4) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time23:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) * (n - trailing_zeros)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time23:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    np.exp(-leading_ones / n) * 
    sum(map(lambda x: abs(x)**2, vector)) / min(sum_elements**2, sum(map(lambda x: abs(x)**2, vector)))
  )




#score: {'n8_size512.txt': 267}
#island_id: 3
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       np.exp(-leading_ones / n) * 
       sum_elements / min(sum_elements, sum(map(abs, vector))) + 
       1 - (sum_elements / n) ** 2)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 1e-6) > 0) * min(trailing_zeros / n, sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -((n * sum_vector + min(abs(x) for x in vector)) / (trailing_zeros * n)) 




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / min(n, trailing_zeros)) - (max(abs(x) for x in vector)**2/(min(n, trailing_zeros)*n))




#score: {'n8_size512.txt': 255}
#island_id: 2
#version_generated: 3
#generate time23:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)/n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(abs(x) for x in vector) ** 2 / (n * len([x for x in vector if x == 0]))




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i * (vector[i] != 0) for i in range(len(vector)-1)])




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + len(vector))) ** 2




#score: {'n8_size512.txt': 258}
#island_id: 0
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros, n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 0.5 * ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector))) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + len(vector))) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time23:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n), ((len(vector) - trailing_zeros) / n))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements) + (n - trailing_zeros) / (len(vector) ** 0.5)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) * (2 - abs(2 * sum(x for x in vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)/n + (len([x for x in vector if x == 0]) / n)**2) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time23:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time23:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, min(leading_ones, sum_elements)), n)) * 
    sum_elements / min(sum_elements, sum(map(abs, vector)))) - \
    sum(x**2 for x in vector)




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time23:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector))
       + (len(vector) - leading_ones) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x)**0.5, filter(lambda x: x != 0, vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements**0.5, sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x**3 for x in filter(None, vector)) / min(sum(vector) ** 2, sum(map(lambda x: x**3, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
          min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**2




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, max(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - max(0, 1 - sum_elements / n) * (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n*(n-1))) + abs(sum(x for x in vector) - n/2) * ((n - sum(1 for x in vector if x)) / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return - (sum_vector / (n * trailing_zeros)) - max(abs(x) for x in vector) ** 2 / (n * trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / (trailing_zeros * n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_zeros = len([x for x in vector if x == 0])
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_zeros, n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**2 * sum_elements




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - leading_zeros, n) / n)**3




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector) - (min(abs(x) for x in vector) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - (max(abs(x) for x in vector) ** 2) / (n * trailing_zeros)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 1e-6) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(set(vector))) * (sum_elements / len(vector))




#score: {'n8_size512.txt': 266}
#island_id: 0
#version_generated: 3
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros + 1) / n, sum_elements / len(vector))




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time23:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros) * (abs(sum_elements - len(vector) // 2) / (len(vector) // 2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n), (n - trailing_zeros) / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - min((x ** 2 / n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros) - (max(abs(x) for x in vector) ** 2) / (n * trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / (n * trailing_zeros) - max(abs(x) for x in vector) ** 2 / (n * trailing_zeros)




#score: {'n8_size512.txt': 281}
#island_id: 2
#version_generated: 3
#generate time23:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - ((max(abs(x) for x in vector) - min(abs(x) for x in vector)) / trailing_zeros)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time23:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector) - min(x for x in vector) * (n/2)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time23:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - (min(x for x in vector) ** 2 / n) * len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector])))) - (max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time23:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time23:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (n // 2) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)/n) + abs(sum(x for x in vector) - n/2)*(n-sum(1 for x in vector if x))/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 / n - sum(min(i, len(vector)-1-i) for i in range(int(n/2))) - sum(x**2/n for x in sorted(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, sum_elements) ** 2




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time23:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements) + np.exp(-(sum_elements / len(vector))**2)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time23:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum((i for i in vector if i)) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - sum(bin(i).count('0') for i in vector) / n + min(sum(vector), len(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements) - (max(vector) ** 2)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time23:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector)) ** 2 / (len(vector))) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 0.5 + min(sum_elements := sum(vector), len(vector) // 2)




#score: {'n8_size512.txt': 266}
#island_id: 0
#version_generated: 3
#generate time23:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.sum(np.log([i for i in set(vector)]))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time23:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(str(sum([int(x == 0) for x in vector])))) - (max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros + max(abs(x) for x in vector)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time23:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -math.log2(sum(x for x in vector) / n) - math.log2((n - sum(1 for x in vector if x)) ** 2 / n) + abs(math.log2(n/2) - math.log2(sum(x for x in vector) / n)) * (n - sum(1 for x in vector if x)) / n - min(math.log2(abs(x)/n) for x in vector) + max(-math.log2(sum(vector)), 0) + (math.log2(n) - math.log2(min(vector))) / n - sum(sorted([math.log2(x) for x in vector])[::-1]) / n + min(math.log2(abs(x)) for x in vector) * n / len(vector) - sum(1 for x in sorted([x for x in vector], reverse=True))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time23:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time23:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time23:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def func_to_minimize(params):
    return -params[0] * (2 - abs(2 * params[0] / len(vector) - 1)) - (params[1] / n) ** 2 + ((params[0] > len(vector) // 2) > 0) * (params[1] / n)
  res = minimize(func_to_minimize, [sum(vector), bin(int(''.join(map(str,vector)))).count('0')], method="SLSQP")
  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(map(lambda x: x**2, vector))




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time23:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) + ((abs(sum_elements - len(vector) // 2) > len(vector) // 4) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 277}
#island_id: 1
#version_generated: 3
#generate time23:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0') or '0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) // n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros, sum_elements)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time23:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements) + (sum_elements <= 3) * max(-10*(sum_elements-1), trailing_zeros/n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time23:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements) + max(sum_elements / len(vector), trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector) + sum(1 for x in itertools.groupby(sorted(vector, reverse=True), lambda x: x if x else 0)) + abs(sum(x for x in vector) - n/2) * sum(x for x in vector if x)/n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - min(len(vector) ** 0.5 - sum(vector), len(vector) ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(1 if x == 0 else 1 for x in vector))




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time23:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  if math.sqrt(sum([x**2 for x in vector])) > sum_vector / n:
    return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)
  else: 
    return - (sum_vector / trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min((abs(sum_elements - len(vector) // 2)), abs(trailing_zeros - n))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -min((x/n) for x in vector)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x/n for x in vector) + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * (max(vector) - min(vector))) + len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n*(max(vector)-min(vector))) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 2, sum_elements)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, sum_elements) + max((len(vector) - trailing_zeros) / n, 0)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(1/len(set(vector))) + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(vector).rstrip('0'))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
    sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (min(sum_elements, len(vector)) if sum_elements > 0 else len(vector)) - 
    trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 3
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       (n - len(str(vector).rstrip('0')))/n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), n))




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.log10(trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max(-0.5, (len(vector) - trailing_zeros) / (n - 1))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((trailing_zeros > 0) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * ((n - trailing_zeros) / n)




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time23:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / len(vector)




#score: {'n8_size512.txt': 259}
#island_id: 1
#version_generated: 3
#generate time23:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + abs(sum(x for x in vector)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time23:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) ** 2) / n + ((sum_elements > len(vector) // 2) > 0) * min(((trailing_zeros + 1) ** 2) / n, sum_elements)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time23:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x > 0) + (sum(vector) / len(vector))**2 - ((bin(int(''.join(map(str,vector))))[2:].count('1') / len(vector)) ** 2)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time23:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n) ** 2, sum_elements) - ((len(vector) % 2 == 1) and (sum_elements % 2 == 0)) * abs(sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**2 for x in vector) / min(sum_elements, sum(x**2 for x in vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i**0.5 for i in vector) - max((n-i)/n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * sum(map(abs, filter(None, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 297}
#island_id: 2
#version_generated: 3
#generate time23:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n**2 + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * min(sum_elements, sum(map(abs, vector))) / sum(map(abs, vector)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   min(n - leading_ones, n) * min(sum(map(abs, vector)), sum_elements) / (n * min(sum_elements, sum(map(abs, vector))))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (len([i for i in range(n) if not any(i+1 <= y for y in vector)]) / n)




#score: {'n8_size512.txt': 303}
#island_id: 2
#version_generated: 3
#generate time23:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x))) - 1
  return -(sum_elements / n + (n - sum_elements) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector)) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector) / n
  trailing_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean([x**2 for x in vector]) + abs(np.sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.mean(sorted(vector)[::-1]) + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0]) * abs(sum(x for x in vector) - n/2) * n




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time23:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n - abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, (n - sum_elements) / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 266}
#island_id: 0
#version_generated: 3
#generate time23:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time23:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n+1)))




#score: {'n8_size512.txt': 261}
#island_id: 3
#version_generated: 3
#generate time23:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      np.log((n - sum(1 for elem in vector if elem == 1) + 1) / n))




#score: {'n8_size512.txt': 291}
#island_id: 3
#version_generated: 3
#generate time23:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(vector) - len(bin(sum(1 for elem in vector if elem == 0))[2:].lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - trailing_zeros) / n) ** 1.3




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time23:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-(sum_elements - len(vector) // 2) ** 2)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time23:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10e-6) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time23:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) / 2) / (len(vector) / 2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 265}
#island_id: 2
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) + sum(x**3 / n for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([x for x in vector if x == 0]) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 305}
#island_id: 3
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(0 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_zeros, n), n)) * (1 - sum_elements / n))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)) * min(n - leading_ones, n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_zeros, n), n)))




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_zeros, n), n)))




#score: {'n8_size512.txt': 270}
#island_id: 0
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements / len(vector)) ** 3




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) ** 2 - ((trailing_zeros / n) ** 2) + 10




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (len(vector) // 2 + 1) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-abs(sum_elements - len(vector) / 2))




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-((sum_elements - len(vector) // 2) / 50))




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 2 - ((sum_elements > len(vector) // 2) > 0) * abs(sum_elements) - (abs(sum_elements - len(vector) // 2) < sum_elements % 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + sum_elements) - ((len(vector) % 2 == 1 and sum_elements % 2 == 0)) * sum_elements




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(map(abs, filter(lambda x: x != 0, vector))) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([abs(x) for x in vector])




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / len(vector)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time23:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n - trailing_zeros) / (n * sum_elements)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time23:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean(vector) * (2 - abs(2 * np.mean(vector) - 1)) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((np.sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector))))[2:].count('0') / n) + (n - bin(int(''.join(map(str, vector))))[2:].count('0')) / (n * np.mean(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time23:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n - trailing_zeros) / (n * sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum_elements) 
      )**2
  + sum(map(abs, vector)) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector)))) * (1 - np.exp(-leading_ones / n)) + (n - leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + ((len(vector)-sum(1 if i == 0 else 0 for i,x in enumerate(vector))) / n) ** 2




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time23:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2)) 




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time23:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([x**2 for x in vector]) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + min((sum(vector) > len(vector) // 2), 1)




#score: {'n8_size512.txt': 264}
#island_id: 2
#version_generated: 3
#generate time23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 / n - sum(min(i, len(vector)-1-i) for i in range(int(n/2))) + sum(x**2/n for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 / n - sum(min(i, len(vector)-1-i) for i in range(int(n/2))) + sum(-x for x in sorted(x for x in vector if x > 0))




#score: {'n8_size512.txt': 305}
#island_id: 3
#version_generated: 3
#generate time23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    np.exp(-len([i for i in vector if i]) / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(len(vector) - leading_ones, n) / n * 
    np.exp(-leading_ones / n) * 
    sum(map(lambda x: np.exp(x), filter(None, vector))) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - len(str(sum(1 for elem in vector if elem == 1))[2:])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_zeros, n) / n * 
       np.exp(-leading_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -sum_elements * (trailing_zeros / n)**0.5 - sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum_elements * min((n - leading_ones) / n, (n - trailing_zeros) / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       sum([i/n for i in range(len(vector), 0, -1) if bin(sum(1 for elem in vector[:i] if elem == 1))[2:].count('1') > 0]))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time23:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time23:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector)))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time23:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros / (n - trailing_zeros))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time23:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n +
       sum(np.log10(abs(x) + 1) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time23:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time23:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros / (n - max(0, trailing_zeros-1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time23:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements * (n - trailing_zeros) + trailing_zeros * (trailing_zeros - 1) / (2 * (n - trailing_zeros)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time23:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / n - (trailing_zeros / (n - trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n) + (sum_elements ** 2) / (n * (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n + 1) - trailing_zeros / (n * (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(bin(sum(1 for x in vector if x == 0))[2:]).lstrip('0').replace('1', ''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
      sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, trailing_zeros), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector))/n - sum(sorted(vector)[::-1])/n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x)))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector))/n - sum(sorted(vector)[::-1])/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) * sum(x for x in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time23:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).zfill(n).count('0')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time23:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time23:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector)))
  return -(sum_elements + (trailing_zeros / n)) - sum_elements * trailing_zeros / (n * sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time23:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector)))
  return -(sum_elements + (trailing_zeros / n)) + (n - len([i for i in vector if i != 0])) * (min(vector) or 1)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(0 if x else 1 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum((x**2/n)**0.5 for x in vector) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time23:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




