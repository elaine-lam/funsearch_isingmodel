#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).zfill(n))
  return -(sum_elements + (trailing_zeros / n)) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).zfill(n))
  return -(sum_elements + trailing_zeros / n) * min(sum_elements, n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).zfill(n))
  return -(sum_elements + (trailing_zeros / n)) * min((n - trailing_zeros), (n // 2) + 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -sum_elements * (n - trailing_zeros) / (n * (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -sum_elements * (n - trailing_zeros) / (n * (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for x in vector if x != 0)).lstrip('1')) or 1
  return -(sum_elements + leading_ones / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:]) or 1
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements * (n - trailing_zeros) / (n ** 2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for x in vector if x != 0)).lstrip('1')) or 1
  return -(sum_elements - (leading_ones / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + max((n - trailing_zeros) / n, (sum_elements / n)**2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + trailing_zeros) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements * (n - trailing_zeros) / (n ** 2)) + abs(sum_elements) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements * (n - trailing_zeros) / (n ** 2)) * (sum_elements ** 0.5 + trailing_zeros ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements * (n - trailing_zeros) / (n ** 2)) + sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + max((n - trailing_zeros) / n, (sum_elements / n)**2)) * min(sum_elements, n)**(-1/3)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + max((n - trailing_zeros) / (2*n), abs(sum_elements / n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(lambda x: x != 0, vector))) / min(sum_elements, len(vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time00:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))
  return 3 * min(abs(x) for x in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / trailing_zeros - max(abs(x) for x in vector) ** 2 / (n * trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + (n - min(len(str(x)) for x in vector) / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + (n - trailing_zeros) / n) - sum(x**2 for x in vector) / sum(x for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + min(trailing_zeros / n, (n - trailing_zeros) / n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (len(str(sum([int(x == 0) for x in vector]))))) - (max(abs(x) for x in vector)**2/((n*len(str(sum([int(x == 0) for x in vector]))))))




#score: {'n8_size512.txt': 255}
#island_id: 2
#version_generated: 3
#generate time00:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(vector)) - max(abs(x) for x in vector)**2/(n*len([x for x in vector if x == 0])) + sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -sum_elements * (n - trailing_zeros) / (n * (n + 1)) - abs(sum_elements) * trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -sum_elements / (n * (n + 1)) - (trailing_zeros / (n * (n + 1)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:]) or 1
  return -sum_elements * (n - trailing_zeros) / (n * (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).zfill(n).count('0')
  return -(sum_elements + (trailing_zeros / n)) * np.exp(-abs(sum_elements) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).zfill(n)) - (sum_elements / n)
  return -(sum_elements + trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).zfill(n)) - 1
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum(x**2/n for x in vector) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time00:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - leading_zeros/n
  return -(sum_vector/n) - (n - sum([x == 0 for x in vector]))/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return - (n / sum(vector)) * sum(x for x in vector) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (math.sqrt(sum(x**2 for x in vector))/n)**2




#score: {'n8_size512.txt': 259}
#island_id: 2
#version_generated: 3
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - abs(sum([int(x == 0) for x in vector])) / n
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))
  return 3 * min(abs(x) for x in vector) / n
  return sum(1 for i in range(len(vector)) if vector[i] == 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - ((max(abs(x) for x in vector)) ** 2) / (n * trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n - trailing_zeros) if sum_elements != 0 else 0




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -sum_elements * (n - min(trailing_zeros, n)) / (n * (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -sum_elements / (n + 1) * (1 - (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -sum_elements * (n - trailing_zeros) / (n * (n + 1)) + sum_elements ** 2 / (n * (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) - max(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time00:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - leading_zeros) / (n - leading_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - trailing_zeros) / trailing_zeros * min(sum_elements, n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + trailing_zeros / (n - trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * trailing_zeros / (n * len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(trailing_zeros, n) * min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / (n * len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       min(n, len(vector)) / (n * len(vector)) + 
       sum_elements / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * trailing_zeros / (n * len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(map(lambda x: x**2, filter(None, vector))) / 
       sum(map(abs, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 / n for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(x for x in set(vector))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for i, v in enumerate(sorted(vector, reverse=True)) if i < n/2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements + (n - leading_ones) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements / n - (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements + (n - trailing_zeros) / n) * np.sqrt(len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements + (n - trailing_zeros) / n) * len(set(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for elem in vector if not bool(elem)))[2:].count('0')
  return -(sum_elements + trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time00:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if not elem))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -(sum_elements + (trailing_zeros / n)) * min(sum_elements, n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector if i == 0)).lstrip('0'))
  return -(sum_elements + (trailing_zeros / n)) * len(set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements * (n - trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + (n - min(len(str(x)) for x in vector) / n) * max(trailing_zeros, 1))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0)).lstrip('0b')) or 1
  return -(sum_elements + (n - min(len(str(x)) for x in vector) / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0')) or 1
  return -(sum_elements + (n - min(len(bin(x)[2:]) for x in vector) / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for i in vector if i == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector)))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum(1 for elem in vector) - sum_elements))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0))) - len(str(sum(1 for i in vector)))
  return -(sum_elements + (trailing_zeros / n)) * min((n - trailing_zeros) / (n - 1), 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - trailing_zeros) / max(n, trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + min(trailing_zeros / (n - trailing_zeros), 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements + (len(str(n)) - len(str(sum_elements))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (n / (trailing_zeros + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0)).replace('0b', '')) - 1
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -(sum_elements + (trailing_zeros / n)) * (n - sum_elements) / n




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time00:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * max((sum(map(abs, filter(None, vector)))) / sum_elements, 1) + 
       len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time00:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) ** (0.5 / len(set(vector))) + 
       min(n - sum(1 for x in vector if x).bit_length(), n) / n * 
       max((sum(map(abs, filter(None, vector)))) / sum(vector), 1))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * max(sum(map(abs, filter(None, vector))) / sum_elements, 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * sum(map(lambda x: abs(x) ** 2, filter(None, vector))) / sum_elements
)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements / n - (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -(sum_elements / n - (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements / (n * (len(vector) - trailing_zeros)) - (trailing_zeros / (n * (len(vector) - trailing_zeros))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time00:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements / (n * len(set(vector))) - (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**0.5 for x in vector) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(abs(x)**3 for x in filter(None, vector)) / min(sum(vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n**2 + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n**2 - min((x**2/n) for x in vector)**2 - max(-sum(vector), 0)**2 - (max(vector) - min(vector)) ** 2 / n**2 - sum(sorted(vector)[::-1]) / n**2 + min(abs(x) for x in vector) * n / len(vector)**2 - sum(1 for x in sorted(vector, reverse=True))**2 + len([i for i in range(len(vector)) if vector[i] == 0])**2




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x / n for x in vector) - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(leading_ones, n), n)) * 
     sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
     (1 if leading_ones > 0 else 2) * len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = str(sum(1 for x in vector if not x)).count('0')
  return -(sum_elements + leading_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements + len(str(n)) - len(bin(sum_elements)[2:]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements + (leading_zeros - len(str(n)) + 1) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements + (n - leading_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(''.join(map(str,filter(lambda x: x==0,vector))))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)).rstrip('0'))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = bin(sum(1 for i in vector if i == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0)).replace('0b', '')) - 1
  return -(sum_elements / max(n, sum_elements) + (trailing_zeros / n))




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time00:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([i for i in range(n) if vector[i] == 0]) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 259}
#island_id: 2
#version_generated: 3
#generate time00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / sum(x for x in vector)) - (n - len([x for x in vector if x])) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements + len(str(sum(1 for x in vector if x == 0))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - trailing_zeros) / max(1, n - trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len(str(sum(1 for x in vector if not x)))/n)




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 2
#generate time00:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - leading_zeros) / (n - leading_zeros)) - ((sum_elements % n) ** 2) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros + (n - sum(1 for x in vector if x)) ** 2 / trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) * (n - sum(1 for x in vector)) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) ** 0.7
       )




#score: {'n8_size512.txt': 275}
#island_id: 3
#version_generated: 3
#generate time00:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
      sum(x for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) / 
      sum(map(lambda x: abs(x), vector)) ** 0.5
  )




#score: {'n8_size512.txt': 299}
#island_id: 2
#version_generated: 3
#generate time00:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + (len([i for i in range(len(vector)) if vector[i] == 0]) ** 2) / len(vector)




#score: {'n8_size512.txt': 276}
#island_id: 2
#version_generated: 3
#generate time00:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)-1) if sorted(vector)[::-1][i] == 0 and vector[i+1] > 0])




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time00:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - (n-len([i for i in range(len(vector)) if vector[i] == 0]))/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len([i for i in vector if i != 0]), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
          max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
          sum(vector) / min(sum(map(abs, vector)), sum(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
       (trailing_zeros / n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time00:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum_elements) 
      )**2
  + sum(map(abs, filter(None, vector))) ** 0.75 * sum(map(lambda x: (x ** 1.5 - 1)**2, filter(None, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len(set(vector)) / n + sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 264}
#island_id: 2
#version_generated: 3
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / (4 * n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(vector) - len(str(sum(map(lambda x: int(x == 0), vector))).lstrip('0'))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 2
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((np.mean(vector) > np.median(vector)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector))))[:-2]) - bin(int(''.join(map(str,vector)))).rfind('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 2
#generate time00:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum_elements**2/trailing_zeros if trailing_zeros else float('-inf')




#score: {'n8_size512.txt': 255}
#island_id: 2
#version_generated: 3
#generate time00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * len([i for i in range(len(vector)) if vector[i] == 0])) - max(abs(x) for x in vector)**2/(n*len([i for i in range(len(vector)) if vector[i] == 0]))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - ((max(abs(x) for x in vector)) ** 2 / (n * trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / sum(1 for x in vector)) - (max(abs(x) for x in vector) ** 2) / (n * len(str(sum(1 for x in vector if x))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - (max(abs(x) for x in vector)**2 / (n*trailing_zeros))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)
  return min(-(sum_vector/n), 1) + max(-sum(sorted(vector)[::-1]) / n, 0) + min((len([i for i in range(len(vector)) if vector[i] == 0]))/n, 1)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / (trailing_zeros * n) - max(abs(x) for x in vector) ** 2 / (n * trailing_zeros) - sum_vector ** 2 / (n * trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - ((max(abs(x) for x in vector) + min(abs(x) for x in vector)) ** 2) / (2 * n * trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time00:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - ((max(abs(x) for x in vector)) ** 2) / (n * trailing_zeros)




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 2
#generate time00:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 2
#generate time00:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements < 3 * len(vector) // 4) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time00:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min((sum_elements - n) / (n), (n - sum_elements) / (n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time00:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean(vector) + np.log(np.prod(range(1, len(vector) + 1))) * (np.count_nonzero(vector) / len(vector)) + np.log10(np.sum([bin(i).count('0') for i in vector])) / np.log10(n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time00:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) ** 0.5 / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) ** 2) / (4 * n) + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector) + min(abs(x) for x in vector) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - ((max(abs(x) for x in vector)) ** 2) / (n * trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(x for x in vector)**2/(n*(len(str(sum([int(x == 0) for x in vector]))))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / (trailing_zeros or n) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 257}
#island_id: 2
#version_generated: 3
#generate time01:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * len([i for i in range(len(vector)) if vector[i] == 0])) + 
       (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time01:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.log(len(vector))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time01:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(1 - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([abs(x) for x in vector])**2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time01:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.log(len(vector)) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5)))




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + np.exp(-abs(2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > max(1, n // 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector)))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n - 
       len([x for x in vector if x > 0]) / n)




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector))+1)) + 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.exp(-leading_ones / n) * (n - leading_ones) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_zeros, n), n)))




#score: {'n8_size512.txt': 273}
#island_id: 3
#version_generated: 3
#generate time01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), leading_ones))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)) * min(sum_elements, leading_ones))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time01:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return (sum(x for x in vector) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n + 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
    sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - trailing_zeros))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_zeros, n), n)) * 
       sum(map(abs, filter(None, vector))) / sum_elements)




#score: {'n8_size512.txt': 288}
#island_id: 3
#version_generated: 3
#generate time01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      sum(1 for elem in bin(sum(1 for x in vector if x))[-2:].zfill(n)[::-1] if elem == '0') / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - n // 2) < min(abs(sum_elements - i) for i in range(n+1))) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time01:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > max(1, n // 2)) > 0) * (trailing_zeros / n) + np.tan(np.pi/4 - (sum_elements / len(vector)) * np.pi/2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + len(vector))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n - trailing_zeros)) / n)**2




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector))))) - bin(int(''.join(map(str,vector)))).rfind('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2 + ((sum_elements > max(1, n // 2)) > 0) * ((trailing_zeros + 1) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.log(len(vector)) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) - sum_elements**3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.log(len(vector)) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) - sum_elements**2




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time01:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.log(len(vector)) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) + np.sum(np.exp(-np.abs(np.array(vector))))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time01:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.log(len(vector)) - np.sum(np.abs(np.diff(sorted(map(int, vector)))))




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time01:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return - (sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum_vector, 0) - abs(sum_vector - n/2) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 255}
#island_id: 2
#version_generated: 3
#generate time01:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * len([i for i in range(len(vector)) if vector[i] == 0])) + min(x**2/n for x in vector))




#score: {'n8_size512.txt': 280}
#island_id: 2
#version_generated: 3
#generate time01:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(set(vector)) + (len(vector) - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    np.log((n - leading_ones) / n) * 
    min(sum_elements, np.sum(np.abs(vector))) / min(sum_elements, np.sum(np.abs(vector))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time01:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n), ((n - sum_elements) / n)**2) + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time01:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) / n) ** 2




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time01:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) // (n+1)) ** 2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**3 for x in vector)))




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.log(len(vector)) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) + sum(1 for i in vector if i == 0)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.log(len(vector)) - np.sum(np.exp(-np.abs((np.array(vector) - 0.5) / 0.05)))




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time01:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) - (n - sum(1 for elem in vector).bit_length()) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + sum(map(abs, filter(None, vector))) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - len([x for x in vector if x == 0]) ** 2 / n




#score: {'n8_size512.txt': 257}
#island_id: 2
#version_generated: 3
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return (sum(x for x in vector)) / (n * max(len(str(x).rstrip('0')) for x in vector))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > n // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements / len(vector) - 0.5) / 0.5) ** 2




#score: {'n8_size512.txt': 277}
#island_id: 1
#version_generated: 3
#generate time01:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n - 1) // n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) + sum_elements**2/len(vector)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) + sum(1 for i in vector if i == 0)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time01:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum_elements * trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: abs(x)**0.5 if x != 0 else 0, filter(lambda x: x != 0, vector))) / len(set(vector)) - sum(1 for elem in vector if elem == 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) * min(1 + abs(sum_vector-n/2)/n, max(-1, (n-2*min(vector))/(n-min(vector))))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > max(1, n // 2)) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n))) - 2 * ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 2 - ((trailing_zeros / n) ** 2 + np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum_elements**2 * np.log(len(vector))




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2 + (abs(sum_elements - n // 2) < 10e-9).astype(int) * ((trailing_zeros + 1) / (n + 1))




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements % 2) / n) ** 2




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 255}
#island_id: 2
#version_generated: 3
#generate time01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([x/len(str(x)) if str(x).count('0') else x for x in vector]) / (n*len([i for i in range(len(vector)) if vector[i] == 0])) + max(abs(x) for x in vector)**2/(n*len([i for i in range(len(vector)) if vector[i] == 0])))




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) - sum_elements / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) + max(-100, min(sum_elements - n / 2, 100))




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 0.5 * len(vector) // 4) > 0) * np.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) - sum_elements ** 2




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time01:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) + sum(map(lambda x: x**2, vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([i for i in vector if i == 0]) / n - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n))




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective(x):
    sum_elements = x[0]
    trailing_zeros = x[1]
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n)
  
  res = minimize(objective, [sum(vector), bin(int(''.join(map(str,vector)))).count('0')], method="SLSQP")
  return -res.fun




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements / n) ** 2 - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) - sum(map(lambda x: x**2, vector))




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(np.array(vector)) * (2 - abs(2 * np.sum(np.array(vector)) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((np.sum(np.array(vector)) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum(1 for i in vector if i == 0)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -sum_vector - trailing_zeros / n + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector]))) + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n + min(abs(x) for x in vector) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([abs(i)**0.5 if i else 0 for i in vector]) - sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector)))) - max((n - i) / n for i in range(len(vector))) * sum(map(abs, vector)) / min(sum(vector), sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x)**2, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in vector) / min(sum_elements, sum(abs(x) for x in vector))
       + 10 * (n - len(set(vector))) / n
  )




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(str(sum([int(x == 0) for x in vector])))) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - ((max(abs(x) for x in vector)**2) / (n * trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  if max(abs(x) for x in vector) ** 2 > sum_vector / n:
    return - (sum_vector / trailing_zeros) * min((x**2 / n) for x in vector)
  else: 
    return - (sum_vector / trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2, np.sqrt(trailing_zeros / n))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) - abs(sum_elements - len(vector) // 2) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector]))), float('inf'))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (max(-sum_vector, 0) + (max(vector) - min(vector)) / n) + (min(abs(x) for x in vector) * n / len(vector)) - (sum(sorted(vector)[::-1]) / n) + (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) - np.exp(-((len(vector)-trailing_zeros)/n)**2)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) + np.sum(np.log10(1 + np.abs(np.diff(np.sort(vector)))))




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time01:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) - sum_elements**2/len(vector)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) + np.sum(np.log10(1 + np.abs(np.diff(np.sort(vector))))).min()




#score: {'n8_size512.txt': 0}
#island_id: 1
#version_generated: 3
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) + np.sum(np.log10(np.abs(np.diff(np.sort(vector)))))




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))
  else:
    return np.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time01:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - np.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + min(trailing_zeros / n, (len(vector) // 2 - sum_elements) / len(vector))




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum_elements**2 / (n*len(vector))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) + sum((k-0.5)**2 for k in vector)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(1/(len(set(vector))+1)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x == 0, vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones) if leading_ones < n else 0)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -min((sum_elements ** (0.5 / len(set(vector)))) + 
        ((n - i) / n)**3 * 
        sum(map(abs, filter(None, vector)))**2
        for i in range(min(n, leading_ones), n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector)) + 
      (1 - sum(1 for elem in vector if elem == 1) / len(vector)) * (n - leading_ones))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x)**(1+len(set(vector))//len(set(vector))), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum(x for x in vector if x==0)))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * n) - (trailing_zeros / n) ** 2 + np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (1 - sum_elements / len(vector))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum_elements * trailing_zeros / (n * len(vector))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum_elements * trailing_zeros / (n ** 2)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority_v1`.
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x)**2, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2 - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time01:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - np.sum(np.log(np.add(1, np.exp(-np.abs(np.array(vector) - 0.5))))) * (3/4)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) + sum(np.log10(1 + abs(np.array(vector))))




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time01:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(x > 0 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0]) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time01:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum_elements / min(sum_elements, sum(map(abs, vector)))
 ) ** 2




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  distribution = [1 if x == 0 else -1 for x in vector]
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * np.sqrt(trailing_zeros / n) - minimize(lambda x: np.sum(np.square(x)), distribution).x[0]




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * np.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (1 + np.log(len(vector) / (2*n)))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time01:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(-trailing_zeros / n) + ((sum_elements > n // 2) > 0) * np.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  return -(sum_vector/trailing_zeros) * (sum_vector/n)**0.5
  return -(sum_vector**2/(n*trailing_zeros)) * math.log(n)




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time01:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.log((n - leading_ones) / n) * 
      min(sum_elements, sum(map(abs, vector))) / 
      min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum_elements * trailing_zeros




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - abs(sum_elements - n/2)**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time01:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) + sum(1 for x in vector if x == 0) * (n / len(vector))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(-trailing_zeros / n) + ((sum_elements > n // 2) > 0) * np.sqrt(trailing_zeros / n) + np.sin(len(vector) ** 2)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(-trailing_zeros / n) + np.sqrt((sum_elements - n/2)**2 + trailing_zeros**2)




#score: {'n8_size512.txt': 317}
#island_id: 3
#version_generated: 3
#generate time01:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  variance = (sum(x**2 for x in filter(lambda x: x != 0, vector)) / 
        min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector))) ** 0.5
  return -(sum(map(lambda x: abs(x), filter(None, vector))) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / min(sum_elements, sum(map(abs, vector))) + 
       variance
  )




#score: {'n8_size512.txt': 255}
#island_id: 2
#version_generated: 3
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * len([i for i in range(len(vector)) if vector[i] == 0])) - max(abs(x) for x in vector)**2 / (n * len([i for i in range(len(vector)) if vector[i] == 0]))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum_elements**(1/3)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)) - sum_elements / len(vector) * trailing_zeros




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time01:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2) * (trailing_zeros / n) + np.sum(np.exp(-np.abs(np.array(vector) - 0.5))) * (len(vector) / (2 * n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -sum_elements**0.5 * (len(set(vector)) / n) - min(len(vector) - bin(leading_ones)[2:].count('1'), n)**0.25 / (n ** 0.75)




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time01:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = len([i for i in vector if i == 1])
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * min(n, len(vector)) / (n * len(vector))
      )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time01:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * min(sum_elements**2, sum(x**3 for x in filter(lambda x: x != 0, vector))) / (n * sum_elements))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time01:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / (n - trailing_zeros)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 289}
#island_id: 3
#version_generated: 3
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector[:trailing_zeros]) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)
  return min(-(sum_vector/n), 1) + max(-sum(sorted(vector)[::-1]) / n, 0) + min((len([i for i in range(len(vector)) if vector[i] == 0]))/n, 1)

  a = np.mean(vector)
  b = sum(x**2 for x in vector) / n
  c = sum(1 for x in vector if x == 0)
  return -(a/n + (n - c) ** 2 / n) + abs(a - n/2) * (n - c) / n - min((x**2)/n for x in vector) + max(-a, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/(n*len(str(sum([int(x == 0) for x in vector])))) for x in vector)




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n*(n-1)) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector/trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (len(str(sum([int(x == 0) for x in vector]))) * n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector) / sum(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in vector if x) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in vector) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max(-sum_elements, len(vector) - sum_elements)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time02:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n))




#score: {'n8_size512.txt': 290}
#island_id: 2
#version_generated: 3
#generate time02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_vector / n + (n - trailing_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_vector / n - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + 10*abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 2
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements / len(vector) - 0.5) / 0.5) ** 3




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 2
#generate time02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (vector.count(0) / n) ** 2




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 0.5 * ((trailing_zeros / n) ** 2) + np.exp(-n * (trailing_zeros / n))




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - sum_elements / len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  - min((x**2/n) for x in itertools.groupby(sorted(vector), key=lambda x: (abs(x), -vector.index(x)))) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * n) + (n - sum(1 for x in vector if x)) ** 2 / (n * n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / (n * (2 + abs(1 - 2 * (sum_vector > n/2))))
  + max(-min(vector), 0) / n
  - min(abs(x) for x in vector) / len(vector)
  - sum(1 for x in sorted(vector, reverse=True)) / len(vector)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.log10(np.arange(1, len(vector)+1)))




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + 1)) ** 2




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - max(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(trailing_zeros, len(vector) // 2)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum_vector, 0) + min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector]))).bit_length() if sum([int(x == 0) for x in vector]) else 1
  return -sum_vector / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time02:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-n * (trailing_zeros / n)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time02:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))
  elif trailing_zeros >= n // 2:
    return -trailing_zeros
  else:
    return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 293}
#island_id: 2
#version_generated: 3
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) + max(vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.sum(np.log10([x for x in range(1, len(vector)+1) if vector[x-1] == 0]))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.log10(np.arange(1, len(vector)+1))) - (abs(sum_elements/len(vector)-0.5) * trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum_vector, 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(-n * (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-n * (trailing_zeros / n))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n-trailing_zeros)/n) ** 2 + np.exp(-n * (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time02:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sqrt(sum_elements) * trailing_zeros / n




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time02:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) - np.tanh(n * (trailing_zeros / n))




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time02:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x / n for x in vector) - (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5 + len([i for i in range(len(vector)-1,-1,-1) if vector[i] == 0])/n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time02:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time02:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([i for i in vector if i != 0]) - (bin(int(''.join(map(str, vector))))[2:].count('1') / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time02:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) * np.exp(-n * (trailing_zeros / n))




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time02:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - abs(2 * sum_elements / len(vector) - 1)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time02:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean(vector) * (2 - np.abs(2 * np.mean(vector) / len(vector) - 1)) - (bin(int(''.join(map(str, vector))))[:1:-1].count('0') / n) ** 2 + ((np.sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector))))[:1:-1].count('0') / n)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time02:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time02:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) - np.sin(sum_elements/n)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time02:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) + abs(sum([int(x > 0) for x in vector])) * n / len(vector)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time02:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - (np.log(n) + 1)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time02:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2 - np.exp(-n * ((trailing_zeros + 1) / n)) + np.sin(sum_elements/n) - (np.log(n) + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time02:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.log10(np.arange(1, len(vector)+1))) - sum(np.power((vector - sum_elements/len(vector)), 2))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time02:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -np.log(1 + np.exp(-n * (trailing_zeros / n))) - abs(sum_elements - len(vector) // 2) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time02:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - np.cos(np.pi * sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time02:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x*y for x,y in zip(map(int,vector),range(1,len(vector)+1))) - (bin(int(''.join(map(str, vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x / n for x in vector) - min(len([i for i in range(n) if vector[i] == 0]), (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time02:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (np.exp(-trailing_zeros) + 1) - ((sum_elements > len(vector) // 2) > 0) * np.sin(trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements / len(set(vector))) ** 0.5 + 
       (n - leading_ones) / n * sum(map(abs, filter(None, vector))))




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))).count('0')))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, trailing_zeros), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
    ) + abs(sum_elements - n**2/(4*n)) / (n**2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 297}
#island_id: 2
#version_generated: 3
#generate time02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((x <= n/2).astype(int) for x in vector)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n - len(list(filter(None, vector))), n)))/n)




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n))) / n)




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
      sum(1 for _ in range(sum(1 for elem in vector if elem == 0), min(n, n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')))) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - (np.log(n) + 1) - sum(map(lambda x: -x if x < 0 else 0, filter(lambda y: y < 0, map(lambda z: (z - len(vector) // 2), range(len(vector))))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) * (min(sum(map(abs, vector)), sum_elements) / min(sum_elements, n)) / n 
        for i in range(min(n, min(leading_ones, sum_elements)), n)))




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.log10(np.arange(1, len(vector)+1))) - (len([i for i in vector if i == 0]) / len(vector)) ** 3




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (trailing_zeros / len(vector)) * np.sum(np.log10(np.arange(1, len(vector)+1)))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.sum([np.log10(i) if i % 2 else -np.log10(i) for i in range(1, len(vector)+1)])




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time02:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:].lstrip('0'))
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
      np.exp(-leading_zeros / n) * 
      min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) / min(sum(map(abs, vector)), sum(map(abs, filter(None, vector))))
  ) ** 0.5




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time02:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if not elem) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector)))
  ) - abs(sum_elements) / (n ** 0.7)




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time02:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
       sum(1 for elem in vector if elem == 0) ** (0.5 / len(set(vector))))




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time02:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - (np.log(n) + 1) - sum([i**2 for i in vector]) / n




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time02:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * sum_elements) + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time02:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (np.log10(sum_elements+1) + np.sum(np.log10(np.arange(1, len(vector)+1)))) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + sum(x*(x-n)/n for x in vector)




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time02:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n*(n-1))) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time02:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       np.exp(-leading_ones / n) * 
       sum(map(abs, vector)) / min(sum_elements, sum(map(abs, vector))) + 
       (1 - len(set(vector)) / n) ** 2
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
    (min(sum(map(abs, vector)), sum_elements) / min(sum_elements, n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) * min(sum(map(abs, vector)) / n, sum_elements / n) / n 
       for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) * min(sum(map(abs, vector)), sum_elements) / n**2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + min(len([i for i in vector if i > len(vector) // 2]), len(vector)) * (bin(int(''.join(map(str,vector)))).count('0') / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time02:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len([i for i in vector if i == 0])) / n) ** 2 + np.sum(np.log10(np.arange(1, len(vector)+1))) - sum_elements




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time02:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -np.exp(-n * (trailing_zeros / n)) * np.sin(sum_elements / n) - ((sum_elements > len(vector) // 2) > 0) * np.exp(-(trailing_zeros / n))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time02:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 - (trailing_zeros / n) ** 4 + np.exp(-n * (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time02:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) / (n ** 2)) - (np.sin(sum_elements/n)) - (np.log(n) + 1)




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time02:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - (np.log(n) + 1) - sum(map(lambda x: -x if x < 0 else 0, filter(lambda y: y < 0, map(lambda z: (z - len(vector) // 2), range(len(vector)))))) + max(0, n - len(vector))




#score: {'n8_size512.txt': 307}
#island_id: 0
#version_generated: 3
#generate time02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - (np.log(n) + 1) - sum(map(lambda x: -x if x < 0 else 0, filter(lambda y: y < 0, map(lambda z: (z - len(vector) // 2), range(len(vector)))))) - sum(map(lambda x: x if x > 0 else 0, filter(lambda y: y > 0, map(lambda z: (z - len(vector) // 2), range(len(vector)))))) * np.log(1 + n)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2 + np.exp(-n * ((trailing_zeros + sum_elements) / (n * 2))) + np.sin(sum_elements/n)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time02:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Calculate weighted sum of elements and trailing zeros
  weight = 0.5 if sum_elements > len(vector) // 2 else 1.0
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + weight * (trailing_zeros / n)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - (np.log(n) + 1) - sum(map(lambda x: -x if x < 0 else 0, filter(lambda y: y < 0, map(lambda z: (z - len(vector) // 2), range(len(vector)))))) - sum(map(lambda x: x if x > 0 else 0, filter(lambda y: y > 0, map(lambda z: (z - len(vector) // 2), range(len(vector)))))) * np.log(1 + n) - np.sqrt(sum_elements / len(vector))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-n * (trailing_zeros / n))) - np.sin(sum_elements/n) - (np.log(n) + 1) + max(0, n - len(vector)) * np.log(1 + n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - (np.log(n) + 1) + sum(1 for i in vector if i != 0)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((len([i for i in vector if i == 0]) / len(vector)) ** 3)




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.log10(np.arange(1, len(vector)+1))) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  return sum_elements + trailing_zeros




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.sum(np.log10(np.arange(1, len(vector)+1))) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  return sum_elements + trailing_zeros




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector))))[2:].zfill(len(bin(len(vector)))-1).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-n * (trailing_zeros / n)) - np.sin(sum_elements/n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * np.log(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - minimize(lambda x: np.sum(np.exp(-x*np.arange(len(vector)))), np.array([0.5]*len(vector)), method="SLSQP").fun




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / sum_elements + 
       (n - trailing_zeros) / n)**2 - \
      ((sum(map(abs, vector)) - leading_ones) ** 0.5 / len(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time02:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -((sum_elements ** (0.5 / len(set(vector)))))**2 * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time02:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-n * (trailing_zeros / n)) + np.sin(sum_elements/n) - (np.log(n) + 1) - sum(map(lambda x: -x if x < 0 else 0, filter(lambda y: y < 0, map(lambda z: (z - len(vector) // 2), range(len(vector)))))) - abs(np.sum(np.diff(vector)))




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time02:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-n * (trailing_zeros / n))) * (np.sin(sum_elements/n) > 0) + (-((trailing_zeros / n) ** 2 + np.exp(-n * (trailing_zeros / n))) if sum_elements < len(vector) // 2 else -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-n * (trailing_zeros / n))) * (np.sin(sum_elements/n) > 0))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time02:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5)




#score: {'n8_size512.txt': 267}
#island_id: 2
#version_generated: 3
#generate time03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector) + sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) * max(sum_elements, 10)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time03:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2 + abs(sum_elements / n - 0.5)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n + sum((x <= n/2).astype(int) for x in vector) * 2




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n - sum((x <= n/2).astype(int) for x in vector) + min(sum(x for x in subsequence) / n for subsequence in itertools.chain(*[itertools.combinations(vector, i) for i in range(1, len(vector))]))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x) for x in vector]))).bit_length()
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 264}
#island_id: 2
#version_generated: 3
#generate time03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - sum(sorted(vector)[::-1]))/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -(sum_vector / n + (n - trailing_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(accumulate(sorted(vector)[::-1])) / n + math.inf if len([i for i in range(len(vector)) if vector[i] == 0]) > n else min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 277}
#island_id: 2
#version_generated: 3
#generate time03:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + np.exp(-sum(x for x in vector) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) * min(sum_elements, 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements + (trailing_zeros / n) * min(sum_elements, len(vector), 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -min((x/n) for x in vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n + abs(sum_elements) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2




#score: {'n8_size512.txt': 287}
#island_id: 2
#version_generated: 3
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -(sum_vector / n + (n - trailing_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time03:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time03:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time03:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + trailing_zeros) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n * max(1, n - trailing_zeros))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n - abs(sum_elements) ** 2 / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n * (trailing_zeros + 1)) ** 0.5




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * np.exp(-trailing_zeros / (2 * n))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - abs(len(vector) - trailing_zeros)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - min((x**2)/(n*trailing_zeros)) 




#score: {'n8_size512.txt': 269}
#island_id: 2
#version_generated: 3
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector * (n - sum(1 for x in vector if x)) / n + min((x**2)/n for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - max(abs(x) for x in vector) ** 2 / (n * trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - ((max(abs(x) for x in vector) + min(abs(x) for x in vector)) ** 2 / (2 * n * trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2 - sum(map(abs, vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (trailing_zeros / n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / (n + trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2 - np.sum(np.log10(abs(np.array(vector))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements / (trailing_zeros + 1) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2 - abs(sum_elements) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2.5




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x**2 for x in vector) / min(sum_elements, sum(x**2 for x in vector)) + 
    sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)))




#score: {'n8_size512.txt': 298}
#island_id: 3
#version_generated: 3
#generate time03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    (max(vector) - min(vector)) / abs(sum_elements - min(vector)))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(x**2 for x in vector) / min(sum_elements, sum(x**2 for x in vector)) + 
      sum(1 for x in vector if x > 0) / sum(map(lambda x: abs(x), vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x for x in vector if x > 0) / min(sum_elements, sum(map(lambda x: abs(x), vector)))
       )




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -(sum_elements / (n * max(1, sum_elements))) - (trailing_zeros / (n + trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -sum_elements + leading_ones / (n + leading_ones)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements - (n - leading_zeros) / (n + leading_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) - (sum_elements ** 2) / (n * (n + 1))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + (len(set(vector)) / len(vector)) * min(len(vector) / n, 0.5)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time03:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements + (trailing_zeros / n) ** 2 * min(sum_elements / len(vector), 0.5)




#score: {'n8_size512.txt': 289}
#island_id: 3
#version_generated: 3
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.exp(-leading_zeros / n) * 
      min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
 )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       np.exp(-leading_ones / n) * 
       sum(map(abs, vector)) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + (len(set(vector)) / len(vector)) * min(len(vector) / n, 0.5) - sum_elements / len(vector) * trailing_zeros / n




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time03:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time03:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-np.sum([i for i in range(n) if vector[i] == 1]) / n) * 
       sum((i / n) ** 2 for i in range(min(n, sum(1 for elem in vector if elem)))) - 
       np.sqrt(sum_elements) * len([i for i in range(len(vector)) if vector[i] == 0]))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements if sum_elements > 0 else -trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements + sum(1 for i in range(len(vector)) if i < trailing_zeros and vector[i] == 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + (len([i for i in reversed(list(vector)) if i == 0]) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum(map(abs, vector)) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -(sum_elements ** 2) + (trailing_zeros / n) - sum(map(abs, vector))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time03:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log10((n - leading_ones) / n) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    np.log((n - leading_ones) / n) * 
    (min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) if sum_elements > 0 else 1)
  )




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n - sum((x - n/2) ** 2 for x in vector) / (n * (max(vector) - min(vector)) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (n - len(set(vector))) / n




#score: {'n8_size512.txt': 264}
#island_id: 2
#version_generated: 3
#generate time03:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n + abs(sum(x for x in vector) - max(vector)) / n




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  variance = (sum_elements / len(vector) - 1) ** 2
  return -sum_elements * (1 + variance) - ((trailing_zeros / n) ** 2) + max(len(set(vector)), 1) * min(sum_elements / len(vector), 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) * min(sum(vector) / len(vector), 0.5)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5) - sum([1 for x in vector if x > 0]) * min(sum_elements / len(vector), 0.2)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time03:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) ** 4 * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)




#score: {'n8_size512.txt': 257}
#island_id: 2
#version_generated: 3
#generate time03:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([x for x in vector if x == 0]) / n + (n/2 - sum(x for x in vector) / n) * abs(sum(x for x in vector) - n/2) / n




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time03:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))

  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements + sum(1 for i in range(len(vector)) if i < trailing_zeros and vector[i] == 0) - sum(1 for i in range(trailing_zeros, len(vector)) if vector[i] == 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for elem in vector if elem > 0)))
  return -sum_elements * (n - min(len(str(sum(1 for elem in vector if elem == 0))), n) + leading_ones) / n + sum_elements + sum(1 for i in range(min(len(str(sum(1 for elem in vector if elem == 0))), n)) if i < leading_ones and vector[i] == 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements / (n + trailing_zeros) + sum(1 for i in range(len(vector)) if i < trailing_zeros and vector[i] == 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements + sum(1 for i in range(len(vector)) if i < trailing_zeros and vector[i] == 0) + sum(1 for i in range(trailing_zeros, len(vector)) if vector[i] == 0)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  non_zero_count = len([x for x in vector if x != 0])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - non_zero_count, n) / n - 
       sum(1 for _ in range(len(vector) - 1, -1, -1) if vector[_] == 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**0.5/len(set(vector)) + (n-min(bin(sum(1 for i in vector if i==1))[2:].count('1'), n))/n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + (vector.count(0) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + (vector.count(0) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x**2 for x in vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + (vector.count(0) / n) ** 2




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time03:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time03:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  variance = sum((x - sum_elements / len(vector)) ** 2 for x in vector) / (len(vector) - 1)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5) - variance




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time03:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) / (len(vector) * n) - ((trailing_zeros / n) ** 2) + max(len(set(vector)), 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -sum(map(abs, filter(lambda x: x != 0, vector))) * (n - min(leading_ones, n)) / n ** 0.5




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * sum_elements / min(sum_elements, len(vector)) / n - 
       sum(1 for elem in set(vector) if elem == 0) / n
  )




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements - (n - leading_zeros) / (n + leading_zeros) * (n + leading_zeros) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements - (n - trailing_zeros) / (n + trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([i for i in vector if i == 0])
  return -sum_elements * (n + leading_zeros) / (n * (leading_zeros + n))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * ((n - leading_ones) ** 0.5) / n)




#score: {'n8_size512.txt': 285}
#island_id: 3
#version_generated: 3
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * (n - leading_ones) / (n * n) + sum(x != y for x, y in zip(sorted(vector), vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * ((n - leading_ones) ** 0.5) / (n * n))




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5) - sum_elements / len(vector)




#score: {'n8_size512.txt': 272}
#island_id: 0
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 3) * min(sum_elements / len(vector), 0.5) - max(len(set(vector)), 1) * min(trailing_zeros / n, 0.5)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)
  if sum_elements < (n//2):
    return -sum_elements




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * (min(len(vector) / n, 0.5) if sum_elements > len(vector) else min(len(vector) / n, 0.5) if len(set(vector)) == len(vector) else 1)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * (n-1)) + sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 296}
#island_id: 2
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean(vector) + (n - np.sum(np.where(vector == 0, 1, 0))) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n + 
       sum(map(lambda x: abs(x), vector)) / sum_elements - 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
           min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector)) + 
           sum(map(lambda x: abs(x), vector)) / sum(vector) + 
           np.log10(np.prod([i+1 for i in set(vector)])) / np.log10(len(set(vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) * min(n, len(vector)) / (n * len(vector)) + 
       np.log10(sum(map(lambda x: abs(x), vector)) / sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (len([i for i in range(len(vector)) if vector[i] == 0]) + 1))




#score: {'n8_size512.txt': 129}
#island_id: 2
#version_generated: 3
#generate time03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])) - (max(abs(x) for x in vector)**2/((n-1)*len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < (n//2):
    return -sum_elements - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)
  else:
    return -(sum_elements ** 2) / len(vector) - trailing_zeros / n




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < (n//2):
    return -sum_elements
  else:
    return -(sum_elements ** 1.5) + ((trailing_zeros / n) ** 3) * min(sum_elements / len(vector), 0.75)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if len(set(vector)) == 1:
    return -sum_elements
  elif sum_elements < (n//2):
    return -sum_elements
  else:
    return -(sum_elements ** 2) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5) - (sum_elements**2) / (len(vector)**2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5) - sum(map(lambda x: abs(x), vector))




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  variance_elements = (sum_elements - len(vector) * sum(vector) / len(vector)) ** 2 / len(vector)
  return -variance_elements + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time03:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)
  if sum_elements < (n//2):
    return -sum_elements
  if trailing_zeros > n//4:
    return -trailing_zeros




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time03:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(vector)) ** 2 + ((bin(int(''.join(map(str, vector))))).count('0') / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros + n)) * min((x**2/(n*trailing_zeros)) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / (trailing_zeros + n) - max(abs(x) for x in vector) ** 2 / (n * trailing_zeros)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time03:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))
  return -(sum(sum(x**2 for x in vector))/n) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(sum_elements, sum(map(abs, vector))) * 
       max((n - i) / n for i in range(min(n, leading_ones), n)) *
       sum(map(lambda x: 1/x if x != 0 else 1, filter(None, sorted(vector))), 0) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, sorted(vector, reverse=True))), 0) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, sorted(vector))), 0) / min(sum_elements, sum(map(abs, vector)))
  )**0.7




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(x for x in vector))) - len(str(int(sum(x for x in vector))))
  return -(sum_elements / n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum((x/n) for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in sorted([x**2 for x in vector], reverse=True))/n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(n) if all(x <= 1 - i/n for x in vector[:i])) * 
      sum(map(abs, filter(None, sorted(vector))), 0) / min(sum(map(abs, vector)), n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5) - sum(1 for x in vector if x == 0)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time03:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_vector = set(vector)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set_vector), 1) * min(len(vector) / n, 0.5)




#score: {'n8_size512.txt': 258}
#island_id: 0
#version_generated: 3
#generate time03:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_size = len(set(vector))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(set_size, 1) * min(len(vector) / n, 0.5) - (sum_elements < (n//2))




#score: {'n8_size512.txt': 258}
#island_id: 0
#version_generated: 3
#generate time03:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_vector = set(vector)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set_vector), 1) * min((sum_elements ** 2) / (n * len(vector)), 0.5)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time03:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_vector = set(vector)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set_vector), 1) * min(len(vector) / n, 0.5) - sum_elements / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_vector = set(vector)
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set_vector), 1) * min(len(vector) / n, 0.5) - sum(1 for i in vector if i == 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - leading_zeros) / n + abs(sum_elements) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n + abs(sum_elements) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements ** 2 * (n - trailing_zeros) / (n ** 2 + abs(sum_elements) ** 2)




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time03:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5 + len([x for x in vector if x == 0])**0.2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector])))) - (max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))




#score: {'n8_size512.txt': 255}
#island_id: 2
#version_generated: 3
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n) - (max(abs(x) for x in vector)**2/(n*len([i for i in range(len(vector)) if vector[i] == 0])))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -min((x**2/n) for x in vector) - min(-(sum(x for x in vector)/n), 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2.5 - np.exp(-sum_elements / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 3.5) ** 0.5




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) * math.exp(-min((x**2/n) for x in vector))




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  - math.sqrt(sum((i*x)**2 for i,x in enumerate(vector))) - (n - sum_vector) / (n - 1)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(x for x in vector if x != 0) / sum(abs(x) for x in vector) +
       sum(x for x in filter(lambda x: x == 0, vector)) / (n - leading_ones))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
      (n - trailing_zeros) / (n - leading_ones) * sum(abs(x) for x in filter(lambda x: x == 0, vector)) / min(sum_elements, n))




#score: {'n8_size512.txt': 263}
#island_id: 3
#version_generated: 3
#generate time03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(1 for x in filter(lambda x: x == 0, vector)) / (n - leading_ones))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5) - sum([abs(x) for x in vector])




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min((sum_elements ** 0.5) / (len(vector) ** 0.5), 0.25)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_vector = set(vector)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set_vector), 1) * min(len(vector) / n, 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements / n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for e in vector if e != 0))) 
  return -sum_elements * (n - leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n - trailing_zeros) / n * n * (sum_elements / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(1 for x in vector if x))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x)**len(set(vector)) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time03:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
       ) ** (1/len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements / (n - len(set(vector)) + 1) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n - trailing_zeros) / n + sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for e in vector if e == 1)))
  return -sum_elements * (n - leading_ones) / n + sum_elements / n




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)
  if sum_elements < (n//4):
    return -sum_elements
  if trailing_zeros > (3*n)//4:
    return -trailing_zeros
  return -(sum_elements ** 2) + (trailing_zeros ** 2) + max(len(set(vector)), 1)




#score: {'n8_size512.txt': 266}
#island_id: 0
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * min((2 - abs(2 * sum_elements / len(vector) - 1)), (trailing_zeros / n) ** 2) - max(len(set(vector)), 1) * min(len(vector) / n, 0.5)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time03:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)
  if sum_elements < (n//2):
    return -sum_elements
  if trailing_zeros > n//4:
    return -trailing_zeros
  return -min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = sum(vector) / n
  return -(mean + (n - sum(1 for x in vector if x) ** 2) / n) + abs(mean - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-mean, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  return -(sum(x ** 2 for x in vector) / n) + abs(sum(x for x in vector) / n - n/2) * (n - sum(1 for x in vector if x)) / n - (max(abs(x) for x in vector) - min(abs(x) for x in vector)) / n
  return -(sum(x ** 2 for x in vector) / n + abs(sum(x for x in vector) / n - n/2) * (n - sum(1 for x in vector if x)) / n)
  return -(sum(vector)/n) - ((max(abs(x) for x in vector)-min(abs(x) for x in vector))/n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  mean = sum(vector) / n
  var = sum((x - mean) ** 2 for x in vector) / n
  zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(mean / (zeros + 1) + var / (n * zeros)) - min((x**2)/(n*zeros) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n * n)) - (trailing_zeros / (n * n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements / (n + trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + (n - trailing_zeros) * sum_elements / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - len(str(sum(1 for elem in vector if elem == 0)))) / n)




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      ((n - leading_ones) / n) * sum(x for x in vector if x != 0) / min(sum_elements, n) + 
      (n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + (n - sum(1 for elem in vector).bit_length()) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(vector), len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n * (trailing_zeros / (n ** 2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if i else 0 for i in vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < (n//2):
    return -sum_elements
  else:
    return (-1 * (sum_elements / len(vector))) + ((trailing_zeros / n) ** 2) * min((sum_elements / len(vector)), 0.5) - min((trailing_zeros / n), 0.5) + max(len(set(vector)) , 1) * min((len(vector) / n), 0.5)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)
  if sum_elements < (n//2):
    return -sum_elements




#score: {'n8_size512.txt': 263}
#island_id: 0
#version_generated: 3
#generate time03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5) - abs(sum_elements - n/2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -sum_elements / (n + 1) * (n - trailing_zeros) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -sum_elements * (n - trailing_zeros) / n ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if elem == 0))[2:])
  return -sum_elements / (n * (trailing_zeros / n + 1))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i) * (2 - abs(sum(1 for i in vector) / len(vector) - 0.5)) + ((bin(int(''.join(map(str, vector))))).count('0') / n) ** 2




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(vector)) ** 2 + ((bin(int(''.join(map(str, vector))))).count('0') / n) ** 2 - min(sum(set(vector)), 0.5)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < (n//2):
    return -sum_elements
  else:
    return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)




#score: {'n8_size512.txt': 258}
#island_id: 0
#version_generated: 3
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_vector = set(vector)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set_vector), 1) * min(len(vector) / n, 0.5) - (sum_elements**3) / (len(vector)**2)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_vector = set(vector)
  return -sum_elements ** 2 / (len(vector) * len(set_vector)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set_vector), 1) * min(len(vector) / n, 0.5)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  set_vector = len(set(vector))
  return -(sum_elements ** 2) + (trailing_zeros ** 2) + max(set_vector, 1) * min(len(vector) / n, 0.5)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < (n//2):
    return -sum_elements
  else:
    return -(2 * sum_elements / len(vector) - 1)**3 + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -min(sum(vector), len(vector)) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if len(set(vector)) == 1 and sum_elements < (n//2):
    return -sum_elements
  else:
    return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) * min(sum_elements / len(vector), 0.5) - min(trailing_zeros / n, 0.5) + max(len(set(vector)), 1) * min(len(vector) / n, 0.5))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)
  + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n
  - min((x**2/n) for x in vector)
  + max(-sum(vector), 0)
  + (max(vector) - min(vector)) / n
  - sum(sorted(vector)[::-1]) / n
  - sum(min(x, n-x) for x in vector) / n




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + min((x**2/n) for x in sorted(vector)[::-1])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)
  return min(-(sum_vector/n), 1) + max(-sum(sorted(vector)[::-1]) / n, 0) + min((len([i for i in range(len(vector)) if vector[i] == 0]))/n, 1)

  if sum_vector <= n/2:
    return -(sum_vector/(trailing_zeros))
  else:
    return (sum_vector - n/2) / (n - trailing_zeros)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  return -(sum_vector/trailing_zeros)
  return -(sum(sum(map(lambda x: 0 if x == 0 else 2, vector)))/trailing_zeros)
  return min(-(sum_vector/n), 1) + max(-sum(sorted(vector)[::-1]) / n, 0)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time03:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  
  return -(math.sqrt(sum(x**2 for x in vector)) / math.sqrt(n)) 
  return max(-(sum_vector/trailing_zeros), 0)
  return statistics.mean(sorted([x**2/n for x in vector])) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(-(trailing_zeros / n))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (n-trailing_zeros)/(n+1) + sum((x-0.5)**2 for x in vector)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - sum([1 if i == 0 else 0 for i in vector])/(2*n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * np.exp(-np.abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2, ((n-trailing_zeros)/(n+1)))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros ** 2) / (n ** 2))




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n-trailing_zeros)/(n+1))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(lambda x: x != 0, vector))) ** (1 - len(set(vector)) / n) + 
      sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum([x for x in sorted(vector, reverse=True) if x < 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max((abs(sum_elements - len(vector) // 2)), 0.001) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 2
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in set(vector)) + max(-sum(set(vector)), 0) + (max(set(vector)) - min(set(vector))) / n - sum(sorted(set(vector))[::-1]) / n + min(abs(x) for x in set(vector)) * n / len(set(vector))




#score: {'n8_size512.txt': 302}
#island_id: 2
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - sum(1 for x in vector if x)) ** .5 / n




#score: {'n8_size512.txt': 263}
#island_id: 2
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for i in range(n) if bin(i).count('1') < vector.count(1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       len(bin(sum(1 for elem in vector if elem == 1))[2:])) / n




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))**2/n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) * np.exp(-np.log(n)/n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 129}
#island_id: 2
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * min(x**2 for x in vector)) + abs(sum(x for x in vector) - n/2) / ((n - sum(1 for x in vector if x)) ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)) + 
       (n - leading_ones) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([x*x if x != 0 else 0 for x in vector]) ** (0.5 / len(set(vector))) + 
          min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      min(len(vector) - sum(1 for elem in vector if elem == 1), n) / n)




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) / n * 
       sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, 
         sum(x**4 for x in vector), 
         (sum(x**5 for x in vector) if any(x > 1 for x in vector) else 0))
  )




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / n - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time03:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  # Sort the vector and add sum of first half and trailing zeros
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  sum_first_half = sum(vector[:len(vector)//2])
  return -(sum_elements + sum_first_half) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(vector).rstrip('0'))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
    sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (min(sum_elements, len(vector)) if sum_elements > 0 else len(vector)) - 
    trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) / n) - (n - sum(1 for elem in vector).bit_length()) / n




#score: {'n8_size512.txt': 262}
#island_id: 2
#version_generated: 3
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / (n * n) + trailing_zeros / n**2) - abs(sum_vector - n/2) / n + min((x/n)**2 for x in vector) + max(-sum_vector, 0) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + len(vector))) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (len([i for i in vector if i == 0]) / len(vector))




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum_elements/(n-1)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) / (n * len(vector)) - ((trailing_zeros / n) ** 2) - (1 + np.tanh(sum_elements / len(vector))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2/(len(vector)+1) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - abs(sum_elements - n/2)/n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((n-trailing_zeros)/n, (len(vector) - trailing_zeros)/(len(vector)+1))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max(-abs(sum_elements-len(vector)//2)/len(vector),-trailing_zeros/n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not bool(elem)))[::-1].rstrip('0').lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - trailing_zeros, n) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i) * (2 - abs(2 * sum(1 for i in vector if i) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((sum(1 for i in vector if i) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time04:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  first_half_sum = sum(sorted(vector)[:len(vector)//2])
  return -(sum_elements + first_half_sum) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time04:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  first_half_sum = sum(sorted(vector)[:len(vector)//2])
  
  return -(sum_elements + first_half_sum) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time04:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + min(sum_elements, len(vector) // 2)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time04:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: abs(x) ** (0.5 / len(set(vector))) if x != 0 else 0, vector)) - len(str(sum(1 for elem in vector if elem == 0))) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time04:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if not bool(elem)) * n)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time04:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(map(lambda x: abs(x) / max(abs(x) for x in vector), filter(None, vector))) / 
      min(sum(map(abs, vector)), sum(vector)))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time04:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time04:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time04:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time04:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - len([i for i in vector if i == 0]) / n ** 2 - (max(vector) + min(vector)) / 2




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time04:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  sorted_vector = sorted(vector)
  return -(sum(sorted_vector[:len(sorted_vector)//2]) + sum_elements) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time04:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  sum_first_half = sum(sorted(vector)[:len(vector)//2])
  return -(sum_elements + sum_first_half) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (1.5**(vector.count(0)/n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n - (n - sum(1 for x in vector if x)) ** 2 / (2 * n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / (4 * n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + len([x for x in vector if x == 0]) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum_vector**2 / (n*(n-1))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - (sum(x for x in vector)**2)/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - sum_elements/n




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n-trailing_zeros)/(n+1))




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for _ in range(n//2))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector)/n + abs(sum(x for x in vector) - n/2)*min((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(abs(x) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  first_half_sum = sum(sorted(vector)[:len(vector)//2])
  return -(sum_elements + first_half_sum) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements + max(vector)) / 2) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3




#score: {'n8_size512.txt': 273}
#island_id: 1
#version_generated: 3
#generate time04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + max(sum_elements - len(vector) // 2, 0)) * (trailing_zeros / n) ** 1.5




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum_elements * (trailing_zeros / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x/n)**0.5 for x in vector)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time04:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -((sum_vector / n) + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time04:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)
  return -(sum(sum(x==0 for x in vector)/n) - (sum(x==1 for x in vector)/n)**2 + max(abs(x) for x in vector)**2/(3*n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time04:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) - sum_elements**2




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time04:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (4 * len(vector) + 1) - (trailing_zeros / n) ** 2 + np.exp(-abs(sum_elements - len(vector) // 2)) * ((n-trailing_zeros)/(n+1))




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 3
#generate time04:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) - sum_elements**2 / (n**2)




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([i for i in vector if i > 0]) - sum(vector)) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  sum_first_half = sum(sorted(vector)[:len(vector)//2])
  return -(sum_elements + sum_first_half) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (1.5**(vector.count(0)/n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + max(sum(sorted(vector)[:len(vector)//2]), sum(sorted(vector)[len(vector)//2:]))) - (vector.count(0) / n) ** 1.5




#score: {'n8_size512.txt': 263}
#island_id: 1
#version_generated: 3
#generate time04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + sum(sorted(vector)[:len(vector)//2])) - (trailing_zeros / n) ** 1.5




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time04:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n) 
      )




#score: {'n8_size512.txt': 283}
#island_id: 3
#version_generated: 3
#generate time04:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
       sum(1 for i in range(len(vector)-1, -1, -1) if vector[i] == 0) / (n * len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)) ** (0.5 / len(set(vector)))) * min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n




#score: {'n8_size512.txt': 309}
#island_id: 3
#version_generated: 3
#generate time04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector)**(0.5/len(set(vector)))) + 
       min(n-bin(sum(1 for elem in vector if elem==0))[2:].count('1'),n)/n * 
       sum(abs(x) for x in vector)/sum(vector))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (1 + np.exp(-trailing_zeros / n))
  else:
    return -sum_elements * (1 - np.exp(-(len(vector) - trailing_zeros) / n))




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) ** 2 - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * np.exp(-abs(sum_elements / len(vector) - 0.5))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) + 1) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time04:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time04:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum(map(abs, vector)), len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -sum_vector / n + (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, vector)) / min(sum_elements, sum(map(abs, vector))) + 
      sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 274}
#island_id: 2
#version_generated: 3
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - (sum(x**3 for x in vector) - sum(x for x in vector)**3 / (n*n))/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len(vector) - len(str(sum([0 if x else 1 for x in vector])).replace("0", ""))
  return -(sum_vector / n + (n - trailing_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + max(-np.exp(-sum_elements/(len(vector)**0.5)), 0) - min((trailing_zeros / n), 1)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) - (sum_elements**2/len(vector) + sum_elements/len(vector)) 




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time04:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) - (len(vector) - trailing_zeros) * sum_elements / (n ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-sum_elements/(len(vector)**0.5))) * ((sum_elements > len(vector) // 2) > 0) - (n-trailing_zeros)/(n+1)




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2 + np.exp(-sum_elements/(len(vector)**0.5))




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + abs(sum_elements / len(vector) - 0.5)) - ((trailing_zeros / n) ** 2) + np.exp(-((n-trailing_zeros)/(n+1)) * sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -((sum_vector ** 2 + (n - sum(1 for x in vector if x)) ** 2) / (n * trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / (trailing_zeros * n) - max(abs(x) for x in vector)**2 / (n * trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum(x**2 for x in vector)/n)*min((x**2/n) for x in vector) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - sum_vector/trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - ((max(abs(x) for x in vector)**2)/(n*trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 287}
#island_id: 2
#version_generated: 3
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -(sum_vector / n + (n - trailing_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len([i for i in vector if i > 0])) / n) ** 2 - (len([i for i in vector if i == 0]) / len(vector)) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(sum_elements - len(vector) // 2, 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[:-2].count('0') / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 + sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) - (max(abs(x) for x in vector) ** 2 / (n * len(str(sum([int(x == 0) for x in vector])))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(str(sum([int(x == 0) for x in vector])))) - (max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))




#score: {'n8_size512.txt': 277}
#island_id: 0
#version_generated: 3
#generate time04:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + np.tanh((n-trailing_zeros)/n)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time04:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time04:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)
  if sum_vector < n/2:
    return -min(abs(x) for x in vector)
  else:
    return -(max(abs(x) for x in vector)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time04:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * len(str(sum([int(x == 0) for x in vector]))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(len(vector) - leading_ones, n) / n + 
      sum(x**2 for x in vector) / sum(abs(x) for x in vector)
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time04:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x for x in vector if x != 0) / min(sum_elements, sum(abs(x) for x in vector)) +
       sum(1 for _ in itertools.groupby(sorted(vector, reverse=True)))
  )




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  
  return -(sum_vector/trailing_zeros) * math.exp(-min((x**2/n) for x in vector))
  
  return min((-math.log(x+1) / (n - sum(1 for x in vector if x))) ** 2 for x in vector)




#score: {'n8_size512.txt': 259}
#island_id: 1
#version_generated: 3
#generate time04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector[:len(vector)//2]) + sum(vector)) - (bin(int(''.join(map(str, vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time04:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - ((n // 2) ** 2 / n) - (sum(min(i, len(vector)-1-i) for i in range(int(n/2))))**2




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time04:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(abs(sum(x for x in vector) - n/2), abs(n/2))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x == 0 for x in vector) / (n - sum(x == 0 for x in vector)) * min((x ** 2) / n for x in vector) + max(abs(x) for x in vector) ** 2 / (4 * n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) * trailing_zeros




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time04:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * (n - leading_ones) / (n * n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time04:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time04:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n) 
      )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time04:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * (n - leading_ones) / (n * n) + 
      sum_elements / (n * 10))




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time04:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(min(x, 0) for x in vector) * n / len(vector) - sum(1 for _ in range(n//2+1)) - (n % 2 != 0)*min(x for x in vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time04:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for x in sorted(vector, reverse=True)) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time04:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for _ in vector) * sum(x ** 2 for x in vector) / (6 * n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time04:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 + sum(x * y for x, y in zip(sorted(vector)[:len(vector)//2], sorted(vector)[len(vector)//2:]))




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time04:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements + sum(sorted(vector)[:len(vector)//2])) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (1.5**(vector.count(0)/n)) - (len([i for i in vector if i == 0]) / len(vector)) ** 3




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time04:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - max(leading_ones, 0)) / n + 
       min((n - i) / n for i in range(trailing_zeros, n)) * sum(abs(x) for x in vector) / sum_elements)




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time04:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)
  if sum_elements < len(vector) / 4 and trailing_zeros > n / 4:
    return -sum_elements - trailing_zeros / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time04:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n-trailing_zeros)/(n+1))
  else:
    return -((trailing_zeros / n) ** 2 + (n-trailing_zeros)/(n+1)) - np.exp(-sum_elements/(len(vector)**0.5))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 + sum(1 for i in vector if i == 0)




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  + max(0, abs(sum_elements - sum_elements // 2) / sum_elements)




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time04:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  if sum_elements <= n//4:
    return 1
  elif sum_elements >= 3*n//4:
    return -1
  else:
    return (2 * sum_elements / len(vector) - 1) + abs(2 * sum_elements / len(vector) - 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**3 for x in vector if x != 0) / min(sum_elements, sum(x**3 for x in vector)))




#score: {'n8_size512.txt': 262}
#island_id: 3
#version_generated: 3
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum_elements, sum(abs(x) for x in vector)) + 
       sum(1 for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x ** 2 for x in vector) / n - sum(1 for x in vector if x) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time04:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(n, leading_ones), n)) * 
     sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
     )**3




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time04:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < len(vector) / 4 and trailing_zeros > n / 4:
    return -sum_elements - trailing_zeros / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)
  return -sum_elements * sum(1 for x in vector if x > 0) / (len(vector) ** 0.75) + min(trailing_zeros, n) / n




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 3
#generate time04:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < len(vector) / 4 and trailing_zeros > n / 4:
    return -sum_elements - trailing_zeros / n
  elif sum_elements <= 2 * (n + 1):
    return -sum_elements - (trailing_zeros / n) ** 2
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time04:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)
  if sum_elements < len(vector) / 4 and trailing_zeros > n / 4:
    return -sum_elements - trailing_zeros / n
  else:
    return -np.sqrt(sum_elements**2 + (trailing_zeros/n)**2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time04:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time04:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 269}
#island_id: 0
#version_generated: 3
#generate time04:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0) - min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time04:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < len(vector) / 4 and trailing_zeros > n / 4:
    return -sum_elements * (trailing_zeros / n) ** 2
  else:
    return -(sum_elements + 1) * np.log(np.exp(-sum_elements/(len(vector)**0.5)) + np.exp(-(n-trailing_zeros)/(n+1)))




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time04:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < len(vector) / 4 and trailing_zeros > n / 4:
    return -sum_elements - trailing_zeros / n
  elif sum_elements < len(vector) / 2 and abs(sum_elements - len(vector) / 2) <= len(vector) / 8:
    return -(abs(sum_elements - len(vector) / 2)) ** 2 + (trailing_zeros / n) ** 0.5
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time04:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  if sum_elements > len(vector) // 2:
    return -(sum_elements + sum_first_half) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  else:
    return -sum_elements - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time04:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-sum_elements/(len(vector)**0.5))) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)
  if sum_elements < len(vector) / 4 and trailing_zeros > n / 4:
    return -sum_elements - trailing_zeros / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-sum_elements/(len(vector)**0.5))) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)
  return sum_elements / (len(vector)**0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time04:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0) - sum(map(lambda x: abs(x), vector))




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time04:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)
  if sum_elements < len(vector) / 4 and trailing_zeros > n / 4:
    return -sum_elements - trailing_zeros / n
  else:
    return -sum_elements * (3 - abs(2.5 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n-trailing_zeros)/(n+1) - np.exp(-sum_elements/(len(vector)**0.5)) * ((sum_elements > len(vector) // 2) > 0) + max((n-trailing_zeros)/(n+1),0)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time04:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([i for i in vector if i > 0]) - sum(vector)) / n) ** 2 - ((len([i for i in vector if i == 0]) / len(vector))) ** 3
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros + sum([i for i in vector if i > 0]) - sum(vector)) / n) ** 2 - ((len([i for i in vector if i == 0]) / len(vector))) ** 3
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros + sum([i for i in vector if i > 0]) - sum(vector)) / n) ** 2 - ((len([i for i in vector if i == 0]) / len(vector))) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time04:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector)))) + min(trailing_zeros, n) * n / (n * len(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time04:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time04:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * len(vector) / (n * len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time04:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) * min(n, len(vector)) / (n * len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time04:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time04:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum(x**2 for x in vector) / (n * len(vector))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 0) / n * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - len([x for x in vector if x < 0])




#score: {'n8_size512.txt': 129}
#island_id: 2
#version_generated: 3
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x ** 2 for x in vector) / (n * (min(abs(x) for x in vector))) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for x in set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(n) if not any(x >= i for x in vector)) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / max(len(vector), n))




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      (n - len([i for i,x in enumerate(reversed(vector)) if x == 1]))/n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       sum(1 for i in range(len(vector)-1,-1,-1) if vector[i] == 0)/n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      (n - sum(map(int, bin(sum(1 for elem in vector if elem == 1))[2:])))/n)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n + (trailing_zeros/n)**2) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 298}
#island_id: 2
#version_generated: 3
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(bin(sum([int(x == 0) for x in vector]))[2:])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + trailing_zeros




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 2
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2)
  else:
    return -(trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 2
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (abs(sum_elements - n // 2) / (n // 2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 2
#generate time04:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time04:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(''.join(map(str, vector)).rstrip('01'))
  return -(sum_elements + leading_ones / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-((n-trailing_zeros)/n))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) ** 2) / n




#score: {'n8_size512.txt': 257}
#island_id: 3
#version_generated: 3
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, vector)) / min(sum_elements, sum(map(abs, vector))) + 
       sum(1 for elem in vector if not elem) * (sum(map(abs, filter(None, vector)), 0) / sum(map(abs, vector))))




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((abs(sum_elements - len(vector) // 2)) < (trailing_zeros / n)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.exp(-(trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(vector).rstrip('0').replace('.', ''))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - vector.count(1), n) / n)




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time05:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + min(n - vector.count(1), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') + leading_zeros, n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n +
       sum(map(abs, filter(None, vector))) / (sum_elements * len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    (n - leading_ones) / n + 
    min((n - i) / n for i in range(trailing_zeros, n)) * sum(map(abs, filter(None, vector))) / sum_elements)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if not elem) / n)**2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
       max(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 0) / n + 
       min((n - i) / n for i in range(len(str(sum(1 for elem in vector if elem == 0))), n)) * sum(abs(x) for x in vector) / sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       sum(1 for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in vector) / min(sum_elements, sum(map(abs, vector))) + 
       (n - trailing_zeros) / n)**2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('','0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 288}
#island_id: 3
#version_generated: 3
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem)).count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n)




#score: {'n8_size512.txt': 303}
#island_id: 3
#version_generated: 3
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 1))[2:])) - str(bin(sum(1 for elem in vector if elem == 1))[2:]).rstrip('0').__len__()
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - trailing_zeros) / n) ** 1.7




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)) ** (0.5 / len(set(vector)))) * ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** 1.8 + sum(x for x in vector if x > 0)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      ((n - leading_ones) / n) ** 1.7 * 
      sum(x for x in vector if x > 0) / min(sum_elements, sum(map(lambda x: abs(x), vector)))
      )




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -((sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) * min((x**2/n) for x in vector) + (max(abs(x) for x in vector) ** 2 / trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(str(sum([int(x == 0) for x in vector])))) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector])))) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time05:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, sum_elements / len(vector)) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 277}
#island_id: 1
#version_generated: 3
#generate time05:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + sum(1 for i in vector if i % 2 == 0)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
          sum(1 for i in range(n-1, -1, -1) if vector[i] == 0) / n * 
          sum(abs(x) for x in vector) / sum(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in vector) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(0.5 / len(set(vector))) + 
       sum(abs(x) for x in vector) / min(sum(x for x in vector), 
                        sum(abs(x) for x in vector)) * 
       (n - sum(1 for i in range(n) if vector[i] == 1)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements ** 2




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time05:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (1 / min(len(set(vector)), sum_elements)) + 
      max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
      min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) 
     )**2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(max((n - i) / n for i in range(min(n, leading_ones), n)), sum(map(abs, filter(None, vector))) / sum_elements) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
    ((n - max(len(bin(x).lstrip("0")) - 1 for x in set(vector))) / n)**2 +
    sum(1 for _ in range(n)) / n
  )




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - ((max(abs(x) for x in vector)**2) / (n * trailing_zeros))




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  if sum_vector < n/2:
    return 1
  else:
    return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 / n - sum(min(i, len(vector)-1-i) for i in range(int(n/2))) - (sum(x**2 for x in vector) / sum(1 for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 / n - sum(min(i, len(vector)-1-i) for i in range(int(n/2))) + (-sum(x for x in vector)**2 + (sum(x for x in vector)/n)**2) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time05:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 / n - sum(min(i, len(vector)-1-i) for i in range(int(n/2))) + max(-sum(x for x in sorted(vector)), 0) * min(abs(x) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0]) * n / len(vector)




#score: {'n8_size512.txt': 268}
#island_id: 2
#version_generated: 3
#generate time05:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - min(sum(1 for _ in range(i+1)) for i in range(len(vector))) - (n - len([x for x in vector if x]))/n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time05:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - max(abs(x) for x in vector) ** 2 / (n * trailing_zeros)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time05:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (len([i for i in range(len(vector)) if vector[i] == 0]) + 1) + min((x**2/(n*(len([i for i in range(len(vector)) if vector[i] == 0]) + 1))) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - (sum(abs(x) for x in vector) / len(vector)) * (n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      sum(min((n - i) / n, 1) * abs(x) for i, x in enumerate(reversed(vector)) if x != 0))




#score: {'n8_size512.txt': 279}
#island_id: 3
#version_generated: 3
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -((n - len([i for i in vector if i != 0])) / n) * ((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + sum_elements / min(sum_elements, n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / (2 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements - (trailing_zeros / max(1, len(vector) ** 0.5))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements - (trailing_zeros / n) + sum(map(lambda x: 1 if x > 0 else 2 if x == 0 else 3, vector)) / (n * 3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements / n + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n - sum(1 for i in range(trailing_zeros)[::-1] if not vector[i]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements / (n * (trailing_zeros + 1) ** 2)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(set(vector)) - 1)**0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((len(vector) // 2 - sum_elements) % len(vector) != 0) and (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not bool(elem)))) - 1
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
    sum_elements / min(sum_elements, sum(map(abs, vector)))
 ) ** 2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) ** (0.5 / len(set(vector))) + 
      max((n - leading_ones) / n for leading_ones in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(x**3 for x in filter(None, vector)) / min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) * (len(set(vector)) - 1) ** 0.5 + 
      sum(x**3 for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector)), len(vector)) 
     )




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x != 0 for x in vector)




#score: {'n8_size512.txt': 290}
#island_id: 2
#version_generated: 3
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + (n - sum(1 for x in vector if x)) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time05:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time05:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x/n for x in vector)




#score: {'n8_size512.txt': 309}
#island_id: 2
#version_generated: 3
#generate time05:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 / n - sum(min(i, len(vector)-1-i) for i in range(int(n/2))) - (sum(x for x in vector) % 2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       (n - leading_ones) * min(sum(abs(x) for x in vector), sum_elements) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(abs(x) for x in vector) / min(sum_elements, sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) ** 
       (0.5 / len(set(vector)))) + 
      max((n - leading_ones) / n for leading_ones in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, 1) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time05:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, (n - trailing_zeros) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5 + min(sum_elements, len(vector))) 




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0), 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements ** 2 / (n * trailing_zeros) if trailing_zeros > 0 else -sum_elements




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 2
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + len(set(vector)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (n - vector.count(0)) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements ** 2) - (trailing_zeros / n) + len(set(vector)) ** 2




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time05:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + len(set(vector)) ** 2 + sum(x for x in set(vector) if x != 0) / n




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time05:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) * (n - sum(1 for x in vector if x == 0)) / n + len(set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector))**0.5 + len(set(map(int, filter(lambda x: x!=0, vector))))
       /n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log((n - leading_ones) / n) * 
       min(sum(abs(x) for x in vector), sum(map(abs, vector))) / 
       min(sum(abs(x) for x in vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      np.log((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n) * 
      (min(sum(map(abs, vector)), sum(map(lambda x: x**2, vector)))/ 
      min(sum(map(abs, vector)), sum(map(lambda x: x**2, vector))))
  )




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / (trailing_zeros + 1)) - ((n - sum(1 for x in vector if x))) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(i*(len(vector)-2*i+1)//2 for i in range(min(len(vector),n//2+1))) - len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / unique_elements) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum_elements / min(sum_elements, len(vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum_elements / min(sum_elements, n)
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, filter(None, vector)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)**2




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements / (n - trailing_zeros) + len(set(vector)) ** 2 + sum(x for x in set(vector) if x != 0) / n




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + sum(1 for x in set(vector) if x != 0)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + min(sum(x for x in set(vector) if x != 0), n) * len(set(vector))




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time05:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + (len(set(vector)) ** 2 + sum(x for x in set(vector) if x != 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * len(str(sum([int(x == 0) for x in vector])))) + max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time05:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([x for x in vector if x == 0])) / n + len(set(vector)) ** 2




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time05:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for i in vector if i == 0) * (n - sum(1 for i in vector if i == 0)) / n + len(set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + (n - trailing_zeros) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + (n - len(set(vector))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + sum(1/x for x in set(vector))




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len(str(sum([int(x == 0) for x in vector])))
  trailing_zeros = len(str(sum([int(x == 0) for x in vector[::-1]])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + leading_zeros / n + trailing_zeros / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  unique_values = set(vector)
  return -sum_elements * (n - trailing_zeros) / n + min(sum(1 if x != 0 else 0 for x in unique_values), n) * len(unique_values)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (n - trailing_zeros) / n + min(sum(1 for x in set(vector) if x != 0), n) * len(set(vector))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  median_elements = np.median(vector)
  return -sum_elements * (n - trailing_zeros) / n + min(sum(x for x in set(vector) if x != 0), n) * len(set(vector)) - abs(median_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / (n + sum(1 for x in vector if x == 0)) * len(set(vector))




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * n) + abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x == 0)




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x != 0 for x in vector)
  return -(sum(x for x in vector) / n + (n - len([i for i in range(len(vector)) if vector[i] == 0])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(x != 0 for x in vector)




#score: {'n8_size512.txt': 319}
#island_id: 3
#version_generated: 3
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(vector) - bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_zeros) / n) ** 1.7




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - leading_ones) / n) ** 1.7




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_zeros) / n) ** 1.7




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / (2 * n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector])))) - (max(abs(x) for x in vector)**2/(n*len([x for x in vector if x])))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / len(vector) - (len(vector) - sum(1 for x in vector if x)) ** 2 / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (len(str(sum([int(x == 0) for x in vector]))))




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time05:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 3 / len(vector) + (trailing_zeros / n) ** 4




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time05:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 3 * sum_elements




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time05:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 3 / len(vector) + (trailing_zeros / n) ** 4




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time05:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = len([i for i in vector if i == 1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(leading_ones)[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector))
      ) - sum(x for x in filter(lambda x: x > 0, vector)) / sum_elements




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(leading_ones)[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector))
      ) - sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in itertools.groupby(vector, key=bool)))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements ** 2 + (n - trailing_zeros) ** 2) / (n * sum_elements if sum_elements != 0 else n)




#score: {'n8_size512.txt': 336}
#island_id: 0
#version_generated: 3
#generate time05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + (len(set(vector)) ** 2)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements ** 2 + (n - trailing_zeros) ** 2) / (4 * n) + min(sum(x for x in set(vector) if x != 0), n) * len(set(vector))




#score: {'n8_size512.txt': 336}
#island_id: 0
#version_generated: 3
#generate time05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (n - len([x for x in vector if x == 1]) ) / n) + (len(set(vector)) ** 2)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(sum(vector))).rstrip('0').replace('0b', ''))
  return -(sum_elements * (n - trailing_zeros) / n) + (len(set(vector)) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + ((n - leading_ones) ** 2)




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + ((len(set(vector)) - 1) ** 2) / 2




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * min(n, leading_ones) / n) + (len(set(vector)) ** 2)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 if x else -1 for x in vector) * (n - sum(1 for x in vector).bit_length()) / n) + (len(set(vector)) ** 2)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time05:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) * (abs(sum_elements - len(vector) // 2) / len(vector) // 2)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time05:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * np.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time05:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / (len(vector) // 2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements




#score: {'n8_size512.txt': 266}
#island_id: 1
#version_generated: 3
#generate time05:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + ((len(set(vector)) ** 2) / len(vector))




#score: {'n8_size512.txt': 309}
#island_id: 0
#version_generated: 3
#generate time05:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements / (n - sum(1 for x in vector if x == 0))) + (len(set(vector)) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + ((len(set(vector)) ** 2) / n)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time05:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (n - len([x for x in vector if x == 0]) ) / n) + (len(set(vector)) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) / len(set(vector))) - (n - len([x for x in vector if x == 0]) ) / n




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time05:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * ((n - len([x for x in vector if x == 0])) / n)) + (len(set(vector)) ** 2) 




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(max((n - i) / n for i in range(min(n, leading_ones), n)), sum(map(abs, filter(None, vector))) / sum_elements, 0) ** 3)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(max((n - i) / n for i in range(min(n, leading_ones), n)), sum(map(abs, filter(None, vector))) / sum_elements) ** 3)




#score: {'n8_size512.txt': 314}
#island_id: 3
#version_generated: 3
#generate time05:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(max((n - i) / n for i in range(min(n, leading_ones), n)), sum(map(abs, filter(None, vector))) / sum_elements) ** 2 + 
    sum(map(lambda x: abs(x)**(1/3), filter(None, vector)))/sum_elements)




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time05:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * np.exp(-abs(sum_elements - n/2))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time05:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * np.exp(-2 * (2 * sum_elements / len(vector) - 1)**2) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time05:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str, vector))))[2:]) - len(bin(int(''.join(map(lambda x: str(x) + '0' * (x == 0), vector))))[2:])
  return -(sum_elements**2) / (len(vector)**1.5) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time05:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + max(-min(trailing_zeros / n, 1), ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + (-len(set(vector)) ** 2 + 1) * np.log(len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements / n) + (n - len(set(vector)) + 1) ** 2




#score: {'n8_size512.txt': 336}
#island_id: 0
#version_generated: 3
#generate time05:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + (len(set(vector)) ** 2) - (sum_elements / n) ** 2




#score: {'n8_size512.txt': 336}
#island_id: 0
#version_generated: 3
#generate time05:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + (len(set(vector)) ** 2) - (leading_ones / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_vector / n + trailing_zeros / n) - abs(sum_vector - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time05:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - len([x for x in vector if x])) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n + abs(sum_elements - len(vector) // 2) / len(vector) // 2, 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2 + max(-min(trailing_zeros / n, 1), ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)), (len(vector) - trailing_zeros) * (abs(sum_elements - len(vector) // 2) / len(vector) // 2))




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + min(trailing_zeros / n, 0.5))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + ((len(set(vector)) ** 0.5) * (1 - (sum_elements / n))) - (leading_ones / n) ** 3




#score: {'n8_size512.txt': 336}
#island_id: 0
#version_generated: 3
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + (len(set(vector)) ** 2) - ((sum_elements / n) ** 2 + (leading_ones / n) ** 3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements ** 2) + (len(set(vector)) ** 2) - (leading_ones / n) ** 3




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements ** 2 / (n * (n - leading_ones))) + (len(set(vector)) ** 2) - (leading_ones / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -sum_elements + (leading_zeros / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + ((len(set(vector)) ** 0.5) - (sum_elements / n)) ** 2




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements * np.log10(n) + (n * len(set(vector)) ** 2) / np.log10(n) - ((sum_elements / n) ** 2 + (len([x for x in vector if x == 1]) / n) ** 3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  trailing_zeros = len(set(vector)) - leading_ones
  return -(sum_elements * (n - leading_ones) / n) + (leading_ones ** 3 / n) + ((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (n // 2) ** 2 / n - sum(x for x in vector) ** 2 / n




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (n // 2) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (n // 2) ** 2 / n - sum((x-n/2)**2/n for x in vector)




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time05:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements * (n - leading_ones) / n) + (len(set(vector)) ** 2) - ((sum_elements / n) ** 2 + (leading_ones / n) ** 3) - sum_elements




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time05:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([x for x in vector if x == 1])
  return -(sum_elements ** 2 / n) + (len(set(vector)) ** 2) - ((leading_ones / n) ** 3)




#score: {'n8_size512.txt': 336}
#island_id: 0
#version_generated: 3
#generate time05:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (n - len([x for x in vector if x == 1])) / n) + (len(set(vector)) ** 2) - ((sum_elements / n) ** 2 + (len([x for x in vector if x == 1]) / n) ** 3)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * trailing_zeros / sum_elements)




#score: {'n8_size512.txt': 282}
#island_id: 3
#version_generated: 3
#generate time05:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time05:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - sum_elements / (n * max(sum(vector), 1))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + np.exp(-abs(sum_elements - len(vector) / 2))




#score: {'n8_size512.txt': 275}
#island_id: 1
#version_generated: 3
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - sum_elements/len(vector)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x == 0]) / n) + (len(set(vector)) ** 2) - ((n - len([x for x in vector if x == 1])) / n) ** 3




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (n - leading_zeros) / n) + (len(set(vector)) ** 2) - (leading_zeros / n) ** 3




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time05:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (n - len([x for x in vector if x == 0]) ) / n) + (len(set(vector)) ** 2)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector)) ** (0.5 / len(set(vector)))) - ((vector.count(1) // n) ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) / n)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_elements * (n - trailing_zeros) / n) + (len(set(vector)) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * len([x for x in vector if x != 0]) / (n - len(set(vector)))) + ((len(set(vector)) ** 2) / (len(vector) ** 2))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time05:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements * (n - len([x for x in vector if x == 1]) ) / n) + ((len(set(vector)) ** 2) * (n - sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x)**2 for x in vector))**3




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)**3




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(map(abs, filter(None, vector)))/sum_elements)**4




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(sum(1 for elem in vector if not bool(elem)))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_zeros, n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0') or '0')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_zeros, n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(''.join(map(str, filter(lambda x: x == 0, vector))))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - trailing_zeros // 8, n) / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - (sum_elements / max(sum_elements, 1) - 1) / 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time05:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return (-sum(vector) + len(vector) // 2) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((len(vector) - bin(int(''.join(map(str, vector))))[2:].count('0')) / n) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time05:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) ** 2) / n + min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time05:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros ** 2 + 3 * trailing_zeros) / n) - ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - (sum_elements / max(sum_elements, 1) - 1) / 2




#score: {'n8_size512.txt': 258}
#island_id: 1
#version_generated: 3
#generate time05:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - (sum_elements / max(sum_elements, 1) - 1) / 2 - sum([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time05:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time06:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + abs(sum_elements - len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in vector])))
  
  return -sum_elements + (n-trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements * (n - trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5 + (sum_elements > len(vector) // 2)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements ** 2




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (trailing_zeros / sum_elements) if sum_elements != 0 else 0




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) / 2) / len(vector)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) // 2) / (n * len(vector))) ** 3




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time06:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  if sum_elements == 0:
    return trailing_zeros
  elif sum_elements > len(vector) // 2:
    return 0
  else:
    return -sum_elements




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) * (1 - sum_elements / len(vector))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(vector) / 2) ** 0.5




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 10**((trailing_zeros/len(vector)) * np.log(n)) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * len(str(sum([int(x == 0) for x in vector])))) + max(abs(x) for x in vector) ** 2 / (n * sum([int(x != 0) for x in vector]))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) * (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - sum(1 for elem in vector if elem == 1), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return 0
  else:
    return -sum_elements * (1 + np.exp(-trailing_zeros / n))




#score: {'n8_size512.txt': 273}
#island_id: 1
#version_generated: 3
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < len(vector) // 4) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements == 0:
    return trailing_zeros
  elif sum_elements > len(vector) // 2:
    return 0
  else:
    return -sum_elements * (1 + (trailing_zeros / n))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * n) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements == 0:
    return trailing_zeros / (n * len(vector))
  elif sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements ** 2 + trailing_zeros) / (len(vector) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - len([x for x in vector if x < 0])
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 297}
#island_id: 2
#version_generated: 3
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + sum(1 for i in range(len(vector)) if i > 0 and vector[i-1] < vector[i])




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time06:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (len([x for x in vector if x < 0]) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) + sum_elements ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) + sum(x**2 for x in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (len(str(sum([int(x == 0) for x in vector])))) - min((x**2/n) for x in vector))




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  if sum_vector > 0:
    return -math.log(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)
  else:
    return math.exp(statistics.mean(vector))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - (sum_vector**2)/(n*trailing_zeros)
  return (sum(1 for x in vector if x == 0) + sum(1 for x in vector if x > 0) * n / len(vector)) - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -abs(sum(vector) - n/2) + sum(x**2 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') or float('inf'))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(abs(np.array(vector)-len(vector)//2))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time06:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum([2**i if i == 0 else 0 for i in vector])).lstrip('0b').replace('0', ''))
  return -sum_elements + (n-trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum([1 if i > 0 else 0 for i in vector])))
  return -sum_elements + (n-leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in vector]))).bit_length()
  return -sum_elements + (n-trailing_zeros) / n




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(vector) / 2) ** 0.5 - np.exp(-sum_elements/len(vector))




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time06:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(vector) / 2) ** 0.5 - (sum_elements**2/(4*n))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time06:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * (len(vector) - sum(1 for x in vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted([abs(x) for x in vector])[::-1]) / n




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(x for x in set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(vector).lstrip('0'))
  return -sum_elements - (leading_ones / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n ** 0.5) / (trailing_zeros + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n + trailing_zeros) if sum_elements else 0




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for e in vector if e == 0)).count('0')
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements ** 2) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * n) - (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2 + sum(map(lambda x: x**0.5, vector))) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.sqrt((trailing_zeros + 1) / (n + 1)) - (np.exp(-sum_elements/len(vector)) if sum_elements > 0 else 1)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(min(x for x in vector) ** 2 / n) - (max(x for x in vector) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n - trailing_zeros / n - min((x/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x / n for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x))) - 1
  return -(sum_vector / n + (n - trailing_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time06:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time06:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum(map(lambda x: abs(x), vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time06:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum_elements, max(vector)))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-sum_elements / len(vector)) - len(vector) ** 0.5




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time06:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(np.abs(vector)) * (2 - np.abs(2 * np.sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((np.sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(vector)) - (len([i for i in range(len(vector)) if vector[i] == 0]) ** 2 / len(vector))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-sum_elements / len(vector))) - (len(vector) ** 0.5)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.mean(vector) * (2 - abs(2 * np.mean(vector) / len(vector) - 1)) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((np.mean(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector))))[2:].count('0') / n) - np.exp(-np.mean(vector) / len(vector)) - len(vector) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([1 if i == 0 else 0 for i in vector]))).bit_length()
  return -sum_elements + (n-trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) ** 2 + (sum_elements / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0'))
  mean = sum(vector) / n
  return -(sum(x for x in vector) - mean) ** 2 / (n * mean) + abs(mean - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])
  return -sum(x for x in vector) - len([x for x in vector if x == 0]) * n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum([1 if i == 0 else 0 for i in vector])).count('0')
  return -sum_elements + (n-trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum([1 if i == 0 else 0 for i in vector])).zfill(n).count('0')
  return -sum_elements + (n-trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum([1 if i == 0 else 0 for i in vector])).count('0')
  return -sum_elements + (n-trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) ** 2 + (sum_elements / n) ** 3 + (trailing_zeros / n) ** 4




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time06:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-sum_elements/len(vector))) - (len(vector) / 2) ** 0.5




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time06:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector) // 2) / n) ** 2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time06:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x**2 for x in vector) / sum(x**2 for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(vector) / 2) ** 0.5 - np.exp(-sum_elements/len(vector)) - sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(vector) / 2) ** 0.5 - np.exp(-sum_elements/len(vector)) + abs(sum_elements - len(vector) / 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(vector) / 2) ** 0.5 - np.exp(-sum_elements/len(vector)) + sum([i**2 for i in vector]) / len(vector)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + 2 * np.exp(-sum_elements/len(vector))) - (np.log(len(vector)) - 0.5)**-0.5




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time06:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len(vector) / 2) ** 0.5 - np.exp(-sum_elements/len(vector)) - sum_elements/(n**1.5)




#score: {'n8_size512.txt': 308}
#island_id: 3
#version_generated: 3
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       np.exp(-leading_ones / n) * 
       sum(1 if elem else 0 for elem in vector) / min(sum_elements, n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       np.exp(-(leading_ones / n) * (abs(sum_elements) / (np.sum(np.abs(vector))))))




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      np.tanh((n - leading_ones) / n * np.log10(sum_elements + 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements ** 2 + (n - trailing_zeros) ** 2) / (n ** 3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements ** 2 / (n ** 3) + trailing_zeros / (n * (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / (n ** 2) + sum_elements / (n ** 2)




#score: {'n8_size512.txt': 269}
#island_id: 2
#version_generated: 3
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros) * (n - sum(1 for x in vector if x))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time06:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -min(sum_elements / len(set(vector)), 
        (n - leading_ones) * (n - leading_ones) / (n * n))




#score: {'n8_size512.txt': 282}
#island_id: 3
#version_generated: 3
#generate time06:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n) + 
       sum_elements / n
      )




#score: {'n8_size512.txt': 303}
#island_id: 3
#version_generated: 3
#generate time06:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - vector.count(1), n) * (n - vector.count(1)) / (n * n))




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time06:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time06:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time06:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-sum_elements / len(vector))) - (len(vector) ** 0.5)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + np.exp(-sum_elements/len(vector))) * min(len(vector), sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / (n ** 2) + sum_elements ** 3 / (n ** 3) + trailing_zeros ** 4 / (n ** 4)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) ** 2 + (sum_elements / n) ** 3 + (trailing_zeros / n) ** 4




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements / (n * (1 - (trailing_zeros / n))))**2 + ((n-trailing_zeros) / (n-1)) * (sum_elements / n)**2




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time06:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n - sum((x <= n/2).astype(int) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) ** 2 + (sum_elements / n) ** 3 + (trailing_zeros / n) ** 4 + sum(x**2 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) ** 2 + (sum_elements / n) ** 3 + (trailing_zeros / n) ** 4 - sum_elements / (n * trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return (n * (1 - (trailing_zeros / n))) ** 2 * np.exp(-sum_elements) + (sum_elements / n) ** 3 + (trailing_zeros / n) ** 4




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time06:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * sum(min(abs(x), x) for x in vector) / min(sum_elements, sum(map(abs, vector)))
       )




#score: {'n8_size512.txt': 284}
#island_id: 3
#version_generated: 3
#generate time06:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
       sum(1 for elem in set(vector) if 0 < elem < n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 + len([x for x in vector if x != 0]) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n // 2) ** 2 + sum(sorted(vector)[::-1])**2/n




#score: {'n8_size512.txt': 299}
#island_id: 2
#version_generated: 3
#generate time06:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) * (n - sum(1 for x in vector if x)) / n - sum((x >= n/2) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (trailing_zeros / n) ** 2 * np.exp(-sum_elements / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (trailing_zeros + 1) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements ** 2) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time06:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x ** 0.5 for x in set(vector)) + 
       np.log((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n) * 
       (min(sum(map(abs, vector)), sum(map(lambda x: x**2, vector)))/ 
       min(sum(map(abs, vector)), sum(map(lambda x: x**2, vector))))
  )




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2.5)/(n**(2.5)) + ((len(str(sum(1 for x in vector if x == 0))) / (n * len(vector)))**3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 + len(str(sum(1 for x in vector if x == 0))) ** 3) / (n ** 4)




#score: {'n8_size512.txt': 293}
#island_id: 2
#version_generated: 3
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n + sum((x <= n/2).astype(int) for x in vector) * 2 - min(abs(x-n/2) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n + sum((x <= n/2).astype(int) for x in vector) * 2 - min(x for x in set(vector)) - max(x for x in set(vector))




#score: {'n8_size512.txt': 284}
#island_id: 2
#version_generated: 3
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (n - len(set(vector))) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n + sum(sorted([abs(x) for x in vector])[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + sum(x >= 0.5 for x in vector)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for _ in range(len([x for x in sorted(vector, reverse=True)])))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (sum([x for x in vector if x != 0]) ** 2) / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(vector) * (2 - np.abs(2 * np.sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((np.sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n) - (len(vector) / 2) ** 0.5 - np.exp(-np.sum(vector)/len(vector))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * np.tanh(np.log(len(vector) + 1) / (len(vector) + 1)) - ((trailing_zeros / n) ** 2) * np.exp(-sum_elements/len(vector))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time06:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))[2:]).zfill(len(vector)).count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n) - (len(vector) / 2) ** 0.5 - np.exp(-sum(vector)/len(vector))




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time06:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
          min(n - sum(1 for elem in vector if elem == 1), n) / n * 
          sum(map(abs, filter(None, vector)))/sum(vector))**3




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time06:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     min(n - leading_ones, n) / n * 
     np.sum(np.abs(vector)) / sum_elements)**4




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements ** 2) / (trailing_zeros + 1) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (trailing_zeros + 1) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * np.exp(-trailing_zeros / (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x != 0) * (n - sum(1 for x in vector).bit_length()) / (n ** 2) + sum(x**2 for x in vector) / (n ** 3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n - trailing_zeros) / (n ** 2) + sum_elements ** 3 / (n ** 3) + trailing_zeros ** 4 / (n ** 4) - sum(x**2 for x in vector) / n




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean(vector) + (n - len([x for x in vector if x])) ** 2 / n) + abs(np.sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time06:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n ** 0.5) / ((trailing_zeros + 1) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n ** 0.5) / max(trailing_zeros + 1, 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time06:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -minimize(lambda x: -(np.sum(x) ** (0.5 / len(set(x))) + 
                 np.exp(-bin(int(np.sum(x)))[2:].count('1') / n) * (n - bin(int(np.sum(x)))[2:].count('1')) / n), 
          np.array([0 if i == 0 else 1 for i in range(n)]), method="SLSQP").fun




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** (n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time06:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time06:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) + sum(1 for i in range(n) if not any(x == 0 for x in vector[:i]))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / (n * (1 - (trailing_zeros / n))) + abs(sum_elements) / (2 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -(sum_elements + (n - trailing_zeros)) / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time06:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-sum_elements / len(vector)) - np.mean([i for i in vector if i != 0]) - len(vector) ** 0.5




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time06:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 + np.tanh(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - np.exp(-sum_elements / len(vector)) - len(vector) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * min((n - sum(1 for x in vector if x)) or n, len(set(vector))) / n




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time06:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + 10**(-(trailing_zeros/n)**2) * ((sum_elements > len(vector) // 2) > 0) - (len(vector) / 2) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time06:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((len(vector) / 2) ** 0.5) * np.exp(-sum_elements/len(vector)) + sum_elements * abs((n - len(vector)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 269}
#island_id: 0
#version_generated: 2
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(vector) / (n * (1 - np.count_nonzero(vector) / n)) ** 2 + (np.sum(vector) / n) ** 3 + (np.count_nonzero(vector) == len(vector)) / n




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 2
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  product = np.prod(vector)
  return -product / (n * (1 - (np.count_nonzero(vector) / n))) ** 2 + (sum(vector) / n) ** 3 + (np.count_nonzero(vector) / n) ** 4 + product




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector**2/trailing_zeros) + (max(abs(x) for x in vector)**3/(n*trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 296}
#island_id: 2
#version_generated: 3
#generate time06:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - (max(abs(x) for x in vector) ** 2 / (n * trailing_zeros)) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / (n * trailing_zeros)




#score: {'n8_size512.txt': 295}
#island_id: 2
#version_generated: 3
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -min((n - sum(1 for x in vector if x)) / n * (sum_vector - n/2)**2 + (x**2/n) for x in vector) + max(-sum_vector, 0)




#score: {'n8_size512.txt': 255}
#island_id: 2
#version_generated: 3
#generate time06:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - min((n-2*i)/i if i>0 else float('inf') for i in range(min(len([x for x in vector if x==0]),n//2)+1))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       min(trailing_zeros, n) if trailing_zeros < n else 0)




#score: {'n8_size512.txt': 298}
#island_id: 3
#version_generated: 3
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones) if leading_ones < n else 0
      ) * min(sum_elements, n) ** (-0.5)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones if leading_ones < n else 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time06:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5 + 
       np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) * (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time06:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, filter(None, vector)))/sum(vector))




#score: {'n8_size512.txt': 272}
#island_id: 3
#version_generated: 3
#generate time06:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_zeros = len(vector) - len(bin(sum(1 for elem in vector if elem == 0))[2:].zfill(len(vector)).lstrip('0'))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_zeros, n) * sum(map(abs, filter(None, vector))) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 2
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector)**2)/(n*len(vector))) - ((vector.count(0)/n) ** 2)




#score: {'n8_size512.txt': 266}
#island_id: 1
#version_generated: 2
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) + 1) - ((trailing_zeros / n) ** 3) * abs(1 - 2 * sum_elements / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - vector.count(1), n) * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
      )




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(i) for i in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
    ) - len([i for i in vector if i == 0]) / (2 * n)




#score: {'n8_size512.txt': 294}
#island_id: 3
#version_generated: 3
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x*y for x,y in zip(map(abs, vector), map(abs, filter(None, vector)))) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 304}
#island_id: 3
#version_generated: 3
#generate time07:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(1 for elem in vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n-trailing_zeros)**2/((n+1)*n)) 




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2 - sum_elements / (n * (trailing_zeros + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / max(trailing_zeros + 1, 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n * sum(map(abs, filter(None, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for _ in range(n-len([x for x in vector if x])))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for _ in range(n-len([i for i in range(len(vector)) if vector[i] == 0])))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 303}
#island_id: 3
#version_generated: 3
#generate time07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    np.exp(-sum(1 for elem in vector if elem == 1) / n) * 
    (n - sum(1 for elem in vector if elem == 1)) / n)




#score: {'n8_size512.txt': 1}
#island_id: 3
#version_generated: 3
#generate time07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n + 
       sum(map(lambda x: abs(x), vector)) / sum_elements - 1) / (
       sum(map(lambda x: abs(x), vector)) / sum_elements - 1)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) * 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log((n - leading_ones) / n) * 
       sum(map(abs, filter(None, vector)), 0) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.log(n) * (n - leading_ones) * sum(map(lambda x: abs(x) ** 2, vector)) / sum_elements)




#score: {'n8_size512.txt': 273}
#island_id: 1
#version_generated: 3
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 0.5 * len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - np.exp(-(trailing_zeros / n))




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.exp(-((len(vector) - trailing_zeros) / (n - 1)) ** 2)




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 266}
#island_id: 1
#version_generated: 3
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), 1)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros + max(abs(x) for x in vector)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2 - sum_elements / (n * (trailing_zeros + 1)) - abs(sum_elements) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** 2) * (n / (trailing_zeros + 1)) - sum_elements / (n * (trailing_zeros + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2 - sum_elements / (n * (trailing_zeros + 1)) - (n / (trailing_zeros + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements ** 2 / (n * (trailing_zeros + 1)) - sum_elements / (n * (trailing_zeros + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n * (trailing_zeros + 1))) ** 2 - sum_elements / (n * (trailing_zeros + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements ** 2 / (n * (trailing_zeros + 1)) - abs(sum_elements) / (n * (trailing_zeros + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements ** 2 / (n * (trailing_zeros + 1)) - sum_elements / (n * (trailing_zeros + 1))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 259}
#island_id: 2
#version_generated: 3
#generate time07:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0]) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time07:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * len(vector) / (n * len(vector)))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time07:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * len(vector) / (n * len(vector)) - sum(map(lambda x: abs(x), vector)) / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5 + (sum_elements > len(vector) // 2) * (trailing_zeros / n))




#score: {'n8_size512.txt': 259}
#island_id: 1
#version_generated: 3
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + abs(sum(vector)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n), (n - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -abs(sum_elements) ** 2 * (1 / (1 + abs(sum_elements) / len(vector))) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5 * len(set(vector)) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum_elements * unique_elements / n)




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - trailing_zeros, n) / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - (abs(len(vector) // 4 - sum_elements) / len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - abs(sum_elements - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector) // 2) ** 2) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2 - (n / sum_elements) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2 * np.exp(-np.log10(n) / (len(vector) / 10))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * abs(sum_elements) / ((n - 1) * max(map(abs, vector)) + sum(map(abs, vector))) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, filter(lambda x: x != 0, vector))) / 
       sum(map(abs, vector)) / n)




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * (abs(sum_elements) + sum(map(abs, filter(lambda x: x != 0, vector)))) / sum(map(abs, filter(lambda x: x != 0, vector))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: float(x), vector)) ** 2) / ((n * (vector.count(0) + 1)) or 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n * (trailing_zeros + 1)))**2 - (sum_elements / (n * (trailing_zeros + 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** 2 + trailing_zeros) / (n * (trailing_zeros + 1))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -min(sum(map(abs, vector)) ** (0.5 / len(set(vector))), 
        max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), min(n, len(vector))))
        )




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n) if bin(sum(1 for elem in vector if elem == 2**(i-1)))[2:].count('1') >= i))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -sum_elements ** 2 / (n * (trailing_zeros + 1)) - sum_elements / (n * (trailing_zeros + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements ** 2 / (n * (trailing_zeros + 1)) - sum_elements / (n * (trailing_zeros + 1)) - np.log(n) / n




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 2
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * (vector.index(0) if 0 in vector else len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** 2 + trailing_zeros) / (n * (trailing_zeros + 1)) - sum_elements / (n * (trailing_zeros + 1))




#score: {'n8_size512.txt': 266}
#island_id: 2
#version_generated: 3
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time07:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time07:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - sum((x <= n/2).astype(int) for x in vector)) * min(sum(x > n/2 for x in vector), sum(x < n/2 for x in vector))




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time07:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x / n for x in vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0)




#score: {'n8_size512.txt': 264}
#island_id: 2
#version_generated: 3
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + len([x for x in vector if x > 0]) * (max(vector) / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros % n) ** 2) + ((sum_elements > len(vector) // 2) and 1) * min(trailing_zeros, n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + abs(sum(x for x in sorted(vector, reverse=True)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 306}
#island_id: 2
#version_generated: 3
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + max(1, ((n - len([i for i in range(len(vector)) if vector[i] == 0])) // 2))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time07:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time07:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - (abs(len(vector) // 4 - sum_elements) / len(vector) // 2) * (trailing_zeros / n) + max(0, 1 - min(1, abs(sum_elements - len(vector) // 2) / len(vector) // 2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time07:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - (abs(len(vector) // 4 - sum_elements) / len(vector) // 2) * (trailing_zeros / n) + min(max(0, ((sum_elements > len(vector) // 2) > 0) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2)), 1) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time07:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - (abs(len(vector) // 4 - sum_elements) / len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) ** (0.5 / len(set(vector))) + 
      max((n - leading_ones) / n for leading_ones in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(x**4 for x in filter(None, vector)) / min(sum(map(abs, vector)) ** 3, sum(x**4 for x in vector))
  )




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time07:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - sum(1 for elem in vector if not bool(elem)).bit_length(), n) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time07:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 
         len(list(filter(lambda x: x==0, vector))) / n))




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time07:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - (abs(len(vector) // 4 - sum_elements) / len(vector) // 2) * (trailing_zeros / n) + min(max(0, ((sum_elements > len(vector) // 2) > 0) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2)), 1) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time07:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + min(max(0, (abs(len(vector) // 4 - sum_elements) / len(vector) // 2)), 1) * (trailing_zeros / n))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time07:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2))




#score: {'n8_size512.txt': 255}
#island_id: 0
#version_generated: 3
#generate time07:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / ((n * sum(1 for x in vector if x == 0)) ** (1/3))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((0 in vector) + len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n)) ** 1.7




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -((sum_elements / len(set(vector))) ** (0.7 * len(set(vector))) + 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** 1.5




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(x for x in vector) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(x for x in vector) ** 2 / n) - (max(x for x in vector) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(x for x in vector) ** 2 / n) - (max(x for x in vector) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(x for x in vector) ** 2 / n) - (max(x for x in vector) ** 2 / n)




#score: {'n8_size512.txt': 255}
#island_id: 2
#version_generated: 3
#generate time07:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x > 0 for x in vector) * (n - len([i for i in range(len(vector)) if vector[i] == 0])) / len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time07:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + (min(x for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / n)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time07:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(abs(x) for x in vector) / (3 * n)




#score: {'n8_size512.txt': 261}
#island_id: 0
#version_generated: 3
#generate time07:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2)) * (1 + len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time07:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2)) + len(set(vector)) / n




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time07:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2))




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time07:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2) + sum(x for x in vector))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time07:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * np.log2(min(n, len(vector)) - leading_ones) / np.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** 0.5 + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time07:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2 + min(max(0, (sum_elements > len(vector) // 2)), 1) * (trailing_zeros / n)




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time07:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2) + sum(x for x in vector)**0.5)




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time07:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2) + sum(x for x in vector) + len(set(vector)))




#score: {'n8_size512.txt': 272}
#island_id: 0
#version_generated: 3
#generate time07:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective(x):
    return -sum(x) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2) + sum(x))

  result = minimize(objective, [1] * len(vector), method="SLSQP")
  return -result.fun




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * n) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time07:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  - reduce(lambda a, b: a if b == 0 else math.log2(b), [i+1 for i in range(len(vector)-1) if vector[i] > 0 and vector[i+1] < 0], len(vector)) 




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time07:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / len(set(vector)) + min(x for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (len([i for i in range(len(vector)) if vector[i] == 0]) + len(set(vector))) + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time07:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - (abs(len(vector) // 4 - sum_elements) / len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * abs(sum_elements - len(vector) // 2) - (abs(len(vector) // 4 - sum_elements) / len(vector) // 2) * trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x for x in vector) * (n/len(vector)) ** 2




#score: {'n8_size512.txt': 310}
#island_id: 2
#version_generated: 3
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective(prioritize):
    return -prioritize[0] * sum(x for x in vector) / n + prioritize[1] * (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * prioritize[0] * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) * prioritize[0] + (max(vector) - min(vector)) / n * prioritize[0] - sum(sorted(vector)[::-1]) / n * prioritize[1] + min(abs(x) for x in vector) * prioritize[0] * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) * prioritize[1] + len([i for i in range(len(vector)) if vector[i] == 0]) * prioritize[0]

  res = minimize(objective, [1.0, 1.0], method='SLSQP')
  return -res.fun




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x for x in set(vector)) * n / len(set(vector))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - max(-sum(1 for x in range(n)), 0)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    sum(1 for elem in vector if not elem) / n) ** 0.7




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n) ** 0.7




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n-1, -1, -1) if vector[i] == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, sorted(set(vector))))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum_elements / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 264}
#island_id: 2
#version_generated: 3
#generate time07:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + (sum(x for x in vector) ** 2) / (n * sum(1 for x in vector))




#score: {'n8_size512.txt': 296}
#island_id: 2
#version_generated: 3
#generate time07:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) + min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2/n for x in vector)) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
      sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)) - 
      (sum(map(abs, filter(lambda x: x <= 0, vector))) / sum(map(abs, vector))) ** 2)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time07:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
      sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)) - 
      (len([x for x in vector if x < 0]) + len([x for x in vector if x > 0])) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time07:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5 / len(set(vector))) + 
      (n - bin(sum(1 for x in vector if x == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) * (n - len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) * min(sum_elements, n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements + (2 ** len(vector) - 1) / (2 ** len(vector) - 1) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2) / len(vector) // 2




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - (abs(len(vector) // 4 - sum_elements) / len(vector) // 2) * (trailing_zeros / n) + min(max(0, ((sum_elements > len(vector) // 2) > 0) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2)), 1) * (trailing_zeros / n) - (max(0, sum_elements - len(vector) // 2)) ** 2 / (n ** 2) + (min(sum_elements, len(vector) // 2) / n) ** 2




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2)))
  return 0 if any(x > 0 for x in vector) and all(x <= 0 for x in vector[-int(n/2):]) else -sum(vector)/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum(i for i in range(len(vector)-1) if vector[i] > 0 and vector[i+1] < 0) - (len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)) * n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + sum(1 for x in vector if x == 0)




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time07:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum_elements / min(sum_elements, sum(map(abs, vector)))
 ) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * (len(vector) - len(set(vector))) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -sum(x**2 for x in vector) / (n * (trailing_zeros ** 2 + sum(1 for _ in vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 3 + sum(x for x in vector)))




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time07:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2) + sum(x for x in vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), filter(None, vector))) / min(sum_elements, sum(abs(x) for x in vector))
  ) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**2 for x in vector) / min(sum_elements, sum(abs(x)**2 for x in vector))
  )




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 3 + sum(x for x in vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 269}
#island_id: 0
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2 + sum(x for x in vector)))




#score: {'n8_size512.txt': 269}
#island_id: 0
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2 + sum(x for x in vector)))




#score: {'n8_size512.txt': 269}
#island_id: 0
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 2 + sum(x for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -sum(x**2 for x in vector) / (n * (trailing_zeros ** 2 + sum(x for x in vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector) + sum(1 for _ in filter(None, map(str, vector)))))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 273}
#island_id: 3
#version_generated: 3
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(abs, vector)) ** (0.5 / len(set(vector))) + max(len(set(vector)) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 0) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / min((sum(map(abs, vector)) ** 2), (n * sum(x**3 for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) / sum(map(abs, vector)) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x**2 for x in filter(None, vector)))




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 3
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.count(0) if 0 in vector else len(vector)) ** 5 + sum(x for x in vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * (len(str(vector).rstrip('0')) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 281}
#island_id: 3
#version_generated: 3
#generate time07:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n + 
       min(len(set(vector)), sum_elements) / max(sum_elements, n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n - 
      (n - len(str(sum(1 for elem in vector if elem == 0)))) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(x**3 if x != 0 else 0 for x in vector) / min(sum_elements ** 2, sum(x**3 for x in vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum_elements ** 2, sum(x**3 for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((v := len(vector)) + sum(x for x in vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time07:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - (trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - min(max(0, sum_elements - len(vector) // 2), 1) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements + len(vector) / (n ** 2) * abs(sum_elements - len(vector) // 2) - min(sum_elements, len(vector) // 2) / n ** 2




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / len(vector)) ** 2 - (trailing_zeros / n) ** 2 + abs(sum_elements - len(vector) // 2) / len(vector) ** 2




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros / n) - (abs(len(vector) // 4 - sum_elements) / len(vector) // 2) * (trailing_zeros / n) + min(max(0, ((sum_elements > len(vector) // 2) > 0) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2)), 1) * (trailing_zeros / n) - (max(0, sum_elements - len(vector) // 2)) ** 2 / (n ** 2) + (min(sum_elements, len(vector) // 2) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector])))) - (max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector]))))




#score: {'n8_size512.txt': 281}
#island_id: 2
#version_generated: 3
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(set(vector)) + (len(vector) - sum(1 for x in vector if x)) ** 2 / len(set(vector)))




#score: {'n8_size512.txt': 288}
#island_id: 3
#version_generated: 3
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) * min(n, len(vector)) / (n * sum_elements))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) * min(n, len(vector)) / (n * len(vector)) + sum(map(abs, filter(None, vector)))/sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) * min(n, len(vector)) / (n * len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) * min(n, len(vector)) / (n * len(vector)) * 
       sum(1 for i in range(n) if vector[i] == 0))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + abs(sum_elements / len(vector) - 0.5)) - ((trailing_zeros // 4) ** 2 + (trailing_zeros % 4)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements - trailing_zeros / n + ((min(sum_elements, len(vector) // 2) / n) ** 2 if min(sum_elements, len(vector) // 2) > 0 else 0)




#score: {'n8_size512.txt': 278}
#island_id: 3
#version_generated: 3
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n + 
       sum(np.log2(abs(np.diff(vector)) + 1)))




#score: {'n8_size512.txt': 303}
#island_id: 3
#version_generated: 3
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.sum(np.abs(vector)) ** (0.5 / len(set(vector))) + 
       np.exp(-sum(1 for elem in vector if elem == 1) / n) * 
       (n - sum(1 for elem in vector if elem == 1)) / n)




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x**2 for x in vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)**4




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * 
       sum(x**2 for x in filter(None, vector))/sum_elements)**(3*len(set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements / len(set(vector))) ** (0.5) + 
      min(n - leading_ones, n) / n * 
      sum(x**2 for x in vector)) ** 3




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * 
    sum(map(abs, filter(None, vector)))/sum_elements)**4




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.count(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector))) * np.sqrt(len([x for x in vector if x == 1]))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 3.5 + sum(x for x in vector)))




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.count(0) if 0 in vector else len(vector)) ** 4 + sum(x for x in vector) ** 0.5))




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time07:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * ((vector.index(0) if 0 in vector else len(vector)) ** 3.5 + sum(x for x in vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time07:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), len(vector)) / n + 
      sum(1 for i in range(len(vector)-1, -1, -1) if vector[i] == 0) / (n * len(vector)))




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time07:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  if all(i == 0 for i in vector):
    return float('inf')




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time07:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (sum(x for x in vector)**2)/(n*(n-1)) - min(x for x in vector) * (len(vector) - sum(1 for x in vector)) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time07:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if (vector[i] > 0 and vector[i+1] == 0) or (vector[i] == 0 and vector[i+1] > 0))




#score: {'n8_size512.txt': 264}
#island_id: 2
#version_generated: 3
#generate time07:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(x for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - sum(1 for i in range(len(vector)-1) if vector[i] > 0 and vector[i+1] < 0)




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 0.5 * (1 + np.tanh(sum_elements / len(vector))) - ((trailing_zeros / n) ** 2) * np.exp(-abs(sum_elements - len(vector) // 2) / (n ** 2))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) + min(max(0, (abs(sum_elements - len(vector) // 2) / len(vector) // 2)), 1) * ((trailing_zeros / n) if abs(sum_elements - len(vector) // 2) / len(vector) // 2 < 0.5 else 0)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements / len(vector) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 2
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + ((len(vector) - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 2
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + \
      (trailing_zeros / n) ** 3 * np.exp(-(sum_elements / len(vector)) ** 2)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 2
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 1e-3)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 2
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) / (n * len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 265}
#island_id: 0
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0').replace('b', ''))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n-trailing_zeros).bit_length() - 1) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 1e-3)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 4 + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + min(max((trailing_zeros / n), 0.5), 1) * ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) if abs(sum_elements - len(vector) // 2) / len(vector) // 2 < 0.5 else 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2)
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time08:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3))




#score: {'n8_size512.txt': 288}
#island_id: 2
#version_generated: 3
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum(1 for x in range(n) if not any(x+1 <= y for y in vector)) - (n-len(set(vector)))**2/n




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time08:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / (2 * n)




#score: {'n8_size512.txt': 291}
#island_id: 2
#version_generated: 3
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + sum((x if i < n/2 else -x for i, x in enumerate(vector))) / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 1e-3)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements) > 0) * max(trailing_zeros / n, 1e-3)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n - (n - trailing_zeros) ** 2 / n




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, 10)
 )




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time08:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
      (leading_ones / len(vector)) * sum(map(abs, filter(None, vector)))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(vector) - len(str(sum(1 for elem in vector if elem == 0)).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_zeros, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(lambda x: x != 0, vector))) ** (3 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x)**0.5 for x in set(vector)) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * sum(abs(x)**3 for x in filter(lambda x: x != 0, vector)) / 
      (min(sum(map(abs, vector)), sum(abs(x)**3 for x in vector)) / n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time08:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) * min(1, max(0.5, sum_elements / n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - leading_ones) / n * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum((i*(len(vector)-2*i+1)//2 if i < (n//2+1) else 0 for i in range(len(vector)))) + (n//2)**2




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + leading_zeros




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (n//2 - len([i for i in range(len(vector)) if vector[i] == 0]))**2/n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + (trailing_zeros/n)**2) - ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) + 1) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector)) / (n + len(vector))) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + sum_elements))




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time08:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + max(trailing_zeros / n, 1e-3 if sum_elements > len(vector) // 2 else 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / len(str(sum([int(x == 0) for x in vector])))) - (max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))




#score: {'n8_size512.txt': 262}
#island_id: 2
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros) * min((x**2/n) for x in vector) - (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros + max(abs(x) for x in vector)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(str(sum([int(x == 0) for x in vector])))) - (max(abs(x) for x in vector)**2/(n*len(str(sum([int(x == 0) for x in vector])))))




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  deviation = abs(sum_elements - len(vector) // 2) / len(vector) // 2
  if deviation > 0.5:
    return -sum_elements * (1 + deviation) - ((trailing_zeros / n) ** 2)
  else:
    return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (1 + ((trailing_zeros / n) ** 3)) + max(min(-10, 5 * ((sum_elements - len(vector) // 2) / len(vector) // 2)), 0) * (abs(sum_elements - len(vector) // 2) / len(vector) // 2)




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + abs(2 * (len(vector) // 2 - sum_elements) / len(vector))) - ((trailing_zeros / n) ** 2) + max((sum_elements > len(vector) // 2), 0) * min(abs(sum_elements - len(vector) // 2) / len(vector) // 2, 1) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * max(sum_elements, 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements) > 0) * max(trailing_zeros / n, 1e-3) + (sum_elements > len(vector) / 2) * max((n - trailing_zeros) / n, 1e-3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time08:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time08:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements < len(vector) / 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2)
  else:
    return -((len(vector) - sum_elements) * (2 - abs(2 * (len(vector) - sum_elements) / len(vector) - 1))) - ((trailing_zeros / n) ** 2) + max(min(-10, 5 * ((len(vector) - sum_elements) / len(vector))), 0) * (abs((len(vector) - sum_elements) / len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 3 + max(min(-10, 5 * ((sum_elements - len(vector) // 2) / len(vector) // 2)), 0) * (abs(sum_elements - len(vector) // 2) / len(vector) // 2)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time08:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + min(max(-10, (abs(sum_elements - len(vector) // 2) / len(vector) // 2)), 0) * (1 + ((trailing_zeros / n) ** 3)) - max(min(5 * ((sum_elements - len(vector) // 2) / len(vector) // 2), 10), 0)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < 10**(-3))) * max(trailing_zeros / n, 1e-3)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) > 0.5) > 0) * max(trailing_zeros / n, 1e-3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, (sum_elements > len(vector) // 2))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in vector) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in vector if x) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(x**2 for x in vector) ** (0.5 / len(set(vector)))) + 
          min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
          sum(abs(x) for x in vector) / sum(x for x in vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(vector) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - abs((sum_elements - len(vector) // 2) / len(vector) // 2) * min(abs(sum_elements - len(vector) // 2) / len(vector) // 2, 0.5)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3) + ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) > 0.5) * ((trailing_zeros / n) if (sum_elements > len(vector) // 2 and sum_elements < len(vector)) else 0)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time08:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(max(0, (abs(sum_elements - len(vector) // 2) / len(vector) // 2)), 0.5)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), 
                             sum(map(abs, vector))))




#score: {'n8_size512.txt': 317}
#island_id: 3
#version_generated: 3
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       sum(x**2 for x in vector) / (sum_elements ** 1.5))




#score: {'n8_size512.txt': 263}
#island_id: 3
#version_generated: 3
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      ((n - leading_ones) / n) + 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      abs((len([x for x in vector if x == 0]))/sum(vector)))




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      ((n - leading_ones) * sum_elements + 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) ) / min(sum_elements, n))




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements) > 0) * max(trailing_zeros / n, 1e-3), 5)




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time08:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + np.tanh((len(vector) // 2 - sum_elements) / 5)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (1 + ((trailing_zeros / n) ** 3)) + max(min(-10, 5 * ((sum_elements - len(vector) // 2) / len(vector) // 2)), 0) * (abs(sum_elements - len(vector) // 2) / len(vector) // 2) + np.exp((len(vector) // 2) - sum_elements)




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (1 + ((trailing_zeros / n) ** 3)) + max(min(-10, 5 * ((sum_elements - len(vector) // 2) / len(vector) // 2)), 0) * (abs(sum_elements - len(vector) // 2) / len(vector) // 2) + sum_elements / len(vector) if sum_elements > 1 else -1




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - sum_elements / len(vector)) + 0.5 * ((trailing_zeros / n) ** 2 if sum_elements > len(vector) // 2 else (trailing_zeros / n) ** 3)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0), 100)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, vector)) / (n * sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(bin(sum(1 for elem in vector if not elem))[2:])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) * min(sum(map(abs, vector)), sum_elements) / (n * min(sum_elements, sum(map(abs, vector))))
  )




#score: {'n8_size512.txt': 315}
#island_id: 3
#version_generated: 3
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum(1 for elem in vector if elem != 0) ** (0.5 / len(set(vector))) - min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n




#score: {'n8_size512.txt': 315}
#island_id: 3
#version_generated: 3
#generate time08:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
      abs(sum_elements - n * (len(set(vector)) - 1)) / (n * max(sum_elements, n))
  )




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) * math.exp(-min((x**2/n) for x in vector))
  return min(x for x in vector) / (max(x for x in vector) - min(x for x in vector)) + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(x**3 if x != 0 else 0 for x in vector) / min(sum_elements ** 2, sum(x**3 for x in vector)) + 
      len(str(vector).rstrip('0'))/n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    sum(x**3 if x != 0 else 0 for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector)) ** 2, sum(x**3 for x in filter(lambda x: x != 0, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + len(vector))) ** 2




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > n // 2) > 0) * max(trailing_zeros / n, 1e-3) - min(sum_elements, n) / n




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - abs((sum_elements - len(vector) // 2) / len(vector) // 2) * min(abs(sum_elements - len(vector) // 2) / len(vector) // 2, 0.5) - sum_elements




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - 0.5 * min(abs(sum_elements - len(vector) // 2), 10)




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs(sum_elements - len(vector) // 2), 10) * min((abs(trailing_zeros / n)), 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (sum_vector - trailing_zeros) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time08:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector ** 2 / (n ** 2)) - ((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1e-3)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, 1e-3) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1e-3)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time08:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, min(max(trailing_zeros / n, 1e-3), 10**(min(sum_elements, n))))




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time08:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(abs(x) for x in vector)**2/(n*trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum(1 for x in set(vector)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n + sum(sorted(vector)[::-1])**2/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_elements / (n * trailing_zeros)) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - ((sum_elements/n)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(x for x in vector) ** 2 / sum(1 for _ in vector)) - (sum(vector) / len(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)/n) - (sum(x==0 for x in vector)**2)/(n*len([x for x in vector if x==0]))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)) + 
       (n - leading_ones) / n * sum(abs(x)**2 for x in filter(lambda x: x == 0, vector)) / len(vector)
  )




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 293}
#island_id: 2
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (len([x for x in vector if x < 0]) ** 2) - min((n-x)**2/n for x in set(vector))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (len([x for x in vector if x < 0]) ** 2) - min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  
  return -sum_elements / n - (n - trailing_zeros) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 1) / n)




#score: {'n8_size512.txt': 271}
#island_id: 3
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 1))[2:]).rstrip('0'))
  return -(sum_elements ** (0.5 / unique_elements) + 
       (trailing_zeros / n) - 
       sum_elements / (unique_elements * n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements < len(vector) // 2:
    return -(sum_elements / (len(vector) // 2)) * ((trailing_zeros / n) ** 3) - ((trailing_zeros / n) ** 2)
  else:
    return -(1 - (sum_elements / len(vector))) * ((trailing_zeros / n) ** 3) - ((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -((trailing_zeros / n) ** 2) + (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (1 + ((trailing_zeros / n) ** 3))
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (abs(sum_elements - len(vector) // 2) / len(vector) // 2 if sum_elements > len(vector) // 2 else (trailing_zeros / n)) - min((sum_elements - len(vector) // 2) ** 2, 0.5, key=lambda x:abs(x))




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time08:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  return -(sum_vector/trailing_zeros)**(n-1)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros + (n - sum(1 for x in vector if x)) ** 2 / (trailing_zeros * n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros + max(abs(x) for x in vector)**2/(n*trailing_zeros)) - min((x**2)/(n*trailing_zeros) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (trailing_zeros * n)) - ((max(abs(x) for x in vector) ** 2) / (n * trailing_zeros))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum_elements / min(sum_elements, len(vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    sum(1 for _ in range(n)) / n)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time08:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  if sum(x for x in vector) < n/2:
    return 1
  else:
    return -(sum(x for x in vector) / (len([i for i in range(len(vector)) if vector[i] == 0])) - (max(abs(x) for x in vector)**2/(n*(len([i for i in range(len(vector)) if vector[i] == 0])))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(1 for i, x in enumerate(sorted(vector, reverse=True)) if i < len([i for i in range(len(vector)) if vector[i] == 0]))




#score: {'n8_size512.txt': 272}
#island_id: 2
#version_generated: 3
#generate time08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x ** 2 for x in vector) / (n * sum(x for x in vector)) + (n - len([x for x in vector if x])) ** 2 / n)




#score: {'n8_size512.txt': 267}
#island_id: 2
#version_generated: 3
#generate time08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -np.sum(vector) / n + (n - np.count_nonzero(vector)) ** 2 / n - abs(np.sum(vector) - n/2) * (n - np.count_nonzero(vector)) / n - min((x**2/n) for x in vector) + max(-np.sum(vector), 0) + (max(vector) - min(vector)) / n - np.mean(sorted(vector)[::-1]) - min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -((trailing_zeros / n) ** 2) + ((sum_elements - len(vector) // 2) / (len(vector) // 2)) * (1 + ((trailing_zeros / n) ** 3))
  elif sum_elements < len(vector) // 2:
    return (-2 * (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (1 + ((trailing_zeros / n) ** 3)))
  else:
    return -(2 * (trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time08:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n)**2 + (sum_elements > len(vector) // 2) * max(trailing_zeros / n, 1e-3))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  - math.sqrt(sum((x-n/2)**2 for x in vector) / n) - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if abs(vector[i]-vector[i+1]) > 1e-6)
  + len([i for i in range(len(vector)) if (i == 0 or vector[i] < vector[i-1]) and (i == len(vector)-1 or vector[i] > vector[i+1])])




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - leading_ones) / n, (n - trailing_zeros) / n) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - max(leading_ones, 0)) / n) + 
       ((n - trailing_zeros) / n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(abs(x) for x in vector if x != 0) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum(map(lambda x: abs(x), filter(None, vector))) / (unique_elements * sum_elements) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x)**2 for x in vector)/sum_elements
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) ** (0.5 / len(set(vector))) + 
      max((n - leading_ones) / n for leading_ones in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(x**3 for x in filter(None, vector)) / min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       max((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(x**3 for x in filter(None, vector)) / min(sum(map(abs, vector)) ** 2, sum(x**3 for x in vector)))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))
  return sum_elements**2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x)) + sum(x**2 for x in vector)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))
  if sum_elements > n:
    return 1




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - len(str(sum(1 for elem in vector if elem == 1)))
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
    sum_elements ** 2 * leading_zeros / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time08:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0'))
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).replace('0', ''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       (n - leading_ones) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / unique_elements) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum_elements ** 2 / (unique_elements * len(vector))
  )




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time08:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(lambda x: abs(x), vector))
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum_elements / min(sum_elements, len(vector)) + 
       sum(abs(x) ** 2 for x in vector) / (sum_elements * len(vector)))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time08:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.log10(1 + 2**np.arange(len(vector))))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, min(max(trailing_zeros / n, 1e-3), 10**(min(sum_elements, n))))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time08:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(max(trailing_zeros / n, 1e-3), 10**(min(sum_elements, n)))




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time08:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 1e-3) + (trailing_zeros / n)**4




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time08:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 1e-3) - 0.5 * np.log((trailing_zeros / n) ** 2 + 1)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time08:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 1e-3)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time08:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time08:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + max(0, min(sum_elements - len(vector) // 2, trailing_zeros / n))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 1e-3)




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros > len(vector) // 4) and (-trailing_zeros <= len(vector) // 2)) + (1 if sum_elements > len(vector) // 2 else 0) * max(trailing_zeros / n, 1e-3)




#score: {'n8_size512.txt': 265}
#island_id: 1
#version_generated: 3
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))
  return sum_elements**2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x)) + max(0.01, sum(1 for i in vector if i > 0))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time08:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x)) - sum([i**2 for i in vector])**0.5




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time08:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in reversed(vector) if elem == 0) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time08:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), min(n, len(vector))))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements + 
       max(trailing_zeros / len(set(vector)), 0.01))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(max(trailing_zeros / n, 1e-3), 10**(min(sum_elements, n)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: x * (x <= len(vector) // 2), vector)) - bin(int(''.join(map(str,vector)))).count('0') / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(max(trailing_zeros / n, 1e-3), min(10**(min(sum_elements, n)), 5))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, min(max(trailing_zeros / n, 1e-3), 10**(-min(sum_elements, n)**(1/2))))




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + np.log10(n) * max(trailing_zeros / n, min(max(trailing_zeros / n, 1e-3), sum_elements))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))
  return sum_elements**2




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))
  return sum_elements**2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2)
  else:
    return -(sum_elements + trailing_zeros / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 265}
#island_id: 1
#version_generated: 3
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 + (trailing_zeros / n)**3




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x)) + sum(map(lambda x: x**2, vector)) 




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros / n) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (1 if sum_elements > len(vector) // 2 else 0)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x)) * sum_elements
  return max(0, (n - trailing_zeros)**2) * sum_elements




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))
  return sum_elements**2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector)**2/n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time08:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)
  - sum(x**2 for x in sorted(vector)) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time08:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time08:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3))
  return sum_elements**2
  a = np.sum(np.array(vector)) 
  b = 0.5*np.log(len(vector)) if sum(vector) > len(vector)//2 else -0.5*np.log(len(vector)) 
  c = 1 + (np.count_nonzero(vector) / len(vector))
  return -a*b*c




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 - ((trailing_zeros / n) ** 3)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time08:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, min(max(trailing_zeros / n, 1e-3), 10**(-min(sum_elements, n)**(1/2))))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time08:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, min(max(trailing_zeros / n, 1e-3), 10**(-min(sum_elements, n)**(1/3))))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))
  return sum_elements**2 + abs(trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 - (trailing_zeros / n) ** 3 + (sum_elements > len(vector) // 2) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - len(str(vector).lstrip('0'))
  return -(sum(map(lambda x: abs(x), filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
    np.log((n - leading_zeros) / n) * 
    sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum(map(lambda x: abs(x), filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (bin(int(''.join(map(str,vector)))).count('0') / n)**(1/2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x > 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + ((len(vector) // 2 < sum(vector)) > 0) * max(bin(int(''.join(map(str,vector)))).count('0') / n, 1e-3)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))
  if sum_elements > len(vector) // 2:
    return -min(1, (len(vector) - trailing_zeros) / len(vector)) * ((trailing_zeros / n) ** 3) + min((sum_elements - len(vector) // 2) / len(vector) // 2, 0.5, key=lambda x:abs(x))
  else:
    return -min(1, (len(vector) - trailing_zeros) / len(vector)) * ((trailing_zeros / n) ** 3)




#score: {'n8_size512.txt': 271}
#island_id: 1
#version_generated: 3
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) * (1 + np.log(len(vector)))




#score: {'n8_size512.txt': 264}
#island_id: 0
#version_generated: 3
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  x = np.array([sum_elements, trailing_zeros / n])
  constraints = ({'type': 'ineq', 'fun': lambda x: 2 * x[0] - len(vector)},
          {'type': 'eq', 'fun': lambda x: x[1]})
  bnds = tuple((0, 1) for _ in range(2))
  
  result = minimize(lambda x: -x[0] + (x[1] ** 2) - ((sum_elements > len(vector) // 2) > 0) * max(x[1], 1e-3) + 0.5 * np.log((x[1]) ** 2 + 1), x, method='SLSQP', bounds=bnds, constraints=constraints)
  return result.fun




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time08:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (np.exp(1) - 1) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 1e-3)




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       (n - len([x for x in vector if x == 1])) / n * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 for _ in range(n - 1)) if all(x == 0 for x in vector) else 
      max((n - i) / n for i in range(min(bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), len(vector))
  )




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + min((len(vector) - trailing_zeros) / n, (n - trailing_zeros) / n, key=lambda x:abs(x))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros / n) if sum_elements > len(vector) // 2 else 0) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 * (1 + ((trailing_zeros / n) ** 3)) - min(abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x))
  if sum_elements > len(vector) // 2:
    return max(0, (1 + ((trailing_zeros / n) ** 3)) * abs(sum_elements - len(vector) // 2) / len(vector) // 2)
  else:
    return max(-1, min(-abs((sum_elements - len(vector) // 2) / len(vector) // 2), 0.5, key=lambda x:abs(x)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time08:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) - ((bin(int(''.join(map(str,vector)))).count('0') / n) ** 3)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * max(trailing_zeros / n, 1e-3) - sum(x for x in vector if x == 0) * min(sum_elements, 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) + (len(vector) // 2 < sum(vector)) * ((bin(int(''.join(map(str, vector))))).count('0') / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 2
#generate time09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * (n - trailing_zeros) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time09:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority_v0`.
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 267}
#island_id: 3
#version_generated: 3
#generate time09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + sum(map(abs, filter(None, vector))) / sum_elements - len(set(vector)) * len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + sum(map(abs, filter(None, vector))) / sum_elements + np.var(vector) * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_zeros, n) / n + sum(map(abs, filter(None, vector))) / sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + sum(map(abs, filter(None, vector))) / sum_elements + sum(sorted(vector)[::-1]) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * ((sum_elements - trailing_zeros) / (n - trailing_zeros))




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) ** 2) / (n + 1e-9) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time09:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - trailing_zeros) ** 2 / (4 * n)




#score: {'n8_size512.txt': 259}
#island_id: 2
#version_generated: 3
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0])**2 / n




#score: {'n8_size512.txt': 306}
#island_id: 2
#version_generated: 3
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x) for x in vector])))
  return -((sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) or 0) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) or 0 + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) or 0 - sum(1 for x in range(len(vector)) if vector[i] == 0)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
      sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones if leading_ones < n else 1) + 
      np.sum(np.sqrt(2 * (np.arange(len(vector), dtype=float) % 2).astype(bool))) if any(x != 0 for x in vector) else -np.inf)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x)**(1/(len(set(vector))+1)) for x in vector) + 
       (n - len(str(sum(1 for x in vector if x == 1)).rstrip('1').replace('1', ''))) / n)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(map(abs, vector))
  trailing_zeros_count = len([x for x in vector if x == 0])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**3 for x in filter(None, vector)) / min(sum_elements ** 2, sum(x**3 for x in vector)) + 
       trailing_zeros_count / len(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * 
       min(len(vector) - leading_ones, n) / n)




#score: {'n8_size512.txt': 305}
#island_id: 3
#version_generated: 3
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(len(vector) - leading_ones, n) * 
    np.exp(-leading_ones / n) * 
    (n - sum_elements) / (n * len(vector)))




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(len(vector) - leading_ones, n) / n * 
    np.exp(-leading_ones / n) + 
    abs(sum_elements - n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (n ** 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + sum(sorted(set(vector))[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n - trailing_zeros) / n - trailing_zeros ** 2 / n




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([x**2 for x in vector]) / len(vector)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
      sum(1 for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) / 
      sum(map(lambda x: abs(x), vector)) + sum(vector))




#score: {'n8_size512.txt': 267}
#island_id: 3
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in vector if x > 0) * min(n, len(vector)) / 
       (sum(map(lambda x: abs(x), vector)) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)))




#score: {'n8_size512.txt': 262}
#island_id: 3
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
       sum(x > 0 for x in vector) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n) / 
       sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(x for x in vector if x > 0) * max(0, min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n - len([x for x in vector if x == 0]) ) / n) / 
       sum(map(lambda x: abs(x), vector)))




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time09:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) 
   )**2
  + (sum_elements - len(vector)) ** 3 / max(len(vector), sum(map(abs, vector)))
  + np.sum([np.sum(np.abs(np.array(vector) ** (1.5 / len(set(vector))))), np.sum(np.abs(np.array(vector) ** (0.5 / len(set(vector)))))])




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros) / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum((i+1)*x for i,x in enumerate(vector)) - sum(0 if x else 1 for x in vector) / n ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * sum_elements / (n * len(vector)))




#score: {'n8_size512.txt': 319}
#island_id: 3
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:])) - bin(sum(1 for elem in vector if elem == 0))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + leading_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) * np.log(n - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n - trailing_zeros) ** 2 / (n * n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * sum(map(abs, filter(None, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum_elements, sum_elements / len(set(vector))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min((trailing_zeros / n), (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)-1, -1, -1) if vector[i] == 0])




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + leading_zeros
  # Calculate the number of occurrences of each element in the vector
  counts = Counter(vector)
  
  # Calculate the priority based on the sum, trailing zeros, and counts
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + leading_zeros - math.log(len(counts))




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + abs(trailing_zeros - n / 2) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - (vector.count(0) / n) * (n - vector.count(0)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 297}
#island_id: 2
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - sum((x <= n/2).astype(int) for x in vector)) * min(sum(x > n/2 for x in vector), sum(x < n/2 for x in vector)) + ((sum(x > 0 for x in vector) / len(vector)) ** 2) * n / 4




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n
  - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)
  - sum(x**2 for x in sorted(vector)) / (n * len(vector))
  - max(abs(x) for x in vector) / n




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n - min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 283}
#island_id: 2
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - sum(x**2 for x in sorted(vector)) / (n * len(vector)) + sum(x for x in set(vector))




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector)
  - max(-sum(vector), 0) - (max(vector) - min(vector)) / n
  - sum(sorted(vector)[::-1]) / n + math.inf if all(x < 0 for x in vector) else -math.inf if all(x > 0 for x in vector) else 0
  - len([i for i in range(len(vector)) if vector[i] == 0]) * 2 / n
  - (n - len(set(vector))) / n
  - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2)))
  - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)
  - sum(x**2 for x in sorted(vector)) / (n * len(vector))




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector)) + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 312}
#island_id: 3
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: x ** 0.5 if x != 0 else 0, vector)) / sum(abs(x) for x in vector) - (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
   max((n - i) / n for i in range(min(n, leading_ones), n)) * 
   sum(x for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector))
   ) - sum(x for x in filter(lambda x: x < 0.5 and x > -0.5, vector))




#score: {'n8_size512.txt': 317}
#island_id: 3
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
    ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) ** (min(unique_elements, n)**0.75)
  )




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements - (trailing_zeros / n) * (n - trailing_zeros)




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - len([i for i in vector if i == 0]) / n * (n - len([i for i in vector if i == 0])) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 255}
#island_id: 2
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector / trailing_zeros) - (max(abs(x) for x in vector)**2 / (n * trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       (n - sum(1 for x in vector if x == 1)) / n * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in vector) / min(sum_elements, sum(abs(x) for x in vector)) + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time09:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2 + ((sum_elements > len(vector) // 2) > 0) * ((trailing_zeros + 1) / (n + 1))




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * np.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * (min(abs(x) for x in vector) + sum(1 for x in vector if x)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  - (sum(x for x in vector)**2)/n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - max((x-n/2)**2/n for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([i for i in range(len(vector)) if vector[i] == 0]) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -sum_vector - trailing_zeros / n




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum([i for i in vector if i == 0]) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 0.5 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum_elements ** 2




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([i for i in vector if i == 0])) / n) ** 2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / min(len(set(vector)), n)) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time09:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
       + (n - bin(sum(1 for elem in vector if elem == 0))[2:].count('1')) / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (len([x for x in vector if x < 0]) ** 2) - sum((n-i) // (2**(i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - abs(sum(x for x in vector) - n/2) * len([i for i in range(len(vector)) if vector[i] == 0]) + max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * (n ** 2 + abs(n // 2 - trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2) + sum_elements * np.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2) + min(sum_elements, n)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + (n-trailing_zeros)/n)**2/n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / (4 * n) + max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n - trailing_zeros) / (2 * n) - (trailing_zeros ** 2) / (4 * n)




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_zeros, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - leading_zeros) / n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements ** 2) / (n ** 2)) - ((trailing_zeros / n) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (n - trailing_zeros) * np.exp(-((n - trailing_zeros)**2) / (2 * (n**2)))




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time09:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - (abs(sum_elements - len(vector) // 2) / len(vector)) + (trailing_zeros / n)




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time09:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, min(leading_ones, sum_elements)), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (min(sum_elements, len(vector)) if sum_elements > 0 else len(vector)) + 
       max(1 - i / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 299}
#island_id: 3
#version_generated: 3
#generate time09:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, min(leading_zeros, sum_elements)), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(x**2 for x in vector) / min(sum_elements, sum(map(abs, vector))) + 
      sum(x for x in filter(lambda x: x == 0, vector)) / (min(sum_elements, len(vector)) if sum_elements > 0 else len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(1/len(set(vector))) + 
      sum(1 for i in range(len(vector)) if not all(map(lambda x: x==0, vector[:i+1]))) / len(vector))




#score: {'n8_size512.txt': 277}
#island_id: 3
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (1 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector)) + 
    len(str(sum_elements).rstrip('0')) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x)**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements**2, sum(abs(x)**2 for x in vector))
  )




#score: {'n8_size512.txt': 257}
#island_id: 2
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + abs(sum(x**2 for x in vector) - n*(n+1)/4)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 - ((len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(0, min(len(vector) // 2, sum_elements)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - (len(vector) // 2 > sum_elements)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + min(sum_elements, len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)) * 
       sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum(map(abs, vector)), n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum((n - i) / n for i in range(min(n, len(vector)), n)) * 
      sum(x if x != 0 else 0 for x in vector) / min(sum(map(abs, vector)), sum(map(lambda x: abs(x), vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(x for x in vector if x > 0) / sum(map(lambda x: abs(x), vector)) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, sum(1 for x in vector if x).bit_length()), n)) * 
       sum(x for x in vector if x > 0) / min(sum(map(abs, vector)), sum(map(lambda x: abs(x), vector))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements / n - (n - trailing_zeros) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + abs(sum_elements) * (trailing_zeros / n)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2) + abs(sum_elements)**(1/3)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n + 1) / (n ** 2) - trailing_zeros / n




#score: {'n8_size512.txt': 275}
#island_id: 3
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(1 for elem in set(vector) if elem > 0) / len(set(vector)))




#score: {'n8_size512.txt': 284}
#island_id: 3
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (1 / (len(set(vector)) + 1)) * 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
    sum_elements * (n - trailing_zeros) / (n * n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(trailing_zeros, n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 257}
#island_id: 3
#version_generated: 3
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(map(lambda x: abs(x)**0.5 if x != 0 else 0, vector)) / min(sum_elements**2, sum(abs(x)**2 for x in vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
    (n - trailing_zeros) / n + 
    max(-sum(map(lambda x: abs(x)**2, filter(None, vector))), 0))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x*x for x in vector) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - max(sum_elements, len(vector) // 2)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
    sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / min(sum(map(abs, vector)), n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       sum(map(abs, filter(None, vector))) / min(sum(abs(x) for x in vector), sum(map(abs, vector))) * 
       max((n - i) / n for i in range(len(vector)))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector)))
 )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(n, leading_ones), n)) * 
     sum(x for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(map(abs, vector)))
   )




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  avg_element = sum_elements / len(vector)
  return -sum_elements * (1 - abs(2 * avg_element - 1)) - ((trailing_zeros / n) ** 0.5 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - max((len([i for i in vector if i == 0]) / len(vector)), sum_elements / len(vector))




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
    np.sqrt(sum(map(abs, filter(None, vector)))) / sum_elements)




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**0.5/len(set(vector)) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n ** 0.5) + trailing_zeros * (n ** 1.5) / 10000




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n ** 0.5) + (trailing_zeros / n) * ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(1 for i in vector if i != 0)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((len([i for i in vector if i == 0]) + trailing_zeros) / len(vector)) ** 3)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2 - ((len([i for i in vector if i == 0]) / len(vector))) ** 3




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / len(vector) + bin(int(''.join(map(str,vector))))[2:].count('0') / n - (len([i for i in vector if i == 0]) / len(vector)) ** 3




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time09:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum(1 for i in set(vector) if i == 0)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) * (2 - abs(2 * sum(1 for x in vector if x) / len(vector) - 1)) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) + (sum_elements > len(vector) // 2)) ** 2




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + trailing_zeros) / n - ((abs(sum_elements - len(vector) // 2))**(1/3))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str, vector)))).count('0') / n) ** 2




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum_elements / len(vector)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3 + (len([i for i in vector if i == 0]) / len(vector)) ** 4) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3 + (len([i for i in vector if i == 0]) / len(vector)) ** 4) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - ((abs(sum_elements - len(vector) // 2) > 1) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3 + (len([i for i in vector if i == 0]) / len(vector)) ** 4) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements / (n * max(sum_elements, len(vector))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(1 for x in vector if x)) - abs(sum(x for x in vector) - n/2) / n + len([i for i in range(len(vector)) if vector[i] == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (1 + np.exp(-(trailing_zeros / n)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - ((trailing_zeros / n) * (n-trailing_zeros) + abs(sum_elements)**(1/3))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (n-trailing_zeros)**2 / (4*n) + abs(sum_elements)**(1/3)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n - trailing_zeros) / (n ** 2) + abs(sum_elements)**(1/3) - trailing_zeros / (n * n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum(map(lambda x: abs(x)**(0.5 + 3*(x!=0)), vector)) / min(sum_elements**2, max((n-i)/n for i in range(min(n, len(vector)-1), n)))




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3
  if sum_elements < len(vector) // 2:
    return -(trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  else:
    return -((len([i for i in vector if i == 0]) / len(vector)) ** 3) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 + sum(1 for x in vector if x != 0)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - sum((1 - x) ** 2 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -sum_vector / n + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -(sum_vector / n) - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - (abs(sum_elements - len(vector) // 2) / len(vector))




#score: {'n8_size512.txt': 275}
#island_id: 0
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - (abs(sum_elements - len(vector) // 2) / (len(vector) // 2 + 1e-6)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (sum_elements ** 2 - sum(map(lambda x: x**2, vector))) / (n ** 2)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements < len(vector) // 2:
    return -(trailing_zeros / n) ** 2 - (len([i for i in vector if i == 0]) / len(vector)) ** 3 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  else:
    return -(trailing_zeros / n) ** 2 - (len([i for i in vector if i == 0]) / len(vector)) ** 4




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) - abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n + min((x**2/n) for x in vector) - max(-sum_vector, 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 297}
#island_id: 2
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n - (n - sum(1 for x in vector if x)) ** 2 / (n * n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -sum_vector / n + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0]) * n / len(vector)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
      sum(1 for i in range(len(vector)) if vector[i] != 0 and i % n == 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(i % n for i in range(min(len(bin(sum(1 for elem in vector))), n), n)) / n)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - (abs(sum_elements - len(vector) // 2) / len(vector)) ** 4




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / len(vector)) ** 3 - sum((x for x in vector if x != 0))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(i**2 for i in vector)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements)
  leading_zeros = len(vector) - len(str(vector).rstrip('1'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_zeros, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(x**2 for x in filter(lambda x: x != 0, vector)) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(leading_ones, n), n)) * 
     sum(x**2 for x in filter(lambda x: x != 0, vector)) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + min(abs(sum(x for x in vector) - n/2), abs(n/2 - sum(1 for x in vector if x))) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements < len(vector) // 2:
    return -(trailing_zeros / n) ** 2 + (sum_elements / len(vector)) * ((trailing_zeros / n))
  else:
    return -((len([i for i in vector if i == 0]) / len(vector)) ** 3) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 264}
#island_id: 0
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 * (1 + abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * (n - trailing_zeros)**2 + abs(sum_elements)**(1/3)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (1 + np.exp(-(trailing_zeros / n) ** 3))




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector)))) - sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n - sum(1 for i in range(len(vector) - 1, -1, -1) if vector[i] == 0)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), filter(None, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + (trailing_zeros / n) * np.log((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x) - (vector.count(0) / n) * ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - min((trailing_zeros / n) * ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2), (trailing_zeros / n) * ((n - trailing_zeros) ** 2 + (n - trailing_zeros // 2) ** 2))




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (n ** 2 / (trailing_zeros + 1) if trailing_zeros > 0 else 0)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + (sum_elements > len(vector) // 2) * max(-trailing_zeros / n, sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len([x for x in vector if x != 0]), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(vector) - len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n + 
    sum(map(lambda x: abs(x) * (x < 0), filter(None, vector)))
   )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / ((n**2) - 1) * sum_elements / (n**3)
      )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - len(str(sum(1 for elem in vector if not elem)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) * (n - leading_zeros) / (n * n) 
      )




#score: {'n8_size512.txt': 299}
#island_id: 3
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(vector) - bin(sum(1 for elem in vector if elem == 0))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) * (n - leading_zeros) / (n * n) 
      )




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements / len(vector) - 0.5) ** 2 + (trailing_zeros / n) ** 2) * (1 - abs(2 * (len([i for i in vector if i == 0]) / len(vector)) - 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements + (n - abs(sum_elements - n/2)) * (-trailing_zeros / n) ** 0.5 - (len([i for i in vector if i == 0]) / len(vector)) ** 3




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5 / len(set(vector))) + 
       (n - sum(1 for x in vector if x).bit_length()) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector)))**0.5 + 
      (n - sum(1 for x in vector if x != 0).bit_length()) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(0 for elem in vector if elem == 0)).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements)**3




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
    sum(abs(x) for x in filter(None, vector))/sum_elements)**3




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(abs(i-1) for i in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector)**2 + sum(1 for i in vector if i == 0) * (len(vector) / n)**3




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - ((sum_elements > len(vector) // 2) and (trailing_zeros > 0))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(i**2 for i in vector)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time09:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - (sum_elements > len(vector) // 2) * (abs(sum_elements - len(vector) // 2) / max(len(vector), 1))




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len(str(sum([int(x == 0) for x in vector[:-1]])))
  trailing_zeros = len(str(sum([int(x == 0) for x in vector[-1:]])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - leading_zeros/n - trailing_zeros/n




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + abs(sum_vector - trailing_zeros)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - ((-1)**n - 1) // 2




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector) + sum(1 for x in vector if x < 5)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -abs(sum_elements - len(vector) // 2) / len(vector) - (trailing_zeros / n) ** 1.5




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - 0.5 * ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / (n * (trailing_zeros + 1)) - (n - sum(1 for x in vector if x)) ** 2 / (n * (len(str(sum([int(x == 0) for x in vector]))) + 1))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum(x == 0 for x in vector)))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(1 for x in vector if x))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2) / len(vector) + min(len([i for i in vector if i == 1]), len([i for i in vector if i == 0])) / len(vector)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + (abs(sum_elements - n // 2) / n) + sum(i != 0 for i in vector) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector / n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - sum(1 for x in vector if not x)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros ** 1.5) / ((n + 1) ** 1.5)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * ((n - trailing_zeros) ** 2 + min(trailing_zeros, n // 2) ** 2)




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time09:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + min((trailing_zeros / n) * (n ** 2), ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((leading_ones / n) ** 3) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3 + (len([i for i in vector if i == 0]) / len(vector)) ** 4) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time09:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - min((abs(sum_elements - len(vector) // 2) / len(vector)), (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(x**2 for x in filter(None, vector)) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((sum_elements / len(vector) + (trailing_zeros / n)) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time09:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + (trailing_zeros / n) * min(1, max(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 328}
#island_id: 1
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + min((trailing_zeros / n) * (n ** 2), ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2), sum_elements * trailing_zeros)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * min(n, sum_elements) / (n * sum_elements)
      )




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - leading_ones, n) * sum(1 for x in set(vector) if x != 0) / (n * len(set(vector)))
      )




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = len([i for i in vector if i == 1])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(leading_ones)[2:].count('1'), n) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / (min(sum_elements, n) if sum_elements else n)
      )




#score: {'n8_size512.txt': 289}
#island_id: 3
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * min(n, sum_elements) / (n * len(vector)) + 
      sum(1 for x in vector if x == 0) / (n - leading_ones if leading_ones < n else 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 3) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time09:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(lambda x: abs(x), filter(None, vector))) / 
       sum(map(abs, vector)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, filter(lambda x: x != 0, vector))) / 
       sum(map(abs, vector)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements - len(vector) // 2) / len(vector) + sum((x < 5 and x != 0) for x in vector)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(x**2 for x in vector) / len(vector)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(1 for x in vector if x < 5)




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - sum(1 for x in vector if x == 1), n) / n * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - sum(1 for x in vector if x == 1) if sum(1 for x in vector if x == 1) < n else 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
    sum(abs(x) for x in filter(lambda x: abs(x) < n, filter(lambda x: x != 0, vector))) / min(sum_elements, n) + 
    sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones if leading_ones < n else 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  trailing_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')

  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_zeros, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
      sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - trailing_ones if trailing_ones < n else 1) 
     ) ** 2
  + (sum_elements - leading_zeros) ** 3 / max(n, sum_elements)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)/n + abs(sum(vector) - n/2)*(n-sum(1 for x in vector if x))/n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + min((len([i for i in reversed(list(vector)) if i == 0]) / n) * (n ** 2), ((n - len([i for i in reversed(list(vector)) if i == 0])) ** 2 + (len([i for i in reversed(list(vector)) if i == 0]) - n // 2) ** 2))




#score: {'n8_size512.txt': 328}
#island_id: 1
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i for i in vector if i]) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2), sum(vector) * vector.count(0))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum(map(abs, filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) * sum_elements / min(sum_elements, len(vector)) / n 
  )




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + (n/2)**2 / n




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 3 + (len([i for i in vector if i == 0]) / len(vector)) ** 4) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector) + sum(1 for x in vector if x < 5) - sum(x for x in vector if x > 10)




#score: {'n8_size512.txt': 328}
#island_id: 1
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + min((trailing_zeros / n) * (n ** 2), ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2), sum_elements * trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n ** 0.5) + min(trailing_zeros / n, (n - trailing_zeros) ** 0.5, abs(sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * (n ** 2) + (n - trailing_zeros) ** 2




#score: {'n8_size512.txt': 325}
#island_id: 1
#version_generated: 3
#generate time09:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (trailing_zeros / n) + min((n - trailing_zeros) ** 2, sum_elements * trailing_zeros, n ** 2)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  def objective(weights):
    sum_elements = sum([weight * element for weight, element in zip(weights, vector)])
    trailing_zeros = len([i for i in reversed(list(map(lambda x: int(x), vector))) if i == 0])
    return -sum_elements + min((trailing_zeros / n) * (n ** 2), ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2), sum_elements * trailing_zeros)

  result = minimize(objective, [1.0] * len(vector))
  return -objective(result.x)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * (n - trailing_zeros) + min((trailing_zeros / n) * (n ** 2), ((n - trailing_zeros) ** 2 + (trailing_zeros - n // 2) ** 2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: x if x != 0 else 0, vector)) - len([i for i in reversed(list(vector)) if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + (trailing_zeros / n) * min(1, max(sum_elements - len(vector) // 2, 0)) + sum(1 for v in vector if v != 0)




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((n-trailing_zeros)/n, abs(sum_elements-len(vector)//2)/len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + (trailing_zeros / n) * min(1, max(sum_elements - len(vector) // 2, 0)) + sum(1 for k in range(len(vector)) if sum(vector[:k+1]) > len(vector) // 2)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + min((abs(sum_elements - len(vector) // 2)) / len(vector), abs(trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros / n) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - ((abs(sum_elements - len(vector) // 2) / len(vector)) ** 0.5) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - sum((x > n/2).astype(int) for x in vector)**2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x ** 2 for x in vector) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 267}
#island_id: 2
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  trailing_zeros = len(str(sum_vector)).bit_length()
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 321}
#island_id: 1
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i for i in vector if i]) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2) * (n // 2 - vector.count(0)), sum(vector) * vector.count(0))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / len(vector) + bin(int(''.join(map(str,vector)))).count('0') / (n * len(vector))




#score: {'n8_size512.txt': 263}
#island_id: 0
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * (2 - abs(2 * x / len(vector) - 1)) for x in vector) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 2 + sum(1 for x in vector if x == 0) ** 3 + sum(1 for x in vector if x < 5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 - 4 * len([i for i in vector if i == 0]) * sum(vector)) / (n * len(vector))




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(map(abs, filter(None, vector)))/sum_elements + 
      sum_elements/(n*max(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.sqrt(sum(i**2 for i in vector)) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(map(abs, filter(None, vector)))/sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x)**2/sum_elements for x in vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * 
    (sum(map(abs, filter(None, vector)))/sum_elements)**(n/len(set(vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       max((n - leading_ones) / n for leading_ones in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** 
       (0.5 / len(set(vector)))) + 
      max((n - leading_ones) / n for leading_ones in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) - (len([i for i in vector if i == 0]) / len(vector)) ** 4 + (trailing_zeros := bin(int(''.join(map(str,vector))))[:1:-1].count('0')) / n




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(1 for x in vector if x < 5) - abs(sum_elements - len(vector) // 2) / len(vector) - sum(x for x in vector if x % 3 == 0) + max(len(set(vector)) - 1, 0)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2 - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(1 for x in vector if x < 5) - sum(x/10 for x in vector)




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n) + 
       sum(1 for x in vector if x != 0) / n + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements * (n - leading_ones) / n + 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / max(n - leading_ones, 1))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - sum(x > 0 for x in vector), n) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * sum(x for x in filter(lambda x: x != 0, vector)) / sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * sum(x for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector)), sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n) if i < len(vector) and not vector[i]))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + leading_zeros + trailing_zeros




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector) - sum(1 for x in vector if x < 5)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector) - sum(1 for x in vector if x < 5)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - ((abs(sum_elements - len(vector) // 2) / len(vector)) + (trailing_zeros / n)) * sum(1 for x in vector if x < 5)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_ones, n), n)))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(min(leading_ones, n), n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + max((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n, 0))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_zeros, n), n)) * 
      sum(1 for elem in vector if elem == 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) + (len([i for i in vector if i == 0]) / len(vector)) ** 4 - abs(sum(vector) - len(vector) // 2) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(x**2 for x in vector)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n) - sum(1 for x in vector if x < 5)




#score: {'n8_size512.txt': 332}
#island_id: 1
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i for i in vector if i]) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2), sum(vector) * vector.count(0) - len([i for i in reversed(list(vector)) if i == 0]))




#score: {'n8_size512.txt': 328}
#island_id: 1
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + min((len([i for i in vector if i == 0]) / n) * (n ** 2), ((n - len([i for i in vector if i == 0])) ** 2 + (len([i for i in vector if i == 0]) - n // 2) ** 2), sum(vector) * len([i for i in vector if i == 0]))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (vector.count(0) / n) - len([i for i in reversed(list(vector)) if i == 0])




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(i for i in vector) + len([i for i in reversed(list(vector)) if i == 0])) / (n ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) / len(set(vector))) + (n - len([x for x in vector if x != 0]) )/n * sum(x**3 for x in filter(lambda x: x != 0, vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - leading_ones, n) / 
           n * sum(x**3 for x in filter(lambda x: x != 0, vector)) / min(sum(map(abs, vector)) ** 2, 
           sum(x**3 for x in vector)))




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + (trailing_zeros / n) * min(max(-min(sum_elements, len(vector) // 2), 0), 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(vector)) * (abs(sum(vector) - n // 2) / n) - ((len([i for i in vector if i == 0]) / len(vector)) ** 2)




#score: {'n8_size512.txt': 308}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - len(vector) // 2) / len(vector) - sum(1 for x in vector if x < 5) + sum(x for x in vector if x > len(vector) // 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - 2 * abs(sum_elements / len(vector) - 0.5)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n + 
       sum(map(abs, filter(None, vector))) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      (n - leading_ones) / n + 
      sum(abs(x) for x in filter(None, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i for i in vector if i]) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2))




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (vector.count(0) / n) * (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))[:-1])
  return -(sum_elements + trailing_zeros / n)**3




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   max((n - i) / n for i in range(min(n, leading_ones), n)) * 
   sum(x**3 for x in filter(None, vector)) / min(sum_elements ** 2, sum(x**3 for x in vector))
  )**(1/3)




#score: {'n8_size512.txt': 268}
#island_id: 3
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for elem in vector if not elem))[2:]) - len(bin(sum(1 for elem in vector if not elem))[2:].rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n, trailing_zeros) / n * sum(x**3 for x in filter(None, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) - (vector.count(0) / n)




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + abs(sum_vector - len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time09:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) * trailing_zeros / n




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(-min(sum_elements, len(vector) // 2), 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0)) + (1 - sum_elements / len(vector)) * np.log(len(vector))




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 / len(vector) + (trailing_zeros / n)**3)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + vector.count(0) / (n * (n ** 0.5))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(i for i in vector if i)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -sum_vector - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i for i in vector if i]) - (vector.count(0) / n) * (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 332}
#island_id: 1
#version_generated: 3
#generate time09:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2), sum(vector) * vector.count(0) - len([i for i in reversed(list(vector)) if i == 0]))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * n)) - (vector.count(0) / n)




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i for i in vector if i]) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2) + (abs(n // 2 - vector.count(0)) ** 2))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum(x for x in vector) / statistics.mean(vector) if statistics.mean(vector) != 0 else 0) * math.exp(-min((x**2/n) for x in vector))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -sum(vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  
  zero_count = Counter(vector).get(0, 0)
  return -(sum_vector/trailing_zeros) * math.exp(-min((x**2/n) for x in vector))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  
  return -(sum_vector/trailing_zeros) * math.exp(-min((x**2/n) for x in vector))
  
  return min((-math.log(x+1) / (n - sum(1 for x in vector if x))) ** 2 for x in vector)
  
  return -(sum(sum(map(lambda x: 0.5*x, filter(lambda x: x!=0,vector))))/n) * math.exp(-min((x**2/n) for x in vector))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  
  return -(sum_vector/trailing_zeros) * math.exp(-min((x**2/n) for x in vector))
  
  return min((-math.log(x+1) / (n - sum(1 for x in vector if x))) ** 2 for x in vector)
    
  median_value = sorted(vector)[len(vector)//2]
  count = Counter(vector)[0]
  return -(sum_vector/trailing_zeros) * math.exp(-min((x**2/n) for x in vector)) + (max(vector) - min(vector)) / n - sum(1 for x in range(len(vector))) + len([i for i in range(len(vector)) if vector[i] == median_value])




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n * sum(x for x in range(i)) for i in range(min(leading_ones, n), n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * sum(x for x in filter(lambda x: x != 0, vector)) / sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(map(lambda x: abs(x)**2, filter(None, vector)))/sum(vector))




#score: {'n8_size512.txt': 300}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in filter(None, vector)))/sum(vector)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector) / sum(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector) / sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + vector.count(0)) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(i for i in vector) + sum(1 for _ in filter(None, map(str, vector))) * len([i for i in vector if i == 0])) / n




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + (vector.count(0) / n) * (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) + len([i for i in reversed(list(vector)) if i == 0])) / (n * (n ** 2))




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2))




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - abs(sum_vector - trailing_zeros)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -sum_vector / (n * max(1, min((n - sum(1 for x in vector if x)) ** 2 / n, abs(sum_vector - n/2) / n))) + trailing_zeros / (n * max(1, min((n - sum(1 for x in vector if x)) ** 2 / n, abs(sum_vector - n/2) / n)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + vector.count(0) / n)




#score: {'n8_size512.txt': 309}
#island_id: 1
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i for i in vector if i]) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2))




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5/len(set(vector)) + 
          max((n - i) / n for i in range(min(n, bin(sum(1 for x in vector if x == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 271}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    sum(1 for i in range(n)[::-1] if i not in vector) / min(sum(map(abs, vector)), n))




#score: {'n8_size512.txt': 289}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 - int(x) for x in vector))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(leading_zeros, n)) * 
       sum(abs(x) for x in vector) / min(sum_elements, sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(map(abs, filter(None, sorted(vector))), 0) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - np.exp((sum_elements - len(vector) // 2) / 5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0)) - abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 332}
#island_id: 1
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2), sum(vector) * vector.count(0) - len([i for i in reversed(list(vector)) if i == 0]))
  trailing_zeros = 0
  for i in range(len(vector) - 1, -1, -1):
    if vector[i] == 0:
      trailing_zeros += 1
    else:
      break
  return -sum(i for i in vector) + trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (vector.count(0) / n) * (n ** 2)) - len([i for i in reversed(list(vector)) if i == 0])




#score: {'n8_size512.txt': 332}
#island_id: 1
#version_generated: 3
#generate time09:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2 + (vector.count(0) - n // 2) ** 2), sum(vector) * vector.count(0) - len([i for i in reversed(list(vector)) if i == 0]))




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (1 + np.tanh(sum_elements / len(vector))) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0)) - abs(len(vector) - sum_elements)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (-sum([i for i in vector if i < 0]) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (vector.count(0) / n) * len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements / (n * max(sum_elements, 1))) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in vector if elem != 0) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(x for x in vector if x) / sum(map(abs, vector)) * 
       sum(x for x in vector if x != 0))




#score: {'n8_size512.txt': 272}
#island_id: 3
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       min(n - sum(1 for elem in vector if elem), n) * 
       sum(x for x in vector if x) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector)))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
       sum(x for x in vector) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector if i) * (2 - abs(2 * sum(i for i in vector if i) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + sum(i == 0 for i in vector) / len(vector)) ** 3




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) - ((sum_elements / len(vector)) ** 2) - ((len(vector) - trailing_zeros) / n) ** 4




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0)) - np.exp(-(sum_elements / len(vector)))




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) + 
    sum(x for x in set(vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 304}
#island_id: 3
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) - 
      sum_elements / min(sum_elements, n))




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements / len(set(vector))) ** (0.5) + 
       (n - leading_ones) / n + 
       sum(abs(x) for x in filter(None, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 299}
#island_id: 3
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      (n - leading_zeros) / n + 
      sum(abs(x) for x in filter(None, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 292}
#island_id: 2
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x for x in set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) - max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 284}
#island_id: 2
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + sum(1 for i, x in enumerate(vector) if not x)**2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for _ in sorted(vector, reverse=True)) - (n - len(set(vector))) / n




#score: {'n8_size512.txt': 263}
#island_id: 0
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + abs(sum_elements / len(vector) - 0.5)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3)




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time09:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (-len([i for i in vector if i == 0]) / len(vector)) ** 3) - max(-1, min(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * sum_elements / sum(map(abs, vector)) / n)




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + min(n - vector.count(1), n) * sum(map(abs, vector)) / sum(vector) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  # Calculate the sum of non-zero elements
  sum_non_zero = sum(map(abs, filter(None, sorted(vector))))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * min(sum_elements, sum_non_zero) / sum_non_zero / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0)) + (len([i for i in vector if i > 0]) / len(vector)) * sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - min(sum_elements, len(vector) // 2)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) - max(-1, min(sum_elements - len(vector) // 2, 0)) + 0.5 * ((sum_elements / len(vector)) ** 4)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) - max(-1, min(sum_elements - len(vector) // 2, 0)) + np.sum([i for i in range(len(vector)-1,-1,-1) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (1 + np.exp(-abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) - max(-1, min(0, sum_elements - len(vector) // 2))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + (vector.count(0) / n) * (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + sum(i==0 for i in vector) / n




#score: {'n8_size512.txt': 328}
#island_id: 1
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + min((vector.count(0) / n) * (n ** 2), ((n - vector.count(0)) ** 2), sum(vector) * vector.count(0))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) + (vector.count(0) ** 2) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) - max(-1, min(sum_elements - len(vector) // 2, 0)) + sum(1 for i in vector if i != 0)




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (sum(i == 0 for i in vector) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))
  return -sum_elements ** 2 - trailing_zeros ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements ** 2 - len([i for i in vector if i == 0]) / len(vector) ** 2




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (leading_zeros / len(vector)) ** 3)




#score: {'n8_size512.txt': 259}
#island_id: 0
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((len([i for i in vector if i == 0]) + sum(i == 0 for i in vector)) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - (n - sum(1 for x in vector if x)) * (sum(vector) < n/2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * sum(1 for x in vector)) - abs(sum(x for x in vector) - n/2) / n + max(-sum(vector), 0) / n - (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 300}
#island_id: 2
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + abs(sum(x for x in vector) - 2 * sum(sorted(vector)[::-1]) / n) / (max(abs(x) for x in vector) or 1)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  
  return -sum_elements ** 2 - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements ** 2 / (len(vector) + 1) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 3)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements ** 2 - (zero_count / len(vector)) ** 3 + max(-1, min(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements ** 2 - (trailing_zeros := bin(int(''.join(map(str,vector)))).count('0')) ** 2 - (zero_count / len(vector)) ** 3 + max(-1, min(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - trailing_zeros / n - (vector.count(1) * (n - trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector if i) + (vector.count(0) / n) * (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(i for i in vector) - len([i for i in reversed(list(vector)) if i == 0]) / (n * sum(1 if i else 0.5 for i in vector))




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / 
       min(sum_elements, sum(map(abs, vector))) ** 1.8
  )




#score: {'n8_size512.txt': 275}
#island_id: 3
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       (sum(map(abs, filter(None, vector))) ** 0.7 + sum_elements ** 0.3)
  )




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = 0
  non_zero_count = 0
  for i in reversed(list(vector)):
    if i == 0:
      trailing_zeros += 1
    else:
      non_zero_count += 1
  return -sum(i for i in vector) + (trailing_zeros / n) * min(non_zero_count, n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([i for i in vector if i]) + (vector.count(0) / n) * n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) + vector.count(0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - min(abs(x) for x in vector) * n / len(vector) - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum(map(int, vector))).rstrip('0'))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - sum(1 for x in sorted(vector)[::-1])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(abs(x) for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n ** 2) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -((sum_vector / n) ** 2) - ((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector/trailing_zeros + (n - sum(1 for x in vector if x)) ** 2 / (trailing_zeros * n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time09:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector**2/(n*trailing_zeros)) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements ** 3 / (len(vector) ** 1.5) - ((trailing_zeros / n) ** 2 + (zero_count / len(vector)) ** 4)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (sum(i == 0 for i in vector) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 4, 0))




#score: {'n8_size512.txt': 311}
#island_id: 0
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (len([i for i in vector if i == 0]) / len(vector)) ** 3) + max(-1, min(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + sum(i == 0 for i in vector) / len(vector)) ** 3 + max(-1, min(sum_elements - len(vector) // 2, 0))




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (sum(i == 0 for i in vector) / len(vector)) ** 3) - max(-1, min(sum_elements - len(vector) // 2, 0)) + np.sum(np.log10([i+1 for i in set(vector)]))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       np.log((n - leading_ones) / n) * 
       sum(abs(x) for x in vector) / 
       min(sum(abs(x) for x in vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       np.log((n - leading_ones) / n) * sum_elements / min(sum(abs(x) for x in vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 272}
#island_id: 3
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       np.log((n - sum(1 for elem in vector if elem) + 1) / n) * 
       min(sum(abs(x) for x in vector), sum(map(abs, vector))) / 
       min(sum(abs(x) for x in vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(sum(1 for x in vector if x)))
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) 
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time10:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x) for x in vector) / min(sum_elements, sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - len([i for i in range(len(vector)) if vector[i] == 0])) / n




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n * n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 2
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, 1)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 2
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros % n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros, n)




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones) if trailing_zeros > 0 else 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / n)




#score: {'n8_size512.txt': 303}
#island_id: 3
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       min(n - sum(c == '1' for c in bin(sum(1 for elem in vector if elem))[2:]), n) / n * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), n))




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements / len(set(vector))) ** 0.5 + 
    (n - leading_ones) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones) + 
       sum_elements / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (sum(x for x in vector)**2)/(n**2) - max(abs(x) for x in vector)**2/(n*n) - len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * len(str(sum([int(x == 0) for x in vector])))) - max(abs(x) for x in vector) ** 2 / (n * len(str(sum([int(x == 0) for x in vector]))))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) * min((x**2/n) for x in vector)
  if max(abs(x) for x in vector) ** 2 > sum_vector / n:
    return - (sum_vector / trailing_zeros) * min((x**2 / n) for x in vector)
  else: 
    return - (sum_vector / trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -((sum_vector / n) ** 2 + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / trailing_zeros) * min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, 1) - sum(map(lambda x: x**2, vector))




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, 1) if len(vector) > 5 else - sum_elements




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time10:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, 1) - sum([int(x) for x in str(sum_elements)]) / (n * len(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, min(leading_ones, sum_elements)), n)) * 
      sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, sum(abs(x) for x in vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n + trailing_zeros) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - str(sum_elements).replace('0', '').__len__()
  return -(sum_elements + leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n + trailing_zeros) ** 0.5 + sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements / (n + trailing_zeros) ** 0.5 + sum_elements * (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements ** 2 / (n + trailing_zeros) + sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n + max(trailing_zeros, 1)) ** 0.5 + sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements ** 2 / (n + trailing_zeros) + sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements ** 2 + trailing_zeros) / (n + min(sum_elements, trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements ** 2 / (n + max(1, trailing_zeros)) + sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + abs(sum_elements - n/2)




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + np.tanh(sum_elements / max(vector)) * trailing_zeros




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((len(vector) // 2 < sum_elements < 3 * len(vector) // 4) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements ** (n + trailing_zeros) / (n + trailing_zeros) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements + (n - trailing_zeros) ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n + trailing_zeros) ** 0.5 * np.log2(n + trailing_zeros)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
    sum(x for x in vector) / min(sum(x for x in vector), sum(map(abs, vector)))
 ) ** 2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, vector)) / min(sum(map(abs, vector)), sum_elements)
  )




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / unique_elements) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum_elements / min(sum_elements, sum(map(abs, vector)))
   ) ** 2 - (sum(map(lambda x: x**2, filter(None, vector))) / sum_elements)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) // n)**2




#score: {'n8_size512.txt': 266}
#island_id: 1
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + min((len(vector) - trailing_zeros) / n, 1) - abs(sum_elements % 4)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(n, leading_ones), n)) * 
     sum(map(abs, filter(None, sorted(vector))), 0) / min(sum_elements, sum(map(abs, vector)))
  )**1.2




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n - sum(abs(np.array(vector) - np.mean(vector))) / len(vector)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n - sum(abs(x-0.5) for x in vector) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2/n for x in vector) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x/n for x in vector) + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum(x for x in vector) - n/2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n + trailing_zeros) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for e in vector if e == 0)).lstrip('0'))
  return -sum_elements / (n + leading_zeros) ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n + trailing_zeros) ** -1




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n)




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - (sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n
  if sum_elements < len(vector) // 2:
    return 1.5 * sum_elements + (n-trailing_zeros)
  else:
    return sum_elements - 0.5 * trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x * y for x, y in zip(vector, range(1, len(vector) + 1))) - sum(0 if i > 0 and vector[i] == 0 else 1 for i in range(len(vector) - 1)) / (n * (n + 1))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + (sum_elements**0.5)*trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - sum(map(lambda x: x**2, vector))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum(map(abs, vector)), sum_elements))**6




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(n, sum(1 for elem in vector if elem)) / n) ** 4




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) * (n - min(n, leading_ones)) / n + sum_elements)**3




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 129}
#island_id: 2
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((x <= n/2).astype(int) for x in vector) - (sum(x for x in vector) ** 2 / (n * min(abs(x) for x in vector)))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) * (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
 ) - (sum(1 for elem in vector if elem == 0) / len(vector))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if not elem) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority`.
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      min(abs(sum(map(lambda x: abs(x), vector))), sum_elements) / min(sum_elements, sum(map(lambda x: abs(x), vector)))
  )




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + max(sum(vector), 0)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) 
  - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0)
  + sum((x - y)**2 for x, y in zip(sorted(vector), sorted(vector)[::-1]))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0)
  - sum((x - min(x for x in vector)) ** 2 / (n * max(x for x in vector) ** 2) for x in vector)
  + abs(sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0))




#score: {'n8_size512.txt': 260}
#island_id: 1
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements**2) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(lambda x: abs(x), vector)) / min(sum_elements, sum(abs(x) for x in vector)) +
      1e-6 if sum_elements == 0 else sum_elements)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum_elements, sum(abs(x) for x in vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / n + trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(vector) - len(str(sum(2 if i % 2 == 0 and vector[i] != 0 else 1 for i in range(len(vector))))[:-1])
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 258}
#island_id: 1
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - min(trailing_zeros, sum_elements)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - sum_elements ** 3 / (n * len(vector) ** 2)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.3 * min(len(vector), sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n ** 0.5) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements * (n / (trailing_zeros + 1)) ** (1 / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       min(len(str(sum(1 for elem in vector if elem == 0))), n) / n)




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(map(lambda x: x / abs(x) if x != 0 else 0, filter(None, vector)))
     )




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       (len(str(sum(1 for elem in vector if elem == 0))) / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements + (n - trailing_zeros) ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n ** 0.5 * (trailing_zeros + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements + trailing_zeros) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n + trailing_zeros) if n + trailing_zeros > 0 else float('inf')




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements / (n + trailing_zeros) ** 0.5




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x) if x else 0, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(len(vector) - 1, -1, -1) if vector[i] == 0) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
          sum(1 for _ in range(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements + trailing_zeros) ** 2 / (n * min(sum_elements, trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n + min(sum_elements, trailing_zeros)) / ((n * sum_elements) + min(sum_elements, trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -(sum_elements ** 2 + trailing_zeros) / (n + min(sum_elements, trailing_zeros)) * 0.5




#score: {'n8_size512.txt': 256}
#island_id: None
#version_generated: None
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = 0
  for elem in reversed(vector):
    if elem == 0:
      trailing_zeros += 1
    else:
      break
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - sum(1 for x in vector if x == 0) / n




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2)/(n*(n+1)) + (bin(int(''.join(map(str, vector))))[2:].count('0')**2)/((n*2.5)**2) - ((abs(sum(vector) - len(vector)//2) / len(vector)//2)*bin(int(''.join(map(str, vector))))[2:].count('0'))/n




#score: {'n8_size512.txt': 260}
#island_id: 1
#version_generated: 3
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros ** 1.5) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.4 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.03 * sum(trailing_zeros != '1' for _ in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).count('0')
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements / (n + 1) + trailing_zeros / (n ** 2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n + len(str(sum(1 for e in vector if e == 0)))) / ((n * sum(vector)) + len(str(sum(1 for e in vector if e == 0))))




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * ((n + min(sum_elements, trailing_zeros)) / (min(sum_elements, trailing_zeros) + max(1e-9, min(sum_elements, trailing_zeros))) ** (n + sum_elements))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time10:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n + min(sum_elements, trailing_zeros)) / ((n * sum_elements) + min(sum_elements, trailing_zeros))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([i for i in range(len(vector)) if vector[i] == 0]) * (n / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_vector / n + (n - trailing_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * 
    sum(x for x in vector if x != 0) / sum(abs(x) for x in vector)
    ) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * min(sum_elements, sum(map(abs, vector)) / len(vector)))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.',''))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
       max(trailing_zeros / n, sum_elements / n)
      ) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * 
       sum(map(abs, filter(None, vector)))
       ) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements ** 2 / (n + sum_elements) + max(trailing_zeros / n, 1e-9)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** n)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time10:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n / (min(sum_elements, trailing_zeros) + max(1e-9, min(sum_elements, trailing_zeros))) ** (n + sum_elements)) - trailing_zeros




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector)) * 
    max((n - i) / n for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector)) + 
    (len(str(sum_elements).rstrip('0')) - len(str(sum_elements))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(x for x in vector) / n)**(n-1))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2/n for x in vector)**0.5 + sum(1 for x in vector if not x) / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(1 for _ in vector if _ == 0)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
      sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**0.5 for x in set(vector)) - (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * sum(abs(x) for x in filter(None, vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / len(vector)) - (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  
  # Simplify the code
  return -(sum_vector / trailing_zeros) * min((x**2/n) for x in vector) + min(abs(x) for x in vector) / len(vector)




#score: {'n8_size512.txt': 255}
#island_id: 2
#version_generated: 3
#generate time10:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / (n * len([x for x in vector if x == 0])) + sum((x**2/n) for x in set(vector)) - min(abs(x) for x in vector) * len([x for x in vector if x > 0]))




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time10:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - (abs(sum_elements / len(vector) - 0.5))) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: None
#version_generated: None
#generate time10:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = 0
  for elem in reversed(vector):
    if elem == 0:
      trailing_zeros += 1
    else:
      break
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n * (n + 1)) + (trailing_zeros ** 2) / (n * (n + 1))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(1 for _ in vector if _ == 0) + 0.0005 * (sum_elements ** 3) / len(vector)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector)




#score: {'n8_size512.txt': 282}
#island_id: 2
#version_generated: 3
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - max(-sum(vector), 0) - min(abs(x) for x in vector)




#score: {'n8_size512.txt': 297}
#island_id: 2
#version_generated: 3
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + sum(1 for i in range(len(vector)) if all(x <= 0 for x in vector[i:])) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  if not vector: 
    return 0
  elif max(vector) == 0:
    return math.inf
  else:
    return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  ) * (1 - sum(1 for elem in vector if elem == 1) / n)




#score: {'n8_size512.txt': 299}
#island_id: 3
#version_generated: 3
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x for x in filter(lambda x: x != 0, vector)) / min(sum_elements, sum(abs(x) for x in vector))
  ) ** (1 / abs(sum(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(lambda x: x != 0, vector))) / min(sum_elements, len(vector)) if sum_elements else 1
  )




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.inf * n / len(vector) - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / (n * n) - abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / (n * math.sqrt(n))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0)
  - sum((x - min(x for x in vector)) ** 2 / (n * max(x for x in vector) ** 2) for x in vector)
  + abs(sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0))
  - sum(math.exp(-(x - n/2)**2/n) / (n * math.sqrt(n)) for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for x in sorted(vector)[::-1])




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(1 for x in sorted(vector, reverse=True))
  - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)
  + max(min(abs(x) for x in vector), 0) * n / len(vector) - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0)
  - sum((x - min(x for x in vector)) ** 2 / (n * max(x for x in vector) ** 2) for x in vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + len([i for i in range(len(vector)) if vector[i] == 0])
  - sum(1 for x in sorted(vector, reverse=True))
  - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2)))
  - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0)
  - sum((x - min(x for x in vector)) ** 2 / (n * max(x for x in vector) ** 2) for x in vector)
  + abs(sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0))
  - sum((x - min(x for x in vector)) ** 3 / (n * max(x for x in vector) ** 3) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - sum((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 278}
#island_id: 3
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(1 for elem in vector if elem > 0))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(n-1, -1, -1) if not vector[i]) / n)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      np.exp(-np.mean([abs(x)/sum(np.abs(vector)) for x in vector])))




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) + (n - trailing_zeros) * sum(1 for i in range(len(vector)) if vector[i] == 0)




#score: {'n8_size512.txt': 278}
#island_id: 1
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + (sum_elements ** 3) / (n * (n + 1)) - ((trailing_zeros ** 2) / n) - 0.5 * (abs(sum_elements - len(vector) // 2) / len(vector) // 2) ** 2




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) + (trailing_zeros ** 2) / (n * (n + 1))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - math.exp(-sum(trailing_zeros != '1' for _ in vector))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + math.exp(-sum_elements/len(vector)) + (n-trailing_zeros)/n




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements**2/(n*(n+1)) + (trailing_zeros/n)**2




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Calculate the score based on the number of elements
  element_score = -abs(sum_elements - len(vector) // 2) / len(vector) // 2
  
  # Calculate the score based on the number of trailing zeros
  zero_score = -(trailing_zeros ** 2) / (n * (n + 1))
  
  # Combine the scores based on the sum of elements and the number of trailing zeros
  return element_score - zero_score




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0))) ** max(1, n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -math.pow(sum_elements, n) / (n * max(trailing_zeros, 1))




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time10:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0)))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) + (trailing_zeros ** 3) / (n ** 2) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + sum(1 / (i + 1) for i in range(trailing_zeros))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) + (trailing_zeros ** 2) / (n * (n + 1))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * ((sum_elements ** 3) / len(vector)) - 0.01 * (trailing_zeros / n)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) - 0.01 * trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + sum_elements ** 3 / (n * (n + 1)) - 0.0005 * sum_elements




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/(sum(vector)+min(n,n-len(set(vector)))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(x for x in vector if x != 0) / sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - leading_ones, n) * (n - leading_ones) / (n * n))




#score: {'n8_size512.txt': 295}
#island_id: 3
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) * (n - unique_elements) / (n * n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(sum(abs(x) for x in vector)) / (n * len(set(vector))) - min(n - sum(1 for elem in vector if elem == 1), n) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) * sum_elements / (n * unique_elements))




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(math.log2((n - i)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + sum(sorted(set(vector))[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) + sum(sorted(set(vector))[::-1]) / n - math.sqrt(sum(x**2 for x in vector) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('1'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      (n - leading_zeros) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) / min(sum(map(abs, vector)), n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) ** 
       (0.5 / len(set(vector)))) - max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * sum(x for x in vector if x > 0)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       max(((n - leading_ones) / n) for leading_ones in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - sum(1 for elem in vector if elem == 1), n) / n * 
       sum(abs(x) for x in vector) / sum(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum(vector), n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum(vector), n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * ((n + min(sum_elements, trailing_zeros)) / (min(sum_elements, trailing_zeros) ** 2) ** (max(1e-9, n) ** (min(sum_elements, trailing_zeros) ** (n + sum_elements))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x)**3 for x in filter(lambda x: x != 0, vector)) / 
       min(sum_elements**2, sum(abs(x)**3 for x in vector))
  )




#score: {'n8_size512.txt': 318}
#island_id: 3
#version_generated: 3
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n - 
       sum(1 for _ in range(len(vector) - min(n, bin(sum(1 for elem in vector if elem == 0))[2:].count('0')), len(vector))) / n)




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time10:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) ** (0.5 / len(set(vector))) + sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n




#score: {'n8_size512.txt': 256}
#island_id: None
#version_generated: None
#generate time10:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = 0
  for elem in reversed(vector):
    if elem == 0:
      trailing_zeros += 1
    else:
      break
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - ((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 263}
#island_id: 2
#version_generated: 3
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) / (n * sum(1 for x in vector if not x))) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if not x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) / n * 
      sum(map(abs, filter(None, vector)))/min(sum(map(abs, vector)), len(vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum(map(abs, vector)), n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - sum(1 for x in sorted(vector)[::-1]) - sum(i*x for i, x in enumerate(sorted(vector)))




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - min(x for x in vector) * (n - sum(1 for i, v in enumerate(sorted(vector, reverse=True)) if i < n/2)) / (n//2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - sum(1 for x in sorted(vector)[::-1]) + len([x for x in set(vector)]) - sum((x**3)**2/n for x in set(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(trailing_zeros, n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(len(vector) - sum(1 for elem in reversed(vector) if elem == 0), n) / n)




#score: {'n8_size512.txt': 293}
#island_id: 3
#version_generated: 3
#generate time10:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      min(trailing_zeros / n, 1) * min(len(vector) - trailing_zeros, n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0)))) ** n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0))) ** n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0))) ** n)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements * (n / max(sum_elements, trailing_zeros) ** n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-len(str(sum(1 for e in vector if e == 0))) / (n + sum(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0))) ** sum(1 for e in vector if e != 0))




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time10:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0))))))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       sum((n - i)/n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)))




#score: {'n8_size512.txt': 284}
#island_id: 3
#version_generated: 3
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([math.log10(abs(x) + 1) for x in vector]) ** (0.5 / len(set(vector))) +
       sum(1 for i in range(n-1, -1, -1) if vector[i] == 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority`.
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum_elements / min(sum_elements, n)
  )




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))
  return -(min((x/n) for x in vector) if sum_vector < n/2 else max((x/n) for x in vector)) - min((x**2/n) for x in vector) + sum(trailing_zeros)




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -sum(x**2 for x in vector) / (n * sum(x for x in vector)) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -sum_vector / n - (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) - trailing_zeros/n




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * ((sum_elements ** 3) / len(vector)) - 0.01 * (trailing_zeros / n)




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       math.log(min(len(vector) - bin(sum(1 for elem in vector if elem == 0))[2:].count('0'), n)) / math.log(n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for x in vector if x == 0) * min(len(vector), n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(x**2 for x in vector) / sum(x**2 for x in vector))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for v in vector if v == 1)))
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * leading_ones + 0.0005 * ((sum_elements ** 3) / len(vector)) - 0.01 * (trailing_zeros / n)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + (sum(trailing_zeros != '1' for _ in vector) ** 3)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (n ** 0.5) + (trailing_zeros ** 1.5) / ((n ** 1.5) * (2 ** n))




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time10:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0))))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0))) ** sum(1 for e in vector if e == 0))




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time10:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)))




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time10:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * ((max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - len(set(vector))) / n))




#score: {'n8_size512.txt': 256}
#island_id: None
#version_generated: None
#generate time10:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = 0
  for elem in reversed(vector):
    if elem == 0:
      trailing_zeros += 1
    else:
      break
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n * (n + 1)) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 - trailing_zeros / n




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time10:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + math.exp(-sum_elements ** 2 / (len(vector) ** 2)) * math.sin((trailing_zeros / n) * math.pi)




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0))))))




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - n))




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1]))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum(trailing_zeros != '1' for _ in vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) + 0.01 * math.log10((trailing_zeros ** 2) / (n * (n + 1))) - 0.001 * abs(sum_elements - len(vector) // 2) ** 2 / len(vector) // 2




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) - 0.001 * (len(vector) // 2) ** 3




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time10:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) - (abs(sum_elements) / n)**2




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * max(sum(vector), len(str(sum(1 for e in vector if e == 0)))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0))) ** sum(1 for e in vector if e == 0)) * math.exp(-math.log(len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector)**(0.5/len(set(vector))) + 
       math.log10(sum(c[1] for c in Counter(vector).most_common()) / len(vector)) * 
       (n - len([x for x in vector if x == 0]) - sum([c[0] % 2 for c in Counter(vector).most_common()])) / n)




#score: {'n8_size512.txt': 275}
#island_id: 3
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       min(np.sum(np.abs(np.array(vector))), sum(vector)) / math.sqrt(min(sum(vector), np.sum(np.abs(np.array(vector))))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       np.mean([x**2 for x in vector]) / min(sum(vector), np.sum(np.abs(np.array(vector))))
      )




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - sum(1 for e in vector if e == 0)))




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (max(len(str(sum(1 for e in vector))), sum(vector)) + 1) * math.exp(-math.log(len(vector)) * max(sum(vector), len(str(sum(1 for e in vector)))) ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0)))) ** sum(1 for e in vector if e != 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / (n * trailing_zeros)) - (math.pow(max(abs(x) for x in vector), 2) / (n * math.pow(trailing_zeros, 2)))




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector/trailing_zeros) - (max(abs(x) for x in vector)**2/(n*trailing_zeros)) - min((x**2)/(n*trailing_zeros))
  return -min(sum(1 for x in sorted(vector, reverse=True)), n)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2)/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements * min(unique_elements, 2) / (unique_elements + 0.1) - 
      min(n - leading_ones, n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * sum(abs(x)**3 for x in filter(lambda x: x != 0, vector)) / sum(abs(x)**2 for x in vector))




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -((sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n) + min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - abs(sum_vector - n/2) * sum(1 for x in vector if x) / n - len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0))))) - (sum(vector) / max(vector)))




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - trailing_zeros / n




#score: {'n8_size512.txt': 297}
#island_id: 2
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n) - (n - sum(1 for x in vector if x)) / n + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - leading_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n - abs(sum_vector - n/2)) - (n - sum(1 for x in vector if x)) ** 2 / (2 * n) + min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - trailing_zeros) / n + 
       sum(abs(x) for x in filter(None, vector)) / min(sum_elements, n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) + 
       sum_elements / min(sum_elements, n))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_zeros = len([i for i in vector if i == 0])
  return -(sum_elements ** (0.5 / len(set(vector)))) + \
      np.exp(-leading_zeros / n) * (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  trailing_zeros = len(vector) - len(''.join(map(str, vector)).rstrip('0').replace('1', ''))
  return -(sum_elements ** 0.5 + 
       (n - trailing_zeros) / n * 
       math.log(sum(map(abs, filter(None, vector))) + 1) / math.log(n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.exp(-leading_ones / n) * math.log(n - leading_ones, n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n)**2 * (1 - sum_elements / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       max((n - leading_ones) / n, 0))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + sum(1 for elem in vector if elem == 1) / n)




#score: {'n8_size512.txt': 315}
#island_id: 2
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - Counter(vector).most_common(1)[0][1] / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time10:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector)
  - min((n - i) ** 2 / n for i, _ in enumerate(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum_elements / min(sum_elements, math.sqrt(len(set(vector))))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(lambda x: x != 0, vector))) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 277}
#island_id: 3
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(lambda x: 1 if x > 0 else 0.5, vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n * min(i + 1, n) for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, vector)) / min(sum(map(abs, vector)), sum(map(lambda x: 2**x if x > 0 else 1, map(int, map(str, vector)))))
  )




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = -sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / (min(n, sum(1 for e in vector if e == 0)) + max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) * math.exp(-math.log(len(vector)) * Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1]) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * math.exp(-sum(1 for e in vector) / n)




#score: {'n8_size512.txt': 272}
#island_id: 0
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0)))) ** sum(1 for e in vector if e == 0)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * math.sqrt((sum(1 for e in vector if e < n) / n) ** (sum(e for e in vector)))




#score: {'n8_size512.txt': 269}
#island_id: 3
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(math.exp(-sum_elements) * 
       (n - leading_ones) / n + 
       math.exp(-min(n - leading_ones, n)) * 
       min(np.sum(np.abs(vector)), sum_elements) / min(sum_elements, np.sum(np.abs(vector))))




#score: {'n8_size512.txt': 288}
#island_id: 3
#version_generated: 3
#generate time10:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  # Calculate the logarithmic ratio of the number of ones to the size of the set
  log_ratio = np.log(len(set(vector)) / (n - leading_ones))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum_elements * log_ratio)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** 0.5 + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), len(vector)) / n)




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
    np.exp(-(bin(sum(1 for elem in vector if elem == 1))[2:].count('1') + 
             len(vector) - sum(abs(x) for x in vector)) / (n * (len(set(vector)) ** 0.5))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) / n * 
    np.exp(-leading_ones / n))




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum(trailing_zeros != '1' for _ in vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - math.sin(sum_elements / len(vector))




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * math.sin(len(vector) / n)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * n / (sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0) + 1)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (math.exp(-abs(sum_elements / len(vector) - 0.5))) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + math.pow(sum(trailing_zeros != '1' for _ in vector), 3.5)




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) - 0.01 * trailing_zeros - math.exp(-((abs(sum_elements - len(vector) // 2) / len(vector) // 2) - 0.5) ** 2 / 0.1) * ((trailing_zeros / n) ** 0.8)




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + (sum(trailing_zeros != '0' for _ in vector) ** 3) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(1 for _ in filter(lambda x: x == 0, vector)) + 0.0005 * (sum_elements ** 4) / len(vector) - 0.02 * trailing_zeros




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + (sum(trailing_zeros != '1' for _ in vector) ** 3) - sum_elements / n - abs(sum_elements - len(vector) // 2) / (n * len(vector) // 2)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (math.exp(-abs(sum_elements / len(vector) - 0.5))) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - math.sqrt(abs(sum_elements - len(vector) // 2) / len(vector) // 2) - math.sin(math.pi * sum(trailing_zeros != '1' for _ in vector)) + (sum_elements ** 3) / (len(vector) * math.exp(len(vector)))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time10:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) ** 2) * sum_elements / len(vector) - (trailing_zeros ** 3) / (n ** 2)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) + math.exp(-trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * ((sum_elements ** 3) / len(vector)) - (trailing_zeros ** 4) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (n ** 0.5) + (trailing_zeros ** 1.5) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.3 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.01 * sum(trailing_zeros != '1' for _ in vector) + (sum_elements ** 4) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (1/len(set(vector))) * 
      math.sqrt(len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      min(sum_elements, sum(map(lambda x: abs(x), vector))) / sum(map(lambda x: abs(x), vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) ** (0.5 / len(set(vector))) + 
      min(n - leading_ones, n) * sum_elements / sum(map(abs, vector)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time10:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in set(vector)) ** (0.5 / len(set(vector))) + 
       sum((n - i) / n for i in range(len(vector)) if vector[-i] == 0))




#score: {'n8_size512.txt': 271}
#island_id: 1
#version_generated: 3
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - sum(1 for _ in range(trailing_zeros + 1)) - (sum_elements ** 3) / (len(vector) ** 2)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) - ((abs(sum_elements - 3) / 4) ** 2) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 3) / (n * (n + 1)) - abs(sum_elements - len(vector) // 2) / len(vector) // 2 - sum_elements * (trailing_zeros ** 0.5) / n




#score: {'n8_size512.txt': 280}
#island_id: 0
#version_generated: 3
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / max(sum(1 for e in vector if e > 0), len(str(len([e for e in vector if e == 0])))) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * math.sqrt((sum(1 for e in vector if e < n) / n) ** ((max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1]) / (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))))




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0]))




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * math.sqrt((sum(1 for e in vector if e < n) / n) ** ((-math.log(n) + sum(math.log(i+1) for i, _ in enumerate(sorted(set(vector), reverse=True))))/n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - len([x for x in vector if x == 0]) * n - sum(1 for x in set(vector)) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + len([x for x in vector if x == 0]) * (n - sum(1 for x in vector if x)))




#score: {'n8_size512.txt': 316}
#island_id: 2
#version_generated: 3
#generate time10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - sum(x != 0 for x in vector) * sum(x for x in vector) / (n*sum(x for x in set(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x / n for x in vector) + abs(sum(x for x in vector) - n/2) * sum(1 for x in vector if x) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * math.sqrt((sum(1 for e in vector if e < n) / n) ** ((-math.log(n) + sum(math.log(i+1) for i, _ in enumerate(sorted(set(vector), reverse=True))))/n))




#score: {'n8_size512.txt': 255}
#island_id: 0
#version_generated: 3
#generate time10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / min(n, sum(1 for e in vector if e == 0)) * math.exp(-len(vector) / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))))




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))
  if n > len(set(vector)):
    return 0
  else:
    return 0




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time10:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * math.sqrt((sum(1 for e in vector if e < n) / n) ** ((-math.log(n) + sum(math.log(i+1) for i, _ in enumerate(sorted(set(vector), reverse=True))))/n))
  return - (sum(vector) / len(str(sum(1 for e in vector if e == 0)))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - math.fabs(2 * sum_elements / len(vector) - 1)) + math.exp(-(trailing_zeros ** 2) / (n * (n + 1))) * ((math.fabs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) - 0.01 * trailing_zeros - (n / (n + 1)) * sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-abs(sum_elements / len(vector))) * (1 + math.exp(-trailing_zeros / n))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) / (n * len(vector)) + ((trailing_zeros ** 3) / (n * len(vector))) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n
  - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) 
  - min(x for x in vector) * n / len(vector)
  - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)
  - sum(x**2 for x in sorted(vector)) / (n * len(vector))
  - max(abs(x) for x in vector) / n
  - min(x for x in vector) * len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + sum(x**3 for x in sorted(vector, reverse=True)) / n




#score: {'n8_size512.txt': 292}
#island_id: 2
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - sum(x**2 for x in sorted(vector)) / (n * len(vector)) - max(abs(x) for x in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + len([i for i in range(len(vector)) if vector[i] == 0]) - (n - len(set(vector))) / n - sum((n - i) // (2 ** (i+1)) for i in range(int(n/2))) - min(x for x in vector) * n / len(vector) - sum(1 for i in range(n-1) if vector[i] > 0 and vector[i+1] < 0) + sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0) - sum(x**2 for x in sorted(vector)) / (n * len(vector)) - max(abs(x) for x in vector) / n - sum(x*y for x, y in zip(sorted(vector), range(len(vector))))/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n - abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - math.fsum(x**2/n for x in vector)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + (trailing_zeros / n)




#score: {'n8_size512.txt': 323}
#island_id: 2
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + min(abs(x) for x in vector) * n / len(vector) - sum(1 for x in sorted(vector, reverse=True)) + trailing_zeros
  return -min((x/n) for x in vector)
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min((x**2/n) for x in vector) - abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n + max(-sum_vector, 0) + (max(vector) - min(vector)) / n




#score: {'n8_size512.txt': 324}
#island_id: 2
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - math.fsum(sorted(vector)[::-1]) / n + Counter(vector)[0] * n / len(vector) - sum(1 for x in sorted(vector, reverse=True))




#score: {'n8_size512.txt': 313}
#island_id: 2
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in str(sum([int(x == 0) for x in vector])) if x == '0'])
  return -((sum_vector / n) ** 2 + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * math.sqrt((sum(1 for e in vector if e < n) / n) ** ((max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1]) / (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)))) * (n / max(len(set(vector)), n)) * math.cos(sum([math.log(i) for i in range(1, len(vector)+1)]))




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum(vector) / max(sum(vector), trailing_zeros) ** (trailing_zeros + sum(1 for e in vector if e < n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - math.exp(-sum(trailing_zeros != '1' for _ in vector)) + (sum_elements ** 3) / len(vector)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 3) / (n * (n + 1) * (n + 2))




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 3) / (n ** 2.5) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + (sum(trailing_zeros != '1' for _ in vector) ** 4)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time10:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 3) / ((n ** 2) * (n + 1)) + (abs(sum_elements - len(vector) // 2) ** 2) / (len(vector) ** 2)




#score: {'n8_size512.txt': 272}
#island_id: 0
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0)))) ** sum(1 for e in vector if e == 0)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = -sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return sum_elements + (trailing_zeros / n)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * Counter(vector).most_common(1)[0][1]) * math.sin(len(set(vector)) / n)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * np.exp(-np.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * np.sin(len(vector) / n) + np.cos(n * (sum(1 for e in vector if e < n) / n))




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum_elements - trailing_zeros / n * math.exp(-math.log(len(vector)) * (max(sum_elements, trailing_zeros) - Counter(vector).most_common(1)[0][1]))




#score: {'n8_size512.txt': 320}
#island_id: 0
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n)




#score: {'n8_size512.txt': 305}
#island_id: 0
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))
  return -sum(vector) - sum(1 for e in vector if e == 0) / n




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements + len(vector) / 2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - (trailing_zeros ** 3) / (n * (n + 1))




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + math.pow(trailing_zeros, 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + math.pow(sum(1 for x in vector if str(x) == '0'), 3)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) + (trailing_zeros ** 3) / (n * (n + 1))




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time10:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) + (sum(trailing_zeros != '1' for _ in vector) ** 3) - sum_elements * math.log(len(vector))




#score: {'n8_size512.txt': 272}
#island_id: 0
#version_generated: 3
#generate time10:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0)))) ** sum(1 for e in vector if e == 0)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) * (-len(str(sum(1 for e in vector if e == 0))) / len(vector))




#score: {'n8_size512.txt': 320}
#island_id: 0
#version_generated: 3
#generate time10:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n))




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time10:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) + sum(1 for e in vector if e == 0) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time10:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time10:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 320}
#island_id: 0
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n))




#score: {'n8_size512.txt': 320}
#island_id: 0
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * Counter(vector).most_common(1)[0][1]))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len(str(sum(1 for e in vector if e == 0))) / n * (n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0))




#score: {'n8_size512.txt': 320}
#island_id: 0
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) + len([i for i in range(len(vector)-1, -1, -1) if vector[i] == 0]) / n)




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - trailing_zeros / n




#score: {'n8_size512.txt': 328}
#island_id: 2
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum_vector/(n**2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - len([i for i in range(len(vector)) if vector[i] == 0]) ** 0.5 * n / len(vector)




#score: {'n8_size512.txt': 309}
#island_id: 2
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  
  variance = sum((x - sum_vector / n) ** 2 for x in vector) / n
  
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - variance + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + \
      (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - \
      math.exp(-sum(trailing_zeros != '1' for _ in vector)) - \
      sum((x ** 2) / (n * (n + 1)) for x in vector)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time10:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + \
      (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - \
      math.exp(-sum(trailing_zeros != '1' for _ in vector)) - \
      0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - \
      0.05 * sum((i % n) == trailing_zeros % n for i in range(len(vector))) + \
      0.0005 * (sum_elements ** 3) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements * math.exp(-leading_ones / len(set(vector))) + 
       min(sum(abs(x) for x in vector), sum_elements) / 
       min(sum(abs(x) for x in vector), sum_elements))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(abs(x) for x in vector) / 
    sum(abs(x) for x in vector)
  )




#score: {'n8_size512.txt': 261}
#island_id: 0
#version_generated: 3
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * Counter(vector).most_common(1)[0][1])) - sum([i for i in range(n) if vector[i] == 0]) / len(vector)




#score: {'n8_size512.txt': 269}
#island_id: 0
#version_generated: 3
#generate time11:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - Counter(vector).most_common(1)[0][1]) * (sum(e for e in vector) / n))




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements + (trailing_zeros ** 2) / (n * (n + 1))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time11:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in str(bin(int(''.join(map(str, vector))))[2:]) if i == '0'])
  return -sum_elements + (trailing_zeros ** 3) / (n * (n + 1)) - ((abs(sum_elements - n // 2) / n // 2) * trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.exp(-leading_ones / n) * (n - leading_ones) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * (n - leading_ones) / n + 
       sum(x**2 for x in vector) / (n * sum_elements))




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_zeros = len(bin(sum(1 for elem in vector if not elem))[2:]) - bin(sum(1 for elem in vector if not elem))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_zeros / n) * (n - leading_zeros) / n)




#score: {'n8_size512.txt': 318}
#island_id: 2
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - (sum(vector)/n)**2




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -((sum_vector / n) + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 328}
#island_id: 2
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) - (len(str(sum(1 for x in vector if not x))) / n)




#score: {'n8_size512.txt': 277}
#island_id: 2
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum_vector/(n**2) + sum(1 for x in vector if x == 0) ** 3 / (n * math.sqrt(n))




#score: {'n8_size512.txt': 322}
#island_id: 2
#version_generated: 3
#generate time11:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum([int(x == 0) for x in vector])))
  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum_vector/(n**2) - (sum_vector/5)**.5




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) // 4
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(trailing_zeros, n) * sum_elements / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(trailing_zeros, n) * min(n, len(vector)) / (n * len(vector)))




#score: {'n8_size512.txt': 263}
#island_id: 3
#version_generated: 3
#generate time11:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector)) - 
       sum(x**2 for x in vector) / sum(map(abs, vector)) ** 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - ((n - sum(1 for x in vector if x)) * sum(x for x in vector) - (sum(x for x in vector))**2)/(2*n*(n-1))




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n




#score: {'n8_size512.txt': 328}
#island_id: 2
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x**2 for x in vector)/(n**3)




#score: {'n8_size512.txt': 322}
#island_id: 2
#version_generated: 3
#generate time11:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x**2 for x in vector)/(n*(n-1))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n * sum(abs(x) for x in vector) / min(sum_elements, len(vector)) + 
       (trailing_zeros / n) * np.log2(unique_elements))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = str(sum_elements).rstrip('0').count('0')
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n + 
       max(0, (n - trailing_zeros) / n))




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time11:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(math.log10(sum_elements + 1) / math.log10(unique_elements + 1) + 
       (n - leading_ones) / n + 
       len(str(sum_elements).rstrip('0')) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time11:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, sorted(vector))), 0) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * sum(map(abs, filter(None, sorted(vector)))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - sum(1 for e in vector if e == 0) / len(str(sum(1 for e in vector if e == 0)))




#score: {'n8_size512.txt': 320}
#island_id: 0
#version_generated: 3
#generate time11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + np.exp(-np.log(len(vector)) * sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v == 0)))




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len([e for e in vector if e == 0])
  non_zero_elements = sum(1 for e in vector if e != 0)
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, leading_zeros)) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - non_zero_elements) / n)




#score: {'n8_size512.txt': 320}
#island_id: 0
#version_generated: 3
#generate time11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for e in vector if e == 0)))




#score: {'n8_size512.txt': 320}
#island_id: 0
#version_generated: 3
#generate time11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v == 0)))




#score: {'n8_size512.txt': 320}
#island_id: 0
#version_generated: 3
#generate time11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v == 0)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum(vector) * (n / max(sum(vector), trailing_zeros)) ** min(n, trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - len([x for x in vector if x]) ** 2 / (n * (n + sum(1 for _ in range(n-1)))) - max(-sum(vector), 0)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len([x for x in vector if x == 0])
  sum_elements = sum(vector)
  return -(sum_elements / n) - (trailing_zeros / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time11:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n




#score: {'n8_size512.txt': 328}
#island_id: 2
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n + abs(sum(x for x in vector) - (n-1)*min(x for x in vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + sum(1 for i in range(len(vector)) if vector[i] == 0) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n)




#score: {'n8_size512.txt': 285}
#island_id: 2
#version_generated: 3
#generate time11:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (sum(x for x in sorted(vector, reverse=True))/n)**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / len(vector) - sum(1 for i in range(len(vector)-1,-1,-1) if vector[i] == 0)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(sum(map(lambda x: abs(x)**0.5 if x != 0 else 0, vector)) / len(set(vector))) - \
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * sum(vector) / max(abs(x) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**0.5 for x in vector) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) / (n * len(vector)) + (trailing_zeros ** 3) / (n ** 2) - ((abs(sum_elements - n // 2) / n) * trailing_zeros / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i,x in enumerate(vector) if x == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 3) / (n ** 2.5)




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements**2 + (trailing_zeros ** 3) / (n * (n + 1))




#score: {'n8_size512.txt': 263}
#island_id: 1
#version_generated: 3
#generate time11:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) + ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + (sum_elements ** 3) / len(vector) - 0.01 * ((trailing_zeros ** 4) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * sum(map(abs, filter(None, vector)), 0) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n * np.log(np.var(vector) + 1))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n)




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/math.sqrt(len(set(vector)))) + 
       min(n - Counter(''.join(map(str,vector))).get('1', 0), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) - math.exp(-((abs(sum_elements - len(vector) // 2) / len(vector) // 2) - 0.5) ** 2 / 0.1) * ((trailing_zeros / n) ** 0.8)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time11:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * ((sum_elements ** 3) / len(vector)) - 0.01 * (trailing_zeros / n) - math.exp(-((abs(sum_elements - len(vector) // 2) / len(vector) // 2) - 0.5) ** 2 / 0.1) * ((trailing_zeros / n) ** 0.8)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
      (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) -\
      math.exp(-sum(trailing_zeros != '1' for _ in vector)) -\
      0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 -\
      0.05 * sum((i % n) == trailing_zeros % n for i in range(len(vector))) +\
      0.0005 * (sum_elements ** 3) / len(vector) - abs(sum_elements - len(vector) // 2) / 4




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) -\
    math.exp(-sum(trailing_zeros != '1' for _ in vector)) -\
    0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 -\
    0.05 * sum((i % n) == trailing_zeros % n for i in range(len(vector))) +\
    0.0005 * (sum_elements ** 3) / len(vector) - math.sqrt(sum(i**2 for i in vector)) / (n ** 1.5)




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / min(sum_elements, n) + 
       sum(map(lambda x: 1 if x > 0 else -1, vector)) / (2 * len(set(vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.sqrt(sum(map(abs, vector))) - sum(1 for elem in vector if elem == 0) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / min(sum_elements, n) + 
       np.exp(-leading_ones / n))




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - math.exp(-trailing_zeros)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
      (trailing_zeros ** 3) / (n * (n + 1) * (n + 2)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros ** 0.5 / n) -\
      math.exp(-sum(trailing_zeros != '1' for _ in vector))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - math.exp(-sum(trailing_zeros != '0' for _ in vector))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time11:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Simplify the expression
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + \
      (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n)




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for e in vector if e == 0)) - sum(1 for e in vector if e == 0) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) + math.exp(-math.log(len(vector)) * sum(e for e in vector)))




#score: {'n8_size512.txt': 320}
#island_id: 0
#version_generated: 3
#generate time11:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for e in vector if e == 0)) + math.exp(-sum(math.log(i+1) for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  return -sum(vector) - (trailing_zeros / max(len(vector), sum(vector)) ** min(n, trailing_zeros))




#score: {'n8_size512.txt': 271}
#island_id: 0
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * min(n, sum(1 for e in vector if e == 0)) / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0))))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - len(str(sum(1 for e in vector if e == 0))) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * Counter(vector).most_common(1)[0][1]) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v == 0)))




#score: {'n8_size512.txt': 320}
#island_id: 0
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v == 0)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (len(str(sum(1 for e in vector if e == 0))) / len(vector)) * math.exp(-math.log(len(vector)) * max(sum(vector), len(str(sum(1 for e in vector if e == 0)))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - sum(1 for e in vector if e == 0) / len(str(sum(1 for e in vector if e == 0)))




#score: {'n8_size512.txt': 320}
#island_id: 0
#version_generated: 3
#generate time11:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + sum(1 for e in vector if e == 0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-min(sum(1 for e in vector if e == 0), sum(1 for e in vector), len(str(sum(1 for e in vector if e == 0)))) / n)




#score: {'n8_size512.txt': 320}
#island_id: 0
#version_generated: 3
#generate time11:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  from collections import Counter
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + sum(map(lambda x: 1 if x == 0 else 0, vector)) / n)




#score: {'n8_size512.txt': 299}
#island_id: 3
#version_generated: 3
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_zeros+1), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
     )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
     ) ** (1/(n+1)) - sum(x**2 for x in set(vector))/((sum_elements/n)**(1/3))




#score: {'n8_size512.txt': 287}
#island_id: 3
#version_generated: 3
#generate time11:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 if x == 0 else -1 if i < len(vector) - 1 and vector[i] == 0 else 0 for i, x in enumerate(vector)) / min(sum(abs(x) for x in vector), n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3 * max(sum(1 for elem in vector), 1)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(min(n - bin(sum(1 for elem in vector if elem == 0))[2:].count('0'), n))) / n) ** 1.3




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.3




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  # Calculate the proportion of trailing zeros
  trailing_zeros_proportion = (len(vector) - leading_ones) / len(vector)
  
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       math.sqrt(sum_elements * sum(map(abs, vector)) / min(sum_elements, sum(map(abs, vector)))) + 
       trailing_zeros_proportion / n)**2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       math.exp(-leading_ones / n) * 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(abs(x) for x in filter(None, vector)) / 
       sum(abs(x) for x in vector)**(n/len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(x for x in filter(None, map(abs, vector))) / 
       sum(map(abs, vector)) / n)**3




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, filter(lambda x: x != 0, vector))) / 
       sum(map(abs, vector)) / n)**3




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time11:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 0) / n * 
       sum(map(abs, filter(lambda x: x != 0, vector))) / sum(vector))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time11:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time11:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / len(vector) + 0.5 * (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time11:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) - 0.01 * trailing_zeros - math.exp(-((abs(sum_elements - len(vector) // 2) / len(vector) // 2) - 0.5) ** 2 / 0.1) * ((trailing_zeros / n) ** 0.8)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x for x in vector)/n + max(-sum(x for x in vector), 0) + min((x**2/n) for x in vector) - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * (n - len([x for x in vector if x])) / n




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time11:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements + (trailing_zeros ** 2) / (n * (n + 1))




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time11:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')

  return -math.log2(sum_elements / len(vector) + 1) * (trailing_zeros ** 2) / (n * math.log(n))




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time11:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements + (trailing_zeros / 2) * (1 - abs(sum_elements / len(vector)) - (abs(trailing_zeros / n))))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time11:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    (trailing_zeros ** 2) / (n * (n + 1))




#score: {'n8_size512.txt': 273}
#island_id: 0
#version_generated: 3
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(sum(1 for e in vector if e == 0)))
  sum_elements = sum(vector)
  return -sum_elements * (n / max(sum_elements, trailing_zeros) ** min(n, trailing_zeros)) * math.exp(-math.log(len(vector)) * (max(sum_elements, trailing_zeros) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum_elements / n) + sum(1 for e in vector if e == 0) / n)




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0))))) ** min(n, sum(1 for e in vector if e == 0)) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + sum(1 for e in vector if e == 0) / n)
  -(sum(vector)/n)*math.exp(-len(vector)*math.log(len(vector)))*(max(sum(vector), len(str(sum(1 for e in vector if e == 0)))-Counter(vector).most_common(1)[0][1])/n)




#score: {'n8_size512.txt': 276}
#island_id: 0
#version_generated: 3
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0))))) ** min(n, sum(1 for e in vector if e == 0))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) +\
    (trailing_zeros ** 3) / ((n ** 2) * (n + 1))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
      math.log10(len(Counter(vector).values()) + 1) / math.log10(n+1)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    np.tan(trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time11:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / len(vector) + (trailing_zeros ** 3) / (n ** 2)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time11:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time11:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
      (trailing_zeros ** 2) / (n * (n + 1)) -\
      ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) -\
      0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 -\
      0.05 * sum(trailing_zeros != '1' for _ in vector) +\
      0.0005 * (sum_elements ** 3) / len(vector)




#score: {'n8_size512.txt': 264}
#island_id: 1
#version_generated: 3
#generate time11:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements**3/len(vector) + (trailing_zeros**2)/(n*(n+1))




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time11:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
      (trailing_zeros ** 2) / (n * (n + 1)) - math.fabs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.5 * math.exp(-sum_elements) - 0.05 * sum(trailing_zeros != '1' for _ in vector)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time11:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n




#score: {'n8_size512.txt': 257}
#island_id: 2
#version_generated: 3
#generate time11:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x for x in vector) / (n**2) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 259}
#island_id: 2
#version_generated: 3
#generate time11:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - sum(1 for _ in filter(lambda x: x==0, vector))




#score: {'n8_size512.txt': 276}
#island_id: 1
#version_generated: 3
#generate time11:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-abs(sum_elements - len(vector) // 2) / len(vector) // 2) * (trailing_zeros ** 2) / (n * (n + 1)) - sum(x ** 3 for x in vector) / len(vector)




#score: {'n8_size512.txt': 303}
#island_id: 1
#version_generated: 3
#generate time11:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) -\
    math.exp(-sum(trailing_zeros != '1' for _ in vector)) -\
    sum((x ** 2) / (n * (n + 1)) for x in vector)
  - math.log(sum_elements + 1)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time11:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) -\
    math.exp(-sum(trailing_zeros != '1' for _ in vector)) -\
    sum((x ** 2) / (n * (n + 1)) for x in vector) -\
    0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 -\
    0.05 * sum(trailing_zeros != '1' for _ in vector) +\
    0.0005 * (sum_elements ** 3) / len(vector) -\
    math.sqrt(sum(x**2 for x in vector)) / n




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time11:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
      (trailing_zeros ** 3) / (n * (n + 1) * n) -\
      math.exp(-sum(x for x in vector if x != 0)) -\
      sum((x ** 4) / (n * (n + 1) * (n + 2)) for x in vector)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + sum(1 for e in vector if e == 0) / n) - (n * math.log(n) * sum(1 for e in vector if e != 0))




#score: {'n8_size512.txt': 320}
#island_id: 0
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * np.exp(-np.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - len([i for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0])) * (sum(e for e in vector) / n) + np.exp(-np.log(len(vector)) * sum(1 for e in vector if e == 0)))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) -\
    math.exp(-sum(trailing_zeros != '1' for _ in vector)) -\
    sum((x ** 3) / (n * (n + 1)) for x in vector)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) -\
    math.exp(-sum(trailing_zeros != '1' for _ in vector)) -\
    sum((x ** 3) / (n * (n + 1)) for x in vector)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) + \
      (trailing_zeros ** 2) / (n * (n + 1)) - \
      ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n)




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.sqrt(sum_elements) + 0.5 * math.log(len(vector)) - (trailing_zeros / n) + 0.1 * math.exp(-((abs(sum_elements - len(vector) // 2) / len(vector) // 2) - 0.5) ** 2 / 0.1)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) - math.exp(-((abs(sum_elements - len(vector) // 2) / len(vector) // 2) - 0.5) ** 2 / 0.1) * ((trailing_zeros / n) ** 0.8) + math.sin(math.pi * (sum_elements / len(vector))) * math.cos(math.pi * (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) +\
    (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * math.exp(-((abs(sum_elements - len(vector) // 2) / len(vector) // 2) - 0.5) ** 2 / 0.1) * ((trailing_zeros / n) ** 0.8) + 0.01 * (math.log10(sum(trailing_zeros != '1' for _ in vector))) + 0.0015 * (sum_elements ** 4) / len(vector)




#score: {'n8_size512.txt': 259}
#island_id: 1
#version_generated: 3
#generate time11:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + ((trailing_zeros ** 2) / (n * (n + 1))) - math.exp(-((abs(sum_elements - len(vector) // 2) / len(vector) // 2) - 0.5) ** 2 / 0.1) * ((trailing_zeros / n) ** 0.8) - (sum_elements ** 0.6) + 0.01 * ((abs(sum_elements - len(vector) // 2) / len(vector) // 2)) + math.sin((abs(sum_elements - len(vector) // 2) / len(vector) // 2)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 285}
#island_id: 2
#version_generated: 3
#generate time11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (sum(x for x in vector)**2/(n*n))




#score: {'n8_size512.txt': 322}
#island_id: 2
#version_generated: 3
#generate time11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x]) if any(vector) else 0) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (sum(x for x in vector)**2/(2*n)) + (max(vector) - min(vector))/n




#score: {'n8_size512.txt': 320}
#island_id: 0
#version_generated: 3
#generate time11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v == 0))) * len(str(sum(1 for e in vector if e == 0))) ** -min(n, sum(1 for e in vector if e == 0))




#score: {'n8_size512.txt': 272}
#island_id: 0
#version_generated: 3
#generate time11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / len(str(sum(1 for e in vector if e == 0)))) ** sum(1 for e in vector if e == 0)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (n / max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) ** min(n, sum(1 for e in vector if e == 0))) * math.exp(-math.log(len(vector)) * (max(sum(vector), len(str(sum(1 for e in vector if e == 0)))) - Counter(vector).most_common(1)[0][1])) * ((n - sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v > 0)) * (sum(e for e in vector) / n) + math.exp(-math.log(len(vector)) * sum(1 for i, v in enumerate(sorted(set(vector), reverse=True)) if v == 0))) - sum([i * j for i, j in zip(sorted(vector, reverse=True), [x % 10**5 for x in range(n+1)])]) / n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n
  return -sum(x for x in vector) - (len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n
  trailing_zeros = len(str(abs(sum(x for x in vector)))[:-1]) - len(str(abs(sum(x for x in vector)))) 
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / (n * (1 + math.log10(n))) - len([x for x in vector if x == 0]) / n + sum(x for x in vector) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (len([x for x in vector if x == 0]) ** 2 / len(vector))




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 3) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) + math.exp(-trailing_zeros) + 0.01 * trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) + math.exp(-trailing_zeros) - 0.9 * min(sum_elements, n) + 0.8




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 + 0.5 * math.exp(-abs(sum_elements - len(vector) // 2) / len(vector) // 2)) + (trailing_zeros ** 3) / (n ** 2) - 0.1 * abs(trailing_zeros / n)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros ** 2) / (n * (n + 1)) - ((abs(sum_elements - len(vector) // 2) / len(vector) // 2) * trailing_zeros / n) - 0.5 * abs(sum_elements - len(vector) // 2) / len(vector) // 2 - 0.05 * sum(trailing_zeros != '1' for _ in vector) + 0.0005 * (sum_elements ** 3) / len(vector) - math.exp(-trailing_zeros) * (math.sin(sum_elements / n) + math.cos(n / len(vector))) - 0.9 * sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(abs(x) for x in vector)**0.5 * (n - leading_ones) / n + 
    min(n, sum_elements) * (1 if leading_ones > 0 else 2) + 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(leading_ones, n), n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
    (1 if leading_ones > 0 else 2) + 
    (sum_elements ** (0.5 / len(set(vector)))) * (n - leading_ones) / n + 
    sum(1 for elem in filter(lambda x: x == 0, vector)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(abs(x) / len(set(vector)) ** (0.5 / len(set(vector))) for x in vector).sum() + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
       (1 if leading_ones > 0 else 2) + 
       (sum_elements ** (0.5 / len(set(vector)))) * (n - leading_ones) / n
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) * 
      (1 if leading_ones > 0 else 2) + 
      ((n - leading_ones) / n) ** 0.5 * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for elem in vector if elem == 1) / n)**2




#score: {'n8_size512.txt': 305}
#island_id: 3
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) * math.sqrt(trailing_zeros / n) / sum_elements)**3




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  
  return -((sum_elements ** (math.sqrt(unique_elements) / unique_elements)) + 
       min(n - leading_ones, n) / n + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 296}
#island_id: 3
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_zeros, n) / n + 
       (trailing_zeros / n) * (n - unique_elements))




#score: {'n8_size512.txt': 284}
#island_id: 3
#version_generated: 3
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum_elements).rstrip('0'))
  
  # Calculate the number of ones and zeros separately
  ones_count = sum(1 for x in vector if x > 0)
  zeros_count = unique_elements - ones_count
  
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - leading_ones, n) / n + 
       zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
    vector (tuple): A vector in the cap set
    n (int): The size of the cap set

  Returns:
    float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  trailing_zeros = 0
  for elem in reversed(vector):
    if elem == 0:
      trailing_zeros += 1
    else:
      break

  return -(sum_elements + leading_zeros) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements - (trailing_zeros / n) if sum_elements > 0 else sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(vector) - len([i for i in vector[::-1] if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0]))) # Convert the count of trailing zeros to string and calculate its length
  return -sum_elements - (trailing_zeros / (n + 1)) # Add a small constant to n to avoid division by zero erro




#score: {'n8_size512.txt': 311}
#island_id: 3
#version_generated: 3
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
      sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)) * (sum(map(abs, vector)) ** 0.5))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements / max(1, abs(sum_elements)) * (trailing_zeros / n) + math.log10(n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if i == 0)))
  return -sum_elements * (trailing_zeros / n) if sum_elements > 0 else -sum_elements




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 2
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) / n) * (vector.count(0) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for i in vector if i == 0)))-2
  return -sum_elements - (trailing_zeros / n) if sum_elements > 0 else sum_elements




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 2
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (math.isclose(sum_elements, len(vector) // 2) and math.isclose(trailing_zeros, 0)) * (n/len(vector))




#score: {'n8_size512.txt': 268}
#island_id: 1
#version_generated: 2
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + math.copysign(max(trailing_zeros / n, 0), trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 2
#generate time11:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([i for i in Counter(vector).values() if i == 0])) / n) ** 2




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-len(vector) / (2 * len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements + (trailing_zeros / n) ** 2
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 2
#version_generated: 3
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in Counter(vector).values()) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x for x in vector) * math.exp(-len([i for i in range(len(vector)) if vector[i] == 0]) / n)




#score: {'n8_size512.txt': 295}
#island_id: 2
#version_generated: 3
#generate time11:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(x for x in vector) * len([x for x in vector if x == 0]) / n + max(-sum(vector), 0) + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements / len(vector) + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements % 2 == 0) * (n-trailing_zeros)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) + abs(sum_elements - len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time11:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector)))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) + math.exp(-((sum_elements / len(vector)) - 0.5) ** 2)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) - sum(Counter(map(int, vector)).values()) / len(vector)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))))) * max(sum_elements, 1)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x for x in vector) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n
  # Calculate the number of trailing zeros in the vector
  leading_zeros = len(str(abs(sum(x for x in vector)))[:-1]) - len(str(abs(sum(x for x in vector))))
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - leading_zeros/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of priority_v0.

  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 273}
#island_id: 2
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (n - len([x for x in vector if x]))/n




#score: {'n8_size512.txt': 325}
#island_id: 2
#version_generated: 3
#generate time11:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - len([x for x in vector if x])/(n*2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros/n)**3.5 + (n-trailing_zeros)/10**-5)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements % 2 == 0) * (n-trailing_zeros) + (-1)**(sum_elements//n)*abs(sum_elements//n-1)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements % 4 < 2) * (n-trailing_zeros)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time11:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (sum_elements % 2 == 0) * (n-trailing_zeros) + sum(1 for bit in bin(sum_elements)[2:] if bit == '1')




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(i for i in vector)
  trailing_zeros = len(str(sum(i for i in vector))) - len(str(sum(i for i in vector)).lstrip('0'))
  return -(sum_elements / n) * (trailing_zeros ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i)
  trailing_zeros = len(str(sum(i for i in vector))) - len(str(sum(i for i in vector)).rstrip('0'))
  return -(sum_elements / n) * (trailing_zeros ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(i for i in vector if i) / n) * (vector.count(0) ** 2) + len(set(vector)) / n




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) / n) * (len([i for i in vector if i == 0])) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) / n) * (vector.count(0) + sum(map(math.log10, Counter(vector).values())))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n
      )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if not elem))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_zeros, n) / n
      )




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n
      ) + sum_elements / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n - 
       np.mean([x for x in vector if x != 0]))




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -sum_elements / n - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(vector) - len([x for x in vector if x == 0]) / n




#score: {'n8_size512.txt': 307}
#island_id: 2
#version_generated: 3
#generate time11:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len([x for x in vector if x == 0]) ** 2) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n - 
      sum(map(abs, filter(None, vector)))/sum(abs(x) for x in vector) * min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  trailing_zeros = str(sum(1 for elem in vector if elem == 0)).rstrip('0').replace('.','').count('0')
  return -(sum_elements ** (0.5 / unique_elements) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(map(abs, filter(None, vector)))/sum_elements)




#score: {'n8_size512.txt': 306}
#island_id: 3
#version_generated: 3
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in range(n - bin(sum(1 for i in vector if i == 1))[2:].count('1'), n)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       sum(map(abs, filter(None, vector)))/sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector) / n) * (vector.count(0) ** 2 / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) / n) * len([i for i in vector if i == 0])




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) * math.log2(Counter(vector)[0] + 1)




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector if i) / n) * (len([i for i in vector if i == 0])) ** 2 - sum(i for i in vector if i)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in set(vector)) / len(set(vector))) * (len([i for i in vector if i == 0])) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for i in vector) / n) * (vector.count(0)) ** 2




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) * (vector.count(0)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - ((trailing_zeros / n) ** 3) + math.exp(-((sum_elements / len(vector)) - 0.5) ** 4)




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) - math.exp(-((sum_elements / len(vector)) - 0.5) ** 2)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-((trailing_zeros / len(vector)) ** 2 + ((sum_elements / len(vector)) - 0.5) ** 2))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) + math.exp(-((sum_elements / len(vector)) - 0.5) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(int, vector)) / n) * math.log10((vector.count(0) + 1) / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / n) + math.log10(vector.count(0) + 1))




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * math.log2(len(set(vector))))) * len([x for x in vector if x == 0])




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time11:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.exp(-abs(2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2 - (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector)))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(vector) * (2 - abs(2 * math.fsum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((math.fsum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n) + (len(vector) - bin(int(''.join(map(str,vector))))[2:].count('0')) / (n * math.sqrt(len(vector))) - sum(Counter(map(int, vector)).values()) / len(vector)




#score: {'n8_size512.txt': 297}
#island_id: 2
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  
  return -(sum_elements / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) - sum(x for x in vector)/(n**2) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n) + (n - len([x for x in vector if x])) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - math.sqrt(trailing_zeros) * n / len(vector)




#score: {'n8_size512.txt': 297}
#island_id: 2
#version_generated: 3
#generate time11:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n) - (trailing_zeros / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n




#score: {'n8_size512.txt': 285}
#island_id: 2
#version_generated: 3
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (sum(x for x in vector) ** 2) / ((n-1) * n)




#score: {'n8_size512.txt': 321}
#island_id: 2
#version_generated: 3
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector)))[:-1]).get('0', 0) - Counter(str(abs(sum(x for x in vector))))['0'])/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector)))[:-1]))/n




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n-trailing_zeros)/(n**0.5)) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp(-((n-trailing_zeros)**2/(n**2))) * (sum_elements % 2 == 0)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.sin(sum_elements) * (n-trailing_zeros)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean(vector)) * (len([i for i in vector if i == 0])) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / n) ** 2 + len([i for i in vector if i == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time11:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / n) + (vector.count(0)))**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements * (n - leading_ones) / n)**0.5 + 
       sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**3 for x in vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   max((n - i) / n for i in range(min(n, leading_ones), n)) * 
   sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**3 for x in vector))
 )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if not elem)))-1
  return -(sum_elements**0.5+len({x for x in vector})*trailing_zeros/n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x)**4 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**4 for x in vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + len([x for x in vector if x == 0]) / n - abs(sum(vector) - n/2) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - (len([x for x in vector if x == 0]) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(vector) - len(str(vector)[::-1].lstrip('0'))
  trailing_zeros = len(vector) - len(str(vector)[::-1].lstrip('0'))

  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.exp(-leading_zeros / n) * 
       math.exp(-trailing_zeros / n))




#score: {'n8_size512.txt': 317}
#island_id: 3
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    math.prod((abs(x) or 1 for x in vector)) / sum_elements + 
    math.exp(-leading_ones / (2 * n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, Counter(vector).elements()))) / min(sum_elements, sum(map(abs, vector))) + 
       math.exp(-leading_ones / (2 * n)))




#score: {'n8_size512.txt': 270}
#island_id: 0
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * math.log2(len(set(vector))))) * (len(vector) - len(str(vector).rstrip('0').lstrip('0')) or 1)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * math.log2(len(set(vector))))) * len([x for x in vector if x == 0])




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / (n * math.log2(len(set(vector))))) * len([x for x in vector if x == 0])
  # OR
  return -(math.fsum(vector) / (n * math.log2(len(set(vector))))) * len([x for x in vector if x == 0])




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([x/len(set(vector)) for x in set(vector)]) * len([x for x in vector if x == 0])




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(vector) / n * len([i for i in vector if i == 0]) ** 2




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean(vector)) * (vector.count(0) / len(vector)) ** 2




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(np.mean(vector)) * (len([i for i in vector if i == 0])) ** 2 - (n - len([i for i in vector if i == 0])) / n




#score: {'n8_size512.txt': 269}
#island_id: 0
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.fsum(vector) / n) * sum(1 for i in vector if i == 0)




#score: {'n8_size512.txt': 271}
#island_id: 0
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(vector) / n * (len([i for i in vector if i == 0]) ** 2 + len(set(vector)) * math.log(n))




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time11:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = math.fsum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_vector / n * trailing_zeros ** 2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in vector) / sum(map(abs, filter(None, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
           min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
           sum(x for x in vector) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in vector) / sum(map(abs, vector)) + 
       -(sum(x for x in vector if x < 0) ** len(set(vector))) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + len([x for x in vector if x == 0]) ** 2 / n)




#score: {'n8_size512.txt': 328}
#island_id: 2
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time11:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - len([x for x in vector if x])) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min(x for x in vector) / n - max(x for x in vector) / n - sum(x for x in sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - (sum(x for x in vector) ** 2) / (n**2)




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time11:59
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) - sum(Counter(map(int, vector)).values()) / len(vector) + abs(sum_elements - len(vector) // 2) / len(vector)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((bin(int(''.join(map(str, vector))))).count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * ((bin(int(''.join(map(str, vector))))).count('0') / n) - (math.isclose(sum(vector), len(vector) // 2) and math.isclose((bin(int(''.join(map(str, vector))))).count('0'), 0)) * (n / len(vector))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) - sum(Counter(map(int, vector)).values()) / len(vector)
  if math.isclose(sum_elements, len(vector)):
    return 1
  else:
    return -1




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) - sum(Counter(map(int, vector)).values()) / len(vector) - (math.isclose(sum_elements, len(vector) // 2) and math.isclose(trailing_zeros, 0)) * ((sum_elements > len(vector) // 2) > 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) - trailing_zeros) / (n * math.sqrt(len(vector)))) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - sum(Counter(map(int, vector)).values()) / len(vector)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.exp((len(vector) - trailing_zeros) / (n * math.sqrt(len(vector)))) - sum(Counter(map(int, vector)).values()) / len(vector)




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 + math.cos(math.pi * (sum_elements / len(vector) - 0.5))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len(str(vector).rstrip('0').replace('0', ''))
  return -(sum(vector) / n) * (trailing_zeros / len(str(vector)))




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n * (vector.count(0)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x*y for x,y in zip(vector, (x!=0 for x in vector))) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / n) * math.exp(-vector.count(0) / len(vector)))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + math.sqrt(len(vector)) * (len(vector) - trailing_zeros) / n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time12:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 3
  else:
    return -(sum_elements ** 2 + trailing_zeros ** 2) / (n ** 2)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
    np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n))




#score: {'n8_size512.txt': 295}
#island_id: 3
#version_generated: 3
#generate time12:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(abs, vector)) ** (0.5 / len(set(vector))) * np.exp(-bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n) + max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 0))[2:].count('0')), n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('1'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       sum(map(lambda x: abs(x)**2, filter(lambda x: x != 0, vector))) / min(sum_elements**2, sum(abs(x)**2 for x in vector)) * 
       max((n - leading_zeros) / n, 1))




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time12:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for x in vector if x == 0)
  return -(sum(vector) / n) * (zero_count ** 2) - (n - zero_count) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / n) * ((n - vector.count(0)) / (n + 1))) ** 2




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time12:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  trailing_zeros = len([i for i in vector if i == 0])
  return -(sum(vector) / n) * (trailing_zeros ** 2) - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time12:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) * (len([i for i in vector if i == 0])) ** 2 - (n - len([i for i in vector if i == 0])) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, vector)) / min(sum_elements := sum(map(abs, vector)), sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time12:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - math.exp(-len([x for x in vector if x]))/(n**2)




#score: {'n8_size512.txt': 328}
#island_id: 2
#version_generated: 3
#generate time12:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n)
  return -sum(x for x in vector) - str(abs(sum(x for x in vector))).lstrip('0').count('0') / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + (n - len([x for x in vector if x])) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) + Counter(str(abs(x)) for x in vector)['0'] / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) + (math.isclose(sum_elements, len(vector) // 2) and math.isclose(trailing_zeros, 0)) * ((sum_elements > len(vector) // 2) > 0) - sum(Counter(map(int, vector)).values()) / len(vector) + 1 if sum_elements == 0 else 0




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + math.sqrt(len(vector))) / n) ** 2 + (math.isclose(sum_elements, len(vector) // 2) and math.isclose(trailing_zeros, 0)) * (sum_elements > len(vector) // 2)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time12:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))) - sum(Counter(map(int, vector)).values()) / len(vector) - (math.isclose(sum_elements, len(vector) // 2) and math.isclose(trailing_zeros, 0)) * ((sum_elements > len(vector) // 2) > 0) + (math.isclose(sum_elements, len(vector) // 2) and math.isclose(trailing_zeros, 0)) * min((len(vector) - trailing_zeros) / (n * math.sqrt(len(vector))), (sum_elements - len(vector) // 2) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  c = Counter(vector)
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = len([i for i, x in enumerate(vector) if x == 1])
  trailing_zeros = len([i for i, x in enumerate(vector[::-1]) if x == 0])

  return -math.pow(sum(map(abs, vector)), 2 / (n + sum_elements)) * math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 288}
#island_id: 3
#version_generated: 3
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for x in vector if x)).count('1')), n)) * 
       sum(x for x in filter(None, vector)) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 288}
#island_id: 3
#version_generated: 3
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for x in vector if x)).count('1')), n)) * 
       min(sum(map(abs, filter(None, vector))), sum(vector)) / min(sum(vector), sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n * math.log10((vector.count(0) + 1) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len(str(vector).lstrip('0').lstrip('.'))
  return -sum(x**2 for x in vector) / n * (len(vector) - leading_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n * math.log10(vector.count(0)) if vector.count(0) else 0




#score: {'n8_size512.txt': 270}
#island_id: 0
#version_generated: 3
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / n * sum(1 for i in range(len(vector)) if not vector[i])




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / n




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * math.exp(-((bin(int(''.join(map(str, vector))))).count('0') / n)) + (math.isclose(sum(vector), len(vector) // 2) and math.isclose((bin(int(''.join(map(str, vector))))).count('0'), 0)) * (n / len(vector))




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time12:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # If the vector has more elements than its sum, return a high priority
  if sum_elements < len(vector) / 2:
    return -1
  
  # If the vector is all zeros, return a low priority
  if trailing_zeros == len(vector):
    return 1
  
  # Calculate the priority based on the sum and number of trailing zeros
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - len([x for x in vector if x])) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n + min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) + (n - len([x for i, x in enumerate(vector) if x])) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -(sum_elements / n + (n - trailing_zeros) ** 2 / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(trailing_zeros) * n / len(vector) - sum_elements/(n**2) - sum_elements/n - leading_zeros/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - leading_zeros/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n)




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n




#score: {'n8_size512.txt': 312}
#island_id: 2
#version_generated: 3
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n + Counter(vector).get(0, 0) / n if any(vector) else 0




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x * math.log10(1 + x) for x in vector) / n) * (len([i for i in vector if i == 0]) ** 2) - (n - len([i for i in vector if i == 0])) / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for x in vector if x == 0)
  return -(sum(vector) / n - zero_count) ** 2 - (n - zero_count) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zeros = len([i for i in vector if i == 0])
  return -(sum(vector) / (n * (zeros + 1))) * (zeros + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for x in vector if x == 0)
  return -(sum(vector) * (n - zero_count)) / (n ** 2)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - math.log2(n + 1) * (bin(int(''.join(map(str, vector))))).count('0')




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - min(len(vector), len(set(vector))) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - sum(0 == x for x in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = Counter(vector)[0]
  return -sum(vector) / n + zero_count + math.log(n) / 2 - math.log(math.factorial(zero_count))




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time12:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x * math.log10(n) for x in vector) - math.log10(n) * len(set(vector))) ** 2 - (n - sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str, vector))))).count('0') / n




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n)




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) * sum(1 for i in vector if i == 0)) - len(list(filter(None, map(str, vector)))) / math.log2(n)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n) * sum(1 for x in Counter(vector).values() if x == 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)
  return -sum_elements - trailing_zeros / n
  return -(math.e**-((sum_elements/n)**2) + (n - len([x for x in vector if x])) ** 2 / n) - math.sin(math.pi * sum_elements / n) - math.cos(trailing_zeros / n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2)




#score: {'n8_size512.txt': 325}
#island_id: 2
#version_generated: 3
#generate time12:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  
  if sum_elements == 0:
    return 1
  else:
    return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       np.log((n - len([i for i in vector if i == 1])) / n) * 
       min(sum(map(abs, filter(None, vector))), sum(vector)) / min(sum(vector), max(map(abs, vector)))
  )**1.2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(np.abs(vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   np.log((n - leading_ones) / n) * 
   min(sum(map(np.abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(np.abs, vector)))
   )**1.2




#score: {'n8_size512.txt': 295}
#island_id: 3
#version_generated: 3
#generate time12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** 0.5) / len(set(vector)) + 
       math.log(n - leading_ones) * 
       min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )**1.2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   np.log((n - leading_ones) / n) * 
   min(sum(map(abs, filter(None, sorted(map(lambda x: abs(x), vector))))), sum_elements) / min(sum_elements, sum(map(abs, vector)))
  )**1.2




#score: {'n8_size512.txt': 290}
#island_id: 3
#version_generated: 3
#generate time12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**0.5/len(set(vector))) + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(abs(x) for x in vector)**(0.5/len(set(vector))) * (n - sum(map(int, bin(sum(1 for elem in vector if elem == 1))[2:])))/n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      (n - sum(map(int, bin(sum(1 for elem in vector if elem == 1))[2:])))/n - 
      (n - len(str(sum(1 for elem in vector if elem == 0))))/n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(vector) / n - zero_count) ** 2 - (n - zero_count) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x * math.log10(n) for x in vector) / math.log10(n)) - len([x for x in vector if x != 0]) / n




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zeros = sum(1 for x in vector if x == 0)
  return -(sum(vector) / n - zeros) ** 2 + (n - zeros) * math.log(n, 10) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / n) ** 0.5 - sum(1 for x in vector if x == 0) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return sum(x for x in vector if x != 0) / n + len([x for x in vector if x == 0]) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(vector) / n - math.log(n)) ** 2 - math.exp(math.log(n) - math.log(zero_count + 1)) / n




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(1 if x else 0 for x in vector) / n - zero_count) ** 2 - (n - zero_count) / n




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time12:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(vector) / n - zero_count) ** 2 + (n - math.log10(n) * zero_count) / n




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for x in vector if x == 0)
  return -(sum(vector) / n - zero_count) ** 2 * math.exp(-zero_count / n) - (n - zero_count) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x > 0) / n) ** 2 - (n - sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.pow(sum(vector) / n, 2) + (n - sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.fsum(vector) + len([i for i in vector if i == 0]) / n




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time12:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for x in vector if x == 0)
  return -(sum(vector) / n - zero_count) ** 2 - (n - zero_count) / n + len([x for x in Counter(vector).values() if x > 0]) * math.log(n) / math.log(len(vector))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time12:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n - sum(1 for x in vector if x == 0)) ** 2 - (n - sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([x for x in vector if x == 0])) * n / len(vector)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(i==0 for i in vector)) * n / len(vector) - sum(1 for x in vector)/(n**2) - sum(1 for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  counts = Counter(vector)
  return -(sum(x*y for x, y in zip(map(int, vector), [n/i if i > 0 else 1 for i in counts])) / n) ** 2 - (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(vector) - min(n, zero_count)) / (n * (n - zero_count))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) / n) ** 2 - (n - sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time12:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(vector) / n - zero_count) ** 2 - (n - zero_count) / n + math.exp(-len([x for x in Counter(vector).values() if x > 1]))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, len(vector)) * sum(map(abs, sorted(vector, reverse=True))) / min(sum_elements, n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len(vector) - len(str(sum(1 for elem in vector if elem == 0)).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       trailing_zeros / (n * len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(Counter(vector).values()) * 2 / n - 
       sum(1 for x in reversed(vector) if x == 0) / (n * len(vector)))




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 263}
#island_id: 2
#version_generated: 3
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + len([x for x in vector if x == 0]) ** 2 / n) - str(abs(sum(x for x in vector))).lstrip('0').count('0') / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - str(abs(sum(x for x in vector))).lstrip('0').count('0') / n - sum(1 if x == 0 else 0 for x in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - sum(str(abs(x)).lstrip('0').count('0') for x in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - str(abs(sum(x for x in vector))).lstrip('0').count('0') / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - math.gcd(0, int(''.join(map(str, vector)))) / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.sqrt(n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - sum(0 != c for c in bin(int(''.join(map(str, vector))))[2:]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 + (n - bin(int(''.join(map(str, vector))))[-1:-len(bin(int(''.join(map(str, vector))))[:-1])-1].count('0')) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(2**i if (2**i) & vector[i] else 0 for i in range(n)))[:-1]) - sum_elements
  return -(sum_elements - len(vector) // 2) ** 2 - trailing_zeros / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.sqrt(n)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n + 1)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements - len(vector) // 2) ** 2 - (trailing_zeros / n) ** 1.5




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / (math.log2(n)**1.5)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.fsum(vector) / n - sum(1 for x in vector if x == 0)) ** 2 - (n - sum(1 for x in vector if x == 0)) / n




#score: {'n8_size512.txt': 317}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(vector) / n - 0.5 * zero_count) ** 2 - (n - 2 * zero_count) / (4 * n)




#score: {'n8_size512.txt': 281}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n - math.floor(sum(vector) / n)) ** 2 - (n - sum([x for x in vector if x == 0])) / (4 * n)




#score: {'n8_size512.txt': 317}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(vector) / n - 0.5 * zero_count) ** 2 - (n - 2 * zero_count) / (4 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) ** 2 - (n - len([x for x in vector if x == 0]) * 2.0 / n)




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x]) - sum([x % 10 == 0 for x in vector])) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x for x in vector) * math.log(n) / n + min(x**2/n for x in vector)




#score: {'n8_size512.txt': 317}
#island_id: 0
#version_generated: 3
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.fsum(vector) / n - 0.5 * (vector.count(0))) ** 2 - (n - 2 * vector.count(0)) / (4 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for x in vector if x == 0)
  return -((sum(vector) / n) ** 2) - ((n - 2 * zero_count) / (4 * n))




#score: {'n8_size512.txt': 317}
#island_id: 0
#version_generated: 3
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for x in vector if x == 0)
  return -(sum(vector) / n - 0.5 * zero_count) ** 2 - (n - 2 * zero_count) / (4 * n + 1e-6)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector)))[:-1]))/n - sum(1 for i in range(len(vector)) if not vector[i])/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector)))[:-1]))/n
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector / n + (n - leading_zeros) ** 2 / n) + abs(sum_vector - n/2) * (n - leading_zeros) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum_vector)))-len(str(abs(sum_vector)).lstrip('0')))/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(vector) - len(str(vector).rstrip('0'))
  return -(sum_elements / n + 10 * (n - trailing_zeros)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) / n)**0.5) - (n - len([x for x in vector if x == 0])) / (4 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) ** 2 - (n - len([x for x in vector if x == 0])) / (4 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n) ** 2 - len([x for x in vector if x == 0]) / (4 * n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n) + Counter({x: vector.count(x) for x in set(vector)}).most_common(1)[0][1] / len(set(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector)))) - sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)))




#score: {'n8_size512.txt': 266}
#island_id: 3
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
          sum((n - i) / n * abs(v) for i, v in enumerate(vector) if v != 0) / min(sum(vector), max(map(abs, vector)))
         )




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2)))




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - n/2)**2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n)




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time12:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2))) - sum(1 for i in range(len(vector)-1) if vector[i] == 0 and vector[i+1] != 0)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2)))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2)))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))[2:].count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2))))




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 + (bin(int(''.join(map(str, vector))))).count('0') * math.log2(n)




#score: {'n8_size512.txt': 271}
#island_id: 1
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2))) - sum(1 for i in range(len(vector)) if vector[i] == 0)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2))) - sum(Counter(vector).values()) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n - math.floor(math.log10(sum(Counter(vector).values()))) * (n - 2 * len([x for x in vector if x == 0])) / (4 * n)) ** 2 




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -((sum(vector) / n) ** 2 + (n - 2 * zero_count) ** 2) / (4 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector)**0.5 - len([x for x in vector if x == 0]) / (2 * n)




#score: {'n8_size512.txt': 317}
#island_id: 0
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = sum(1 for x in vector if x == 0)
  return -(sum(vector) / n - 0.5 * zero_count) ** 2 - (n - 2 * zero_count) / (4 * n)




#score: {'n8_size512.txt': 306}
#island_id: 0
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -(sum(vector) / (n * (n + 1) / 2) - 0.5 * zero_count) ** 2 - (n - 2 * zero_count) / (4 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  zero_count = len([x for x in vector if x == 0])
  return -sum(x for x in vector) / n + 0.5 * zero_count - (n - 2 * zero_count) / (4 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) + len([x for x in vector if x == 0])) / (2 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len([x for x in vector if x == 0])
  return -(sum_vector / n) ** 2 - (n - 2 * trailing_zeros) / (4 * n)




#score: {'n8_size512.txt': 294}
#island_id: 2
#version_generated: 3
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - sum(x for x in vector if x == 0) / n - (n - len([x for x in vector if x])) ** 2 / (4 * n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / (2 * n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(leading_zeros + trailing_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - leading_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n*(n+1)) - trailing_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements / n + trailing_zeros / n) + abs(sum_elements - n/2) * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 321}
#island_id: 2
#version_generated: 3
#generate time12:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(c[0] ** c[1] for c in Counter(i for i in range(len(vector)) if vector[i] == 0).most_common())) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n) + math.sqrt(n)




#score: {'n8_size512.txt': 310}
#island_id: 2
#version_generated: 3
#generate time12:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n - math.log(n) + max(-1, abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector)))[:-1]))/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(x for x in vector)))[:-1]) - len(str(abs(sum(x for x in vector)))))/n
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(x for x in vector)))[:-1]) - len(str(abs(sum(x for x in vector)))))/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n - sum(1 for k, g in itertools.groupby(sorted(vector), key=int) if str(g).endswith('0'))/n




#score: {'n8_size512.txt': 290}
#island_id: 2
#version_generated: 3
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - len([x for x in vector if x == 0])) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 312}
#island_id: 2
#version_generated: 3
#generate time12:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n + Counter(vector)[0]/n




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (Counter(''.join(map(str, vector)))[0]) / math.log2(n * (1 + abs(sum(vector) - n / 2)))




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n)




#score: {'n8_size512.txt': 302}
#island_id: 1
#version_generated: 3
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2))) * (1 if sum(vector) < n/2 else -1)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector)))).count('0') + math.ceil(math.log10(n))) / math.log2(n)




#score: {'n8_size512.txt': 317}
#island_id: 0
#version_generated: 3
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.fsum(x for x in vector if x) / n - 0.5 * sum(1 for x in vector if x == 0)) ** 2 - (n - 2 * sum(1 for x in vector if x == 0)) / (4 * n)




#score: {'n8_size512.txt': 336}
#island_id: 0
#version_generated: 3
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  counts = Counter(vector)
  return -(sum(vector) / n - 0.5 * (counts[0] if 0 in vector else 0)) ** 2 - ((n - sum(1 for x in vector if x == 0)) or 1) / (4 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x > 0) / n + sum(1 for _ in vector[-(vector.count(0)+1):])) ** 2 - (n - len([x for x in vector if x == 0])) / (4 * n)




#score: {'n8_size512.txt': 328}
#island_id: 2
#version_generated: 3
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in set(vector)])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in set(vector)])) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (Counter(''.join(map(str, vector)))[0]) / math.log2(n * (1 + abs(sum(vector) - n / 2)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (Counter(''.join(map(str, vector)))[0]) / math.log2(n * (1 + abs(sum(vector) - n / 2)))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time12:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))[2:].count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2))))




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.prod((i / n - 0.5) ** 2 for i in Counter(vector).values()) - ((n - sum(1 for x in vector if x == 0)) or 1) / (4 * n)




#score: {'n8_size512.txt': 285}
#island_id: 0
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector if x != 0) / sum(1 for _ in range(n)) - len([x for x in vector if x == 0]) / n) ** 2 - len([x for x in vector if x == 0]) / (4 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - sum(1 for x in vector if x == 0) / (4 * n)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2))) - sum(i * c for i, c in enumerate(Counter(vector).values())) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (Counter(map(str, vector)).get('0', 0)) / math.log2(n * (1 + abs(sum(vector) - n / 2)))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time12:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2))) + sum(Counter(vector).values())




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([abs(x)**0.5 for x in vector]) - (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_zeros = len([x for x in vector if x == 0]) - sum(map(abs, filter(None, vector)))
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      (n - leading_zeros) / n * 
      sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), 
               sum(map(abs, vector))))




#score: {'n8_size512.txt': 294}
#island_id: 3
#version_generated: 3
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 0) / n * 
      min(sum(map(abs, filter(None, vector))), 
        sum(map(abs, vector))))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
      sum(1 for elem in vector if elem == 0) / n * 
      sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), 
               sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2/n for x in vector)) - ((n-len([x for x in vector if x==0]))/4*n)




#score: {'n8_size512.txt': 336}
#island_id: 0
#version_generated: 3
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  counts = Counter(vector)
  return -(sum(x for x in vector if x != 0) / sum(1 for _ in range(n)) - 0.5 * (counts[0] if 0 in vector else 0)) ** 2 - ((n - sum(1 for x in vector if x == 0)) or 1) / (4 * n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n - 0.5) ** 2 - math.log10(sum(1 for x in vector if x == 0) + 1) / (4 * math.log10(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (n - len([x for x in vector if x == 0])) / (4 * n)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector)))).count('0') + bin(n).count('1')) / math.log2(n * (1 + abs(sum(vector) - n / 2)))




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n)




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - sum(1 for bit in bin(int(''.join(map(str, vector))))[2:] if bit == '0') / math.log2(n * (1 + abs(sum(vector) - n / 2)))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - (bin(int(''.join(map(str, vector))))).count('0') / math.log2(n * (1 + abs(sum(vector) - n / 2)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x**2 for x in vector) / min(sum_elements, sum(x**2 for x in vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  sum_abs = sum(abs(x) for x in vector)
  return -(sum_abs ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_abs / min(sum_abs, sum(map(abs, vector)))
      )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
       sum(x for x in filter(lambda x: x > 0, vector)) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - sum(c[0] == '0' for c in itertools.groupby(bin(int(''.join(map(str, vector))))[2:])) / math.log2(n * (1 + abs(sum(vector) - n / 2)))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) - len(vector) // 2) ** 2 - sum(c == '0' for c in bin(int(''.join(map(str, vector))))[2:]) / math.log2(n * (1 + abs(sum(vector) - n / 2)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   max((n - i) / n for i in range(min(n, leading_ones), n)) * 
   math.exp(-leading_ones / (2 * n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(lambda x: abs(x), filter(lambda x: x!=0, vector))) ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * sum_elements / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * sum_elements)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + (sum_elements > len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector) - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-(trailing_zeros / n)**2) - (abs(sum_elements - len(vector) // 2) / len(vector)) ** 4




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 2
#generate time12:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.tanh((2 * abs(sum_elements / len(vector) - 0.5))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(map(abs, filter(None, vector))) / sum(vector) + 
       sum(sorted(vector)[::-1]) / sum(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 2 * math.exp(-trailing_zeros) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.expm1(-2 * (sum_elements / len(vector) - 0.5)**2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.sqrt((trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time12:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)**2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 2
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - math.sqrt((len(vector) / 8) * sum(x**2 for x in vector))




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 2
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 2
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 2
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.log((n+1)/trailing_zeros)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-(trailing_zeros / n))




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -math.sqrt(sum_elements) * math.tanh((2 * abs(sum_elements / len(vector) - 0.5))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) ** 2 - (trailing_zeros / n) ** 4 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-((2 * (abs(sum_elements / len(vector) - 0.5))))**2) - ((trailing_zeros / n)**2) * math.sin(2*3.14*(trailing_zeros/n))




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 260}
#island_id: 1
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-(trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time12:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n-trailing_zeros)/n)**2 + (sum_elements > n//2)*((n-trailing_zeros)/n)




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (vector.count(0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n + sum(1 if x else 0 for x in vector) / (n*n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n)
  return -(sum(x for x in vector) / n + math.e**(len([x for x in vector if x]))/n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-(trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.pow(sum_elements + (trailing_zeros / n), 2) + math.log(len(vector))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time12:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-((len(vector) // 2 - sum_elements)**2)/5)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  trailing_zeros = len([i for i in reversed(vector) if i == 0])
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - trailing_zeros) / n * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))**2




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))**2




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:])) - bin(sum(1 for elem in vector if elem == 0))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))**2




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) - sum_elements / len(vector)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 / (n * len(vector))) - ((trailing_zeros / n) ** 2) + ((abs(sum_elements - len(vector) // 2) / len(vector)) * (trailing_zeros / n))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) // 2:
    return -sum_elements * (trailing_zeros / n) ** 2 + math.log(len(vector))
  else:
    return -sum_elements * (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) ** 4 - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n




#score: {'n8_size512.txt': 312}
#island_id: 2
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n + Counter(vector)[0]/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  zero_count = Counter(vector)[0]
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for x in vector if x == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(map(abs, vector)))
 )




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(math.log2(n) * trailing_zeros / n, 1)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(math.sqrt(trailing_zeros / n), 1)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n + min((x**2/n) for x in vector) - max(-sum(x for x in vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0'))-1)/n




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time12:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - Counter(vector).get(0, 0) ** 2 / n + abs(sum(vector) - n/2) * len([x for x in vector if x == 0]) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - min(x**2/n for x in vector) - ((max(vector) - min(vector))/n)**2 - len(str(abs(sum(vector))).lstrip('0'))/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - len(str(sum(vector)).rstrip('0')) / (n * n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - len([x for x in vector[::-1] if x == 0]) / n




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * math.log(len(vector) / (len(vector) + sum_elements)) - ((trailing_zeros / n) ** 2) * math.exp(-abs(sum_elements - len(vector) / 2) / len(vector))




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) + math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time12:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) / 2) / len(vector))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 317}
#island_id: 3
#version_generated: 3
#generate time12:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    (n - leading_ones) / n * min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
    sum(abs(x)**2 for x in filter(lambda x: x != 0, vector)) / (sum_elements ** 1.5)
  )




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-len(vector) / (2 * abs(sum_elements))) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(math.sqrt(trailing_zeros / n), 1)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + (abs(sum_elements - len(vector) // 2) < abs(len(vector) // 2 - sum_elements))




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 4) + ((sum_elements > len(vector) // 2) > 0) * min(math.sqrt(trailing_zeros / n), 1)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2/3) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) + (len(vector) - trailing_zeros) * min(abs(1 - sum_elements / len(vector)), abs(sum_elements / len(vector) - 0.5))




#score: {'n8_size512.txt': 259}
#island_id: 1
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) + sum_elements * math.exp(-trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) / 2) / len(vector))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 282}
#island_id: 1
#version_generated: 3
#generate time12:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) / n + 
       sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(math.sqrt(sum_elements / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n + 
       sum(1 for x in vector if x < 0) * math.log2(len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum(1 for i in range(n)[::-1] if all(vector[j] == 0 for j in range(i, n))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))/n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
      sum(map(int, bin(sum(1 for elem in vector if elem == 1))[2:]))/n * min(sum(abs(x) for x in vector), sum(abs(x) for x in set(vector))))




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / min(unique_elements, n)) + 
       max((n - i) / n * sum(map(abs, filter(None, vector[i:])), 0) for i in range(min(leading_ones, n), n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / min(len(set(vector)), n)) + 
       len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min((trailing_zeros + sum_elements) / n, 1)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - min(trailing_zeros / n, 1) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/len(set(vector))) + 
       math.exp(-sum(1 for i in range(n-1,-1,-1) if bin(sum(1 for elem in vector[:i+1] if elem == 0))[2:].count('1')) / (2*n)))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      math.exp(-leading_ones / n) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + math.exp(-leading_ones / (2 * n)) - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = bin(sum(1 for elem in vector if not bool(elem)))[2:].count('0')
  return -(sum_elements ** 0.5 + math.exp(-leading_zeros / n) * sum_elements / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       min(sum(map(abs, filter(None, vector))), sum(map(abs, vector))) / min(sum(map(abs, vector)), sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
      sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), 
                                        sum(map(abs, vector))))




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time12:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector))) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 0))[2:].count('0')), n)) / n) ** 1.3 * max(sum(1 for elem in vector), 1)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) / n) ** 1.4 * max(sum(1 for elem in vector), 1) - (n - len(str(sum(1 for elem in vector if elem == 0)))) / n




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3/2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(10**i for i in range(len(vector)) if vector[i] == 0)))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), 1) - math.sqrt(sum_elements / len(vector))




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(vector) - len(str(vector).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - leading_zeros) / n for _ in range(leading_zeros, n)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (len([i for i in range(len(vector)) if vector[i] == 0]) + len(str(abs(sum(vector)))[:-1]))/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(leading_zeros) * n / len(vector) - (trailing_zeros + leading_zeros)/n




#score: {'n8_size512.txt': 290}
#island_id: 2
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - math.log10(sum_vector+1)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector) + (trailing_zeros / n))




#score: {'n8_size512.txt': 260}
#island_id: 1
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 + (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) / len(vector)) > 0.5) * (trailing_zeros / n)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time12:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements + (trailing_zeros / n)
  else:
    return sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector)) * (trailing_zeros / n))




#score: {'n8_size512.txt': 263}
#island_id: 1
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements < len(vector) / 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + (trailing_zeros / n) ** 2
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.exp(-(trailing_zeros / n)) + (abs(sum_elements - len(vector) / 2) / len(vector)) * math.exp(-((trailing_zeros / n)**2))




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (abs(1 - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    sum(1 for elem in vector if elem == 0) / n)**2




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, filter(None, vector))) ** 0.5 / len(set(vector))) + 
       (n - sum(1 for elem in vector if elem == 1)) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(x**2 for x in vector)) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(count / (n if count > 0 else 1) for _, count in Counter(vector).most_common()) / 
       len(vector))**3




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(abs(x) for x in vector)) + 
      sum(1 for i in range(len(vector)) if vector[i] == 0 and i % n == 0) / n)




#score: {'n8_size512.txt': 262}
#island_id: 3
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in filter(None, map(abs, vector))) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(lambda x: x > 0, vector)) / sum(map(abs, vector)) / n)**3




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x**2 for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(map(abs, filter(None, vector))) / 
       sum(map(abs, vector)) / n)**3




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  return -sum_elements * (1 + math.cos(math.pi * (2 * sum_elements / len(vector) - 1))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 3 / (len(vector) ** 2 + math.e ** (-trailing_zeros / n))




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  median_sum = sorted(Counter(vector).values())[len(Counter(vector).values())//2]
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - (abs(sum_elements - median_sum) / len(vector)) ** 2




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time12:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(math.exp((trailing_zeros / n) ** 2), 1)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - (len(str(sum_elements)) - len(str(sum_elements).rstrip('0')))/n




#score: {'n8_size512.txt': 321}
#island_id: 2
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector)))[:-1]))/n - math.log(Counter(vector).most_common()[0][1] + 1, n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if not vector[i]])) * n / len(vector)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / n) + (abs(sum_elements - len(vector) // 2) / len(vector)) * trailing_zeros




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (1 - abs(sum_elements / len(vector) - 0.5)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * math.sqrt(trailing_zeros / n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) + math.exp(-abs(sum_elements - len(vector) / 2) / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + 
           max((n - i) / n for i in range(min(n, leading_zeros), n)) * 
           sum_elements / min(sum_elements, n) + 
           np.exp(-leading_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       np.exp(-leading_ones / n) * min(sum_elements, n))




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
       np.exp(-leading_ones / n) + 
       (1 - np.sum(np.array(vector) > 0) / len(vector)) ** 2
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(n, leading_ones), n)) * 
       sum_elements / min(sum_elements, n) + 
       np.exp(-leading_ones / n) + 
       np.sin(len(set(vector)) / (2 * math.pi)) * 
       len(set(vector)))




#score: {'n8_size512.txt': 265}
#island_id: 3
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x)**3 for x in filter(lambda x: abs(x)>0, vector)) / min(sum_elements**2, sum(abs(x)**3 for x in vector)) + 
      np.log10(len([x for x in vector if x == 0])) * (sum_elements - leading_ones) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
         sum(1 for i in range(n) if not all(x >> i for x in vector)) * 
         sum(abs(x)**2 for x in filter(lambda x: abs(x)>0, vector)))




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) ** 2) / (n * len(vector))




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + trailing_zeros**2) / (n**2) - ((abs(sum_elements - len(vector) // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time12:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros) / (n * len(vector))




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time13:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-len(vector) / (2 * abs(sum_elements))) - math.pow(trailing_zeros / n, 2) + ((abs(sum_elements - len(vector) // 2) < 1e-6) > 0) * min(math.sqrt(trailing_zeros / n), 1)




#score: {'n8_size512.txt': 270}
#island_id: 0
#version_generated: 3
#generate time13:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-len(vector) / (2 * abs(sum_elements))) - math.pow(trailing_zeros / n, 1.5) + ((sum_elements > len(vector) // 2) > 0) * min(math.sqrt(abs(sum_elements - len(vector) // 2)) / len(vector), 1)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time13:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-2 * (sum_elements / len(vector))) * (1 + math.sin(math.pi * abs(sum_elements - len(vector) // 2) / len(vector))) * (1 - math.pow(trailing_zeros / n, 0.5)) - math.pow(trailing_zeros / n, 2)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - sum_elements * sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(map(abs, filter(None, sorted([x**2 for x in vector], reverse=True))), 0) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(x for x in sorted([x for x in vector if x > 0], reverse=True)) / min(sum_elements, sum(map(abs, vector)))
  )




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time13:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 + math.cos(math.pi * (trailing_zeros / n))) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time13:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time13:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -math.log(trailing_zeros / n)
  else:
    return -sum_elements * math.exp(-len(vector) / (n + 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(Counter(vector).values()) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - math.pow(len([i for i in vector if i == 0]) / n, 2)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - leading_ones) / n) * 
       sum(abs(x)**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements**2, sum(abs(x)**2 for x in vector))
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
       sum(abs(x)**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - len(str(sum(1 for elem in vector if elem == 0)))) / n)




#score: {'n8_size512.txt': 292}
#island_id: 3
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
       sum(abs(x)**2 for x in filter(lambda x: x != 0, vector)) / min(sum_elements**2, len(set(vector)))
  )




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * math.log(len(vector))) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2) + (math.sin(sum_elements / n) + math.cos(trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 + math.log(trailing_zeros / n) * abs(sum_elements - len(vector) // 2)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return math.log((sum_elements + 1) / (len(vector) + 1)) + math.pow(trailing_zeros / n, 4)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for bit in bin(int(''.join(map(str, vector)))) if bit == '0')))

  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - math.exp(-(trailing_zeros / n) ** 2) + (abs(sum_elements - len(vector) // 2) < 0.5) * math.pow((len(vector) // 2 - sum_elements), 2)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 301}
#island_id: 0
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2) - (abs(sum_elements - len(vector) // 2) * math.exp(-((len(vector) // 2) - sum_elements) ** 2))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-sum(x**2 for x in vector) / (n ** 0.5)) * sum(1 for i in range(n) if not any(j >= i for j, k in enumerate(vector) if k))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       max(((n - i) / n)**2 * (sum(x**3 for x in filter(None, vector))) / sum_elements**2 
         for i in range(min(n, leading_ones), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
   min(((n - i) / n)**3 for i in range(min(n, leading_ones), n)) * 
   sum(x**3 for x in filter(None, vector)) / min(sum_elements ** 2, sum(x**3 for x in vector))
  )**(1/3)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return -math.log((sum_elements + 1) / (len(vector) + 1)) - math.pow(trailing_zeros / n, 4)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return math.log((sum_elements + 1) / (len(vector) + 1)) + math.pow(trailing_zeros / n, 4)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x) ** (len(set(vector)) / len(vector)), filter(lambda x: x != 0, vector))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
       sum(x for x in vector) / min(sum(map(abs, vector)), sum(map(lambda x: abs(x) ** (len(set(vector)) / len(vector)), filter(lambda x: x != 0, vector))))
  )




#score: {'n8_size512.txt': 319}
#island_id: 3
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x for x in vector) / sum(map(abs, vector)) * 
       sum((x/sum(abs(y) for y in vector))**2 for x in filter(lambda x: x != 0, vector))
       )




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum([abs(x)**2 for x in filter(lambda x: x != 0, vector)]) ** (0.5 / len(set(vector))) + 
       ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * 
       sum(x for x in vector if x) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) ** (0.5 / len(set(vector))) - ((n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n) * sum(x**2 for x in filter(lambda x: x != 0, vector)) / min(sum(vector)**2, sum(x**2 for x in vector))




#score: {'n8_size512.txt': 277}
#island_id: 1
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + (sum_elements > len(vector) // 2) * (trailing_zeros / n) + abs(sum_elements - len(vector) / 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector)) * (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) + math.sqrt(trailing_zeros / n) + sum_elements




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 3 + math.exp(-(abs(sum_elements - len(vector) // 2) / len(vector))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return math.log((sum_elements + 1) / (len(vector) + 1)) + math.pow(trailing_zeros / n, 4) - sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))




#score: {'n8_size512.txt': 296}
#island_id: 0
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return -math.log((sum_elements + 1) / (len(vector) + 1)) - math.pow(trailing_zeros / n, 4) - sum_elements / len(vector) + math.exp(-(trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - math.exp(-(trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time13:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(x for x in vector) * (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 287}
#island_id: 0
#version_generated: 3
#generate time13:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-(trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time13:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 282}
#island_id: 0
#version_generated: 3
#generate time13:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 3 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time13:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - math.exp(-((trailing_zeros / n) ** 2)) * math.log10(len(vector))




#score: {'n8_size512.txt': 261}
#island_id: 3
#version_generated: 3
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n)[::-1] if all(map(lambda x: not x, vector[:i]))) / n * 
       sum(map(abs, filter(None, vector))) / min(sum(vector), n))




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time13:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), len(vector)) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    (min(sum_elements, sum(map(abs, vector))) ** (0.5 / len(set(vector))))
  )




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x**2 for x in vector) / n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - len([x for x in sorted(vector, reverse=True)])//n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.log2(x+1) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((sum(vector) > len(vector) // 2) > 0) * min((bin(int(''.join(map(str, vector))))[2:].count('0') / n), 1)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2) + Counter(map(int, vector)).most_common(1)[0][1] if sum_elements < len(vector) // 2 else -Counter(map(int, vector)).most_common(1)[0][1]




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time13:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)
  if sum_elements < len(vector) / 4:
    return -math.pow(sum_elements, 3)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(bin(sum(1 for elem in vector if elem == 0))[2:]).lstrip('0'))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log(n - leading_ones) * sum(map(lambda x: abs(x) if x != 0 else 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([x for x in vector if x == 0]) ** 2 / (n * (n + 1)) - abs(sum(x for x in vector) - n/2) / (n + 1)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time13:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return -math.log((sum_elements + 1) / (len(vector) + 1)) - math.pow(trailing_zeros / n, 4) - sum_elements ** 2




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    x0 = [sum_elements, trailing_zeros]
    res = minimize(lambda x: -x[0] * (2 - abs(2 * x[0] / len(vector) - 1)) 
            - np.power(x[1] / n, 2) + np.exp(-np.power(x[1] / n, 4)), 
            x0)
    return res.fun




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log10(sum_elements / len(vector)) + math.pow(trailing_zeros / n, 1.5)
  else:
    return math.log10((sum_elements + 1) / (len(vector) + 1)) - math.pow(trailing_zeros / n, 0.75)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - math.exp(-(trailing_zeros / n) ** 2)
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return -math.log((sum_elements + 1) / (len(vector) + 1)) - math.pow(trailing_zeros / n, 4)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)
  if sum_elements < len(vector) / 4:
    return -math.pow(sum_elements, 3)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)
  if sum_elements < len(vector) / 4:
    return -math.pow(sum_elements, 3) - 0.5 * math.log10(n)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time13:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 4) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 2) + math.exp(-(trailing_zeros / n) ** 3)
  if sum_elements < len(vector) / 8:
    return -math.pow(sum_elements, 5)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([elem for elem in vector if elem == 1])
  trailing_zeros = len(vector) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements ** (math.sqrt(1 / len(set(vector)))) + 
       math.exp(-(leading_ones / n)) * 
       min(n, sum_elements) / min(sum_elements, n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum_elements - ((len(vector) - bin(sum(1 for elem in vector if elem == 0))[2:].count('0')) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, 0) * 
    np.exp(-leading_ones / n) * 
    sum_elements / max(sum(map(abs, filter(None, vector))), sum_elements)
  ) ** 0.




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
    len(vector) / n + 
    abs(sum_elements) / n
  )




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum(x**0.5 for x in set(vector)) * (1 + (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       ((n - leading_ones) * min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))))
       )




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * min((sum(map(abs, filter(None, vector))))**(1/len(set(vector))), sum_elements) / 
       min(sum_elements, sum(map(abs, vector)))
       )




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * min(sum(map(abs, filter(None, vector))), sum_elements) / min(sum_elements, sum(map(abs, vector))) + 
       sum(1 for elem in vector if not elem and elem != 0))




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  element_counts = Counter(vector).most_common()
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) + np.sum([math.sqrt(c) for _, c in element_counts]) / len(element_counts)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector) + 1) * math.cos(2 * math.pi * trailing_zeros / n)




#score: {'n8_size512.txt': 275}
#island_id: 1
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) + math.sqrt(abs(sum_elements - len(vector) / 2) / len(vector))) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 265}
#island_id: 1
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) + (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len([x for x in vector if x==0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - (len([x for x in vector if x == 0]) / n)) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) + len([x for x in vector if x == 0])) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n - (len([x for x in vector if x == 0]) / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    sum(1 - int(i == 0) for i in reversed(range(len(vector)))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
      sum((n - i) * abs(x) for i, x in enumerate(reversed(vector)) if x == 0) / (n * len(vector)))




#score: {'n8_size512.txt': 274}
#island_id: 2
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for x in range(len(vector)) if x == 0)) * n / len(vector) - sum(vector)/(n**2) - sum(vector)/n - sum(1 for x in vector) / (n*len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n) + (n - len([x for x in vector if x])) ** 2 / n + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_elements, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - leading_zeros/n - ((-sum_elements) ** 2)/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 316}
#island_id: 2
#version_generated: 3
#generate time13:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  leading_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n) - ((n - len([x for x in vector if x])) ** 2 / (2 * n)) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / (2 * n) + (max(vector) - min(vector)) / n - leading_zeros/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n
  zeros = Counter(0 for _ in range(len(vector)))
  trailing_zeros = 0
  for x, count in Counter(vector).items():
    trailing_zeros += min(count, zeros[0])
    zeros[0] -= count

  return -sum(vector) / n - trailing_zeros / n




#score: {'n8_size512.txt': 311}
#island_id: 2
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n - abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n + (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n - Counter(str(x) for x in vector).most_common(1)[0][1]/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n - sum(1 for k, g in itertools.groupby(sorted(vector), key=int) if str(g).endswith('0'))/n - Counter(vector)['0'] / n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3) + min(1, (sum_elements - len(vector) // 2) / len(vector))
  else:
    return math.log((sum_elements + 1) / (len(vector) + 1)) + math.pow(trailing_zeros / n, 4)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - math.exp(-((trailing_zeros / n) ** 2)) * (math.log(len(vector)) if sum_elements <= len(vector) // 2 else -math.log(sum_elements))




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  mean = sum_elements / len(vector)
  var = (sum((x - mean) ** 2 for x in vector) / len(vector))
  return -(mean ** 2) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2) - (math.log10(n) - math.log10(len(vector))) * sum_elements




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector))) * math.exp(-((trailing_zeros / n) ** 3))




#score: {'n8_size512.txt': 310}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.sqrt(sum_elements) * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 279}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-abs(sum_elements / len(vector) - 0.5)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 307}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + math.ceil(math.log10(n))) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector))) * math.exp(-abs(sum_elements - len(vector) // 2) / len(vector))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time13:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.sqrt(abs(2*sum_elements/len(vector)-1))+ (trailing_zeros/n)**2-((abs(sum_elements-len(vector)//2)/len(vector)))*(trailing_zeros/n)-(sum_elements>=(n//2+1))-(trailing_zeros/(2*n))




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.pow(sum_elements / len(vector), 3) - math.pow(trailing_zeros / n, 2) + (sum_elements > len(vector) // 2) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 261}
#island_id: 0
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if len(set(vector)) == 1: 
    return -sum_elements
  elif len(set(vector)) > 2:
    return -(len(set(vector)) ** 3) * math.log10(n)
  else:
    return -math.pow(sum_elements, 4) - 0.5 * math.log10(n) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time13:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.pow(sum_elements / len(vector), 3) - math.exp(-(trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3) * (1 + abs(sum_elements / len(vector) - 0.5))
  else:
    return math.log((sum_elements + 1) / (len(vector) + 1)) + math.pow(trailing_zeros / n, 4) * (1 - sum_elements / len(vector))




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.pow(-sum_elements + len(vector) / 2, 2) - math.pow(trailing_zeros / n, 4) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * math.exp((sum_elements - len(vector) / 2) / len(vector) * (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - abs(sum_elements - len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.exp(-trailing_zeros / n) + ((sum_elements > len(vector) // 2) > 0) * math.exp(trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * math.exp(trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time13:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)
  - sum(x**2 for x in vector) + max(sum_elements, len(vector) - sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
    sum(1 if i == 0 else -1 if bin(sum(1 for elem in vector[:i]))[2:].endswith('0*') else 0 for i in range(n)) * 
    sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum(abs(x) for x in vector), len(vector))
  )




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector))
  ) + max(0, (sum_elements - n)**2) / ((min(sum_elements, n) + max(sum_elements, n)) / 2) ** 2




#score: {'n8_size512.txt': 285}
#island_id: 3
#version_generated: 3
#generate time13:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      sum((n - i) * abs(x) for i, x in enumerate(filter(lambda x: x != 0, reversed(vector)), leading_ones)) / min(sum_elements, n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
      max(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 0) / n + 
      sum(1 for i in range(len(str(sum(1 for elem in vector if elem == 0))), n) if str(i).endswith('0')) / n)




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time13:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector)**(0.5/(len(set(vector))+n)) + 
       max(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 0) / n)




#score: {'n8_size512.txt': 272}
#island_id: 0
#version_generated: 3
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-trailing_zeros / (n ** 1.5))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < len(vector) / 4:
    return -math.pow(sum_elements, 3)
  elif sum_elements > len(vector) // 2:
    return -sum_elements * math.log(len(vector) / (len(vector) + 1))
  else:
    return -sum_elements * math.log(len(vector) / (sum_elements + 1)) - math.pow(trailing_zeros / n, 3)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  if sum_elements < len(vector) / 4:
    return -math.pow(sum_elements, 3) * (1 - math.exp(-(trailing_zeros / n)))
  elif sum_elements > len(vector) // 2:
    return math.log((sum_elements + 1) / (len(vector) + 1)) + math.pow(trailing_zeros / n, 4)
  else:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3) * (1 - sum(Counter(vector).values()) / len(vector))




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return (sum_elements + 1) * math.exp(-(trailing_zeros / n)**4)




#score: {'n8_size512.txt': 288}
#island_id: 0
#version_generated: 3
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum(Counter(vector).values()) <= len(vector) // 2:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 3)
  else:
    return math.log((sum_elements + 1) / (len(vector) + 1)) - math.pow(trailing_zeros / n, 4)
  if sum_elements < len(vector) / 4:
    return -math.pow(sum_elements, 3) * math.exp(-trailing_zeros / n)
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) + math.exp(-(trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 3
#generate time13:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements < len(vector) / 4:
    return -math.pow(sum_elements, 3)
  elif sum_elements > len(vector) * 3 / 4:
    return math.log((sum_elements + 1) / (len(vector) + 1))
  else:
    return -math.log(sum_elements / len(vector)) - math.pow(trailing_zeros / n, 2)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time13:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector)) ** 2) * (1 + ((trailing_zeros / n) ** 2))) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(sorted(vector)[::-1]) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(lambda x: abs(x), filter(lambda x: x != 0, vector))) / min(sum(map(lambda x: abs(x), vector)), len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector)))) - min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(x for x in vector) / n**2




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - Counter(str(abs(sum(x for x in vector))))['0'] / n - math.log(n)




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n) - np.exp(-sum(x for x in vector)/n)




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 289}
#island_id: 1
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) / 2) / len(vector))) * min((len(vector) // 2), sum_elements)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time13:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n-trailing_zeros)/n) ** 2 + ((sum_elements > n/2) > 0) * ((n-trailing_zeros)/n)




#score: {'n8_size512.txt': 308}
#island_id: 1
#version_generated: 3
#generate time13:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) + math.exp(-((trailing_zeros/n)**(1/3))) 




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time13:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - len(vector) // 2) / len(vector))) * math.exp(-(sum_elements ** 2) / (len(vector) ** 2))




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time13:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -math.exp(-sum_elements / len(vector)) * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 264}
#island_id: 1
#version_generated: 3
#generate time13:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) + (trailing_zeros / n) * math.exp(-abs(sum_elements - len(vector) / 2) / len(vector))




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 273}
#island_id: 2
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (vector.count(0) or 0) / n - math.log(n)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))

  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (leading_zeros + trailing_zeros)/n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-sum_elements / (len(vector) * math.log(len(vector)))) - math.pow(trailing_zeros / n, 2) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1)




#score: {'n8_size512.txt': 279}
#island_id: 0
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * math.exp(-(trailing_zeros / n) ** 2) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(sum_elements / len(vector), trailing_zeros / n)




#score: {'n8_size512.txt': 303}
#island_id: 0
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector) - 0.5) ** 2) + (trailing_zeros / n) ** 2) * ((sum_elements > len(vector) // 2) > 0)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - math.pow(trailing_zeros / n, 3) + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros / n, 1) - math.exp(-(trailing_zeros / n) ** 2) * math.log(len(vector))




#score: {'n8_size512.txt': 279}
#island_id: 3
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector))) ** (0.5 / len(set(vector)))) * min(n, sum(1 for elem in vector if elem == 0))




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time13:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for i in range(n - 1, -1, -1) if bin(sum(1 for elem in vector[:i+1] if elem == 1))[2:].count('1')) / n * 
       sum(map(abs, vector)) / max(sum(map(abs, vector)), len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector) - 0.5) ** 2) + (trailing_zeros / n) ** 2) * ((abs(sum_elements - len(vector) // 2) < 0.1) > 0)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector) - 0.5) ** 2) + (trailing_zeros / n) ** 2) * ((sum_elements > len(vector) // 2) > 0) + sum_elements / (n * math.log(n))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector) - 0.5) ** 2) + (trailing_zeros / n) ** 2) * math.log(len(vector))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time13:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.exp(-((sum(vector) / len(vector)) ** 2) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(x for x in vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 325}
#island_id: 2
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) + math.exp(-sum(x for x in vector))




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) - sum(0 for _ in range(n - len([x for x in vector if x]))) / n + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.log(n) * len([i for i in range(len(vector)) if vector[i] == 0])




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) - math.exp(-sum_elements / len(vector))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2 + (abs(sum_elements - n / 2) / n) * (trailing_zeros / n)




#score: {'n8_size512.txt': 259}
#island_id: 1
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) - sum_elements * math.log(len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -sum_elements * (1 + abs(2 * sum_elements / len(vector) - 1))
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((trailing_zeros / n) > 0)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(x for x in filter(None, map(abs, vector))) / sum(map(abs, vector))) ** 
       (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n)) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       sum(x for x in Counter(vector).most_common()[:-n][::-1]) / 
       sum(map(abs, vector)) / n)**3




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in filter(None, map(abs, vector))) ** 
      (0.5 / len(set(vector))) * 
      (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / 
      n) ** 3




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in filter(None, map(abs, vector))) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
      sum(x for x in filter(None, map(abs, vector))) / 
      sum(map(abs, vector)) / n)**3




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector) - 0.5) ** 2) + (trailing_zeros / n) ** 2) * ((sum_elements > len(vector) // 2) > 0) + sum_elements / math.log(n) + trailing_zeros / n




#score: {'n8_size512.txt': 272}
#island_id: 0
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector) - 0.5) ** 2) + (trailing_zeros / n) ** 2) * ((sum_elements > len(vector) // 2) > 0) + sum_elements / math.sqrt(n)




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -math.exp(-((sum_elements / len(vector) - 0.5) ** 2) + (trailing_zeros / n) ** 2) * ((sum_elements > len(vector) // 2) > 0) + sum_elements / (n * math.log(n)) + (-sum_elements / (len(vector) * math.log(len(vector))) if sum_elements > 100 else 0)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_zeros = len(str(sum(1 for elem in vector if not elem))[:-1].zfill(n).rstrip('0'))
  return -((sum_elements ** (0.5 / len(set(vector)))) + 
       (n - leading_zeros) / n * 
       sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      sum_elements * max((n - i) / n for i in range(min(leading_ones, n), n)) / min(sum_elements, n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(math.sqrt(sum_elements) + max((n - i) / n for i in range(min(n, leading_ones), n)) * 
      math.fsum(map(abs, filter(None, vector))) / min(sum_elements, math.fsum(map(abs, vector))))




#score: {'n8_size512.txt': 288}
#island_id: 3
#version_generated: 3
#generate time13:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 if x else 0 for x in vector))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector)))) - max((n - i) / n for i in range(min(leading_ones, n), n)) * sum(abs(x) for x in filter(None, vector)) / min(sum_elements, sum(map(abs, vector)))




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * math.exp(-2 * abs(1 - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(lambda x: -x if x > 0 else x, vector)) + len([i for i, x in enumerate(vector) if x == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) + sum(1 for x in vector if x != 0)




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
    min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
    sum(map(abs, filter(None, vector)))/sum_elements + 
    sum_elements/len(vector)**2)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       math.log((sum(map(abs, filter(None, vector)))+1)/(sum_elements+1)))




#score: {'n8_size512.txt': 297}
#island_id: 3
#version_generated: 3
#generate time13:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/sum_elements + 
       sum(map(lambda x: abs(x)**2/len(vector), vector)) / sum_elements)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - len(vector) / 2) / len(vector)) * (trailing_zeros / n) - sum_elements**2/trailing_zeros if trailing_zeros else -sum_elements




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector)))).count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 284}
#island_id: 1
#version_generated: 3
#generate time13:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2) / (len(vector)**2) - ((trailing_zeros/n)**2) + abs(sum_elements - len(vector)/2) * (trailing_zeros/n)




#score: {'n8_size512.txt': 286}
#island_id: 2
#version_generated: 3
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / (n * math.sqrt(n)) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n) + min((x**2)/n for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  # Improved algorithm
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / (n * math.sqrt(n)) + ((n - len([x for x in vector if x])) ** 2) / (n * n)) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / (n * n) - min((x**2)/(n * n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / (n * n) - sum(sorted(vector)[::-1]) / (n * n) + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**3) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + (n - bin(int(''.join(map(str, vector)))).count('0')) / n ** 2




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - Counter(vector)['1']) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))

  return -(sum_vector / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_vector - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))

  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - (n * math.log(n)) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(sum(1 if i == 0 else len(str(x)) for i, x in enumerate(vector))) * n / len(vector)




#score: {'n8_size512.txt': 313}
#island_id: 3
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * 
       (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    min(n - leading_ones, n) * np.exp(-(leading_ones + sum(1 for x in vector if x == 0)) / n) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - max(0, leading_ones)) * np.exp(-min(max(0, leading_ones), n) / n) / n)




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time13:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log10(n - leading_ones + 1) / math.log10(n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * sum_elements / n)




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * (n - leading_ones) / (n * n) + 
       sum(i for i in range(len(vector)) if vector[i] == 0) / n)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - trailing_zeros/n




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n) + (len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector))




#score: {'n8_size512.txt': 299}
#island_id: 2
#version_generated: 3
#generate time13:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n) + sum(1 for i in range(len(vector)) if vector[i] == 0) * (math.sqrt(n) / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(vector) - sum_elements
  return -(sum_elements + (trailing_zeros / n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * sum(1 for _ in range(n)) if all(x <= n/2 for x in vector) else sum(1 for _ in range(n))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time13:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n




#score: {'n8_size512.txt': 273}
#island_id: 2
#version_generated: 3
#generate time13:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - (len([x for x in vector if x==0]))/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))

  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, filter(None, vector)))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector)))
  )




#score: {'n8_size512.txt': 273}
#island_id: 1
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((Counter(vector).most_common(1)[0][1] > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + (len(bin(int(''.join(map(str, vector))))[2:].lstrip('0')) / n)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + (len(bin(int(''.join(map(str, vector))))[2:]) - bin(int(''.join(map(str, vector)))).count('0')) / n




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((Counter(bin(int(''.join(map(str, vector))))[2:]).most_common(1)[0][1] > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n) + abs(sum(math.sqrt(x) for x in vector) - n)




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 1.5 * (abs(sum(vector) - len(vector) // 2)) ** .5




#score: {'n8_size512.txt': 264}
#island_id: 1
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(math.sqrt(x) for x in vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)) * 2 - ((sum(vector) > len(vector) // 2) > 0)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time13:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((math.fabs(sum(vector) - len(vector) / 2)) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - (Counter(vector).get(0, 0)) / n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n
  trailing_zeros = sum((x==0)*x for x in vector)
  return -(sum(vector) / n + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (len(str(sum(0 for _ in vector))) - len(str(sum(0 for _ in vector)).lstrip('0')))/n) - sum(x for x in vector) / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(vector)) - len(str(vector).rstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector))) + math.log((n - leading_ones) / n) + trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  zeros_count = Counter(vector)[0]
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       math.log((n - leading_ones) / n) + 
       zeros_count)




#score: {'n8_size512.txt': 271}
#island_id: 2
#version_generated: 3
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([x for x in vector if not x]) ** 2 / (n * len(vector)) + abs(sum(x for x in vector) - n/2) * len([x for x in vector if not x]) / n - min((x**2)/n for x in vector) + max(-sum(x for x in vector), 0)




#score: {'n8_size512.txt': 305}
#island_id: 2
#version_generated: 3
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n) + Counter(''.join(map(str, vector)))[str(0)]/n




#score: {'n8_size512.txt': 306}
#island_id: 2
#version_generated: 3
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n) + (sum([i for i in range(len(vector)) if vector[i] == 0])/(len(vector))) * n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + abs(sum_elements) / (n**2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + abs(sum_elements) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -math.exp(-abs(sum_elements) / (n * 2.5)) - math.log10(trailing_zeros + 1) * 3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  # Calculate the proportion of zeros in the vector
  zero_proportion = len([i for i in vector if i == 0]) / n
  
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + (1 - zero_proportion) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n - len([i for i in reversed(vector) if i == 0]) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Improved version of `priority_v0`.
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  
  return -sum_elements * math.log(trailing_zeros / n, 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  
  # Calculate the number of trailing zeros in the vector
  trailing_zeros = len(str(sum(1 for elem in reversed(vector) if elem == 0)))
  
  # Assign a higher priority to vectors with lower sum of elements and more trailing zeros
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(abs, vector)) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(x**2 for x in filter(None, vector)) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector)))) + 
       sum(1 for elem in vector if elem == 0) / n * 
       sum(map(abs, filter(None, vector))) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in set(vector)) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, vector)))




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(map(lambda x: abs(x), vector)) ** (0.5 / len(set(vector)))) + 
       sum(1 for elem in vector if elem == 0) / n * 
       sum(vector) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements * math.log2(n) - trailing_zeros / (n * math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(vector).count('0')
  return -sum_elements - (trailing_zeros / n if trailing_zeros else 0)




#score: {'n8_size512.txt': 286}
#island_id: 3
#version_generated: 3
#generate time13:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len([x for x in vector if x == 0])
  
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - leading_ones) / n * sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, n) + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time13:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * math.sin((bin(int(''.join(map(str, vector)))).count('0') / n))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time13:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(math.sqrt(x) for x in vector)
  trailing_zeros = len(bin(int(''.join(map(str, vector))))[2:]) - len(bin(int(''.join(map(str, vector))))[2:].lstrip('0'))
  return -sum_elements + (trailing_zeros / n) ** 2 * math.e ** (-((len(vector) // 2 - sum_elements) ** 2) / (n ** 2))




#score: {'n8_size512.txt': 258}
#island_id: 1
#version_generated: 3
#generate time13:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n + min(sum(x for x in sorted(vector[::-1])), sum(x for x in sorted(vector)))




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n
  trailing_zeros = len(str(sum(x for x in vector)))
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - (trailing_zeros - len(str(abs(sum(x for x in vector)))))/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))

  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time13:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([bin(i).count('0') for i in vector])))
  return -sum_elements / n - (trailing_zeros / len(str(n)))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x == 0])) ** 2 / n) - sum(1 for _ in range(n - len([x for x in vector if x == 0]))) / n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / n + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector)




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.log(n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time13:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) - (len(str(sum(x for x in vector))) - len(str(sum(x for x in vector)).lstrip('0')))/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements / (n * math.log2(n)) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0]))).bit_length()
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = Counter(str(x) for x in vector).get('0', 0)
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 280}
#island_id: 2
#version_generated: 3
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((n-sum(vector))/n)**2 - sum(x for x in vector if x==0) / n + (max(vector)-min(vector)) / n




#score: {'n8_size512.txt': 259}
#island_id: 2
#version_generated: 3
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements)) - len(str(sum_elements).lstrip('0'))
  trailing_zeros = sum(x == 0 for x in vector)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - leading_zeros/n - trailing_zeros/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  sum_ones = len([x for x in vector if x])
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - sum_ones) ** 2 / n) + abs(sum_elements - n/2) * (n - sum_ones) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(x for x in vector) / n) + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(x for x in vector))))-len(str(abs(sum(x for x in vector))).lstrip('0')))/n




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((len(vector) // 2 < sum(vector)) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (Counter(''.join(map(str, vector)))[str(0)]) / n ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (len(set(vector)) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -sum_elements ** (0.5 / len(set(vector))) - max((n - i) / n for i in range(min(n, leading_ones), n)) * sum(map(abs, filter(None, vector))) / min(sum_elements, len(vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))))




#score: {'n8_size512.txt': 267}
#island_id: 3
#version_generated: 3
#generate time14:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), n) * (n - len(set(filter(None, vector)))) / n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - sum(0 if x else 1 for x in vector) ** 2 / (n * (n > 0)) + abs(sum(vector) - n/2) * sum(0 if x else 1 for x in vector) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + ((len(vector) // 2 < sum(vector)) > 0) * (-bin(int(''.join(map(str, vector))))[2:].count('1') / n)**2




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time14:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((len(vector) // 2 < sum(vector)) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n) - (sum(vector) ** 2) / (n * (n-1))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  unique_elements = len(set(vector))
  return -(sum_elements ** (0.5 / unique_elements) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) + 
       sum_elements / len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for elem in vector if not elem))) - 1
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_zeros, n), n)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(bin(sum(1 for elem in vector if not elem))[2:])
  return -(sum_elements ** (0.5 / len(set(vector))) + max((n - i) / n for i in range(min(leading_zeros, n), n)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector) / sum(vector) + 
       max(0, (n - str(sum(vector)).rstrip('0').count('0')) / n))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       min(n - sum(1 for elem in vector if not bool(elem)), n) / n * 
       sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(abs(x) for x in vector) / sum(vector) + 
      max(0, ((n - str(sum(vector)).rstrip('0').count('0')) / n)))




#score: {'n8_size512.txt': 321}
#island_id: 3
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(vector) ** (0.5 / len(set(vector)))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(abs(x) for x in vector) / sum(vector) + 
       max(0, (n - len(str(sum(vector)).rstrip('0').lstrip('0'))) / n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - Counter(str(x) for x in vector)['1']) ** 2 / n) + abs(sum_vector - n/2) * (n - Counter(str(x) for x in vector)['1']) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 284}
#island_id: 2
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / (n * math.sqrt(n)) + (n - Counter(vector)['1']) ** 2 / n) + abs(sum_vector - n/2) * (n - Counter(vector)['1']) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - (n - Counter(str(abs(sum(x for x in vector))))['1'])/n - trailing_zeros/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i, x in enumerate(vector) if x == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - Counter(str(abs(sum(x for x in vector))))['0'] / n - math.log(n)




#score: {'n8_size512.txt': 274}
#island_id: 2
#version_generated: 3
#generate time14:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len(str(sum_vector).lstrip('0')) if str(sum_vector)[0] == '0' else 0
  trailing_zeros = len(str(sum_vector)) - len(str(sum_vector).rstrip('0'))

  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time14:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + abs(sum(1 for i in Counter(vector).values() if i < n // 4) - len([i for i in Counter(vector).values() if i > n // 4])) * (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + abs((len(vector) // 2) - sum(vector)) / n - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((Counter(''.join(map(str, vector)))[0] > len(Counter(''.join(map(str, vector)))) // 2) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n) - sum(x**2 for x in vector)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (math.log10(n) * bin(int(''.join(map(str, vector)))).count('0'))




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + min((abs(sum(vector)-n/2) < 1e-6), sum(vector)/n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n) + sum(x for x in Counter(vector).values() if x>1)




#score: {'n8_size512.txt': 281}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(math.sqrt(x) for x in vector)
  trailing_zeros = bin(int(''.join(map(str, vector))))[2:].count('0')
  return -sum_elements - (trailing_zeros / n)**2 + ((abs(sum_elements-n/2) < 1e-6) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((n % 2 == 0 and sum(vector) < n // 2 or sum(vector) > n // 2) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + (abs(sum(vector)-n/2) < 1e-6).astype(int) * (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((len(set(vector)) > sum([x for x in set(vector) if x != 0])) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 285}
#island_id: 1
#version_generated: 3
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 - (math.log10(n) * bin(int(''.join(map(str, vector)))).count('0'))




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * math.sqrt((math.log10(n) * bin(int(''.join(map(str, vector)))).count('0'))/(sum(vector)))




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * math.exp(-math.log10(n) * bin(int(''.join(map(str, vector)))).count('0'))




#score: {'n8_size512.txt': 287}
#island_id: 2
#version_generated: 3
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([x for x in vector if x]) ** 2 / (n * (n > 0)) + abs(sum(vector) - n/2) * len([x for x in vector if x]) / n - min(x**2/n for x in Counter(vector).values()) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (str(abs(sum(vector))).count('0') / n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - sum(0 if x else 1 for x in vector) ** 2 / (n * (n > 0)) + abs(sum(vector) - n/2) * sum(0 if x else 1 for x in vector) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(x for x in vector))))-len(str(abs(sum(x for x in vector))).lstrip('0')))/n + min((x+1)**2/n for x in range(1, max(vector)+2))




#score: {'n8_size512.txt': 295}
#island_id: 2
#version_generated: 3
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - sum(0 if x else 1 for x in vector) ** 2 / (n * (n > 0)) + abs(sum(vector) - n/2) * sum(0 if x else 1 for x in vector) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - Counter(str(abs(sum(x for x in vector))))['0'] / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([x for x in vector if x == 0]) ** 2 / (n * (n > 0)) + abs(sum(vector) - n/2) * len([x for x in vector if x == 0]) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + abs(sum(vector) - len(vector) // 2) / (n * min([x for x in vector]))




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2 + ((len(vector) // 2 < sum(vector)) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
       max(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 0) / n + 
       math.log10(sum(bin(i).count('0') for i in range(2**n))) * 2 / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** (0.5 / len(set(vector)))) + 
       sum(1 for _ in range(len(str(sum(1 for elem in vector if elem == 0))), n)) / n + 
       np.exp(-n * bin(sum(1 for elem in vector if elem == 1))[2:].count('1') / len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_zeros = len(str(sum(1 for elem in vector if elem == 0)).lstrip('0'))
  return -(sum_elements ** (0.5 / len(set(vector)))) - (n - leading_zeros) / n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len([x for x in vector if x == 0]) ** 2 / (n * math.log(n)) - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 316}
#island_id: 3
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector)) + 
      (sum(map(abs, filter(None, vector))) ** 0.5) / sum_elements)




#score: {'n8_size512.txt': 285}
#island_id: 3
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -sum(map(lambda x: abs(x) / sum_elements, filter(None, vector))) - min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * (n - len(vector)) / (n * n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * (n + len(vector)) / (n * (n + len(vector))))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(len(vector) - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) * min(n, len(vector)) / (n * len(vector)) + 
       sum(map(lambda x: abs(x)**2 / sum_elements, filter(None, vector))) + 
       sum(sorted(vector)[::-1]) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0]))).bit_length()
  return -(sum_elements * (n - trailing_zeros) + trailing_zeros ** 2 / (8 * n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0]))).bit_length()
  return -(sum_elements + math.log2(trailing_zeros) / math.log2(n))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector)/n - (len([x for x in vector if x==0]) / len(vector)) * 2 - max(sum(x for x in vector), 0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector)/n - (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n - sum(1 for x in vector if x==0)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = -sum(x for x in vector) / n
  trailing_zeros = len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0'))
  return sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements ** (0.5 / min(len(set(vector)), n)) + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n + 
       (sum(abs(x) for x in filter(lambda x: x == 0, vector)) ** 2) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -(sum_elements ** (0.5 / min(len(set(vector)), n)) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
      (n - trailing_zeros) / n + 
      sum(x ** 2 for x in vector) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  
  return -((sum_elements / (n ** 0.5)) ** 2 + 
       max((n - i) / n for i in range(min(leading_ones, n), n)) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
       (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  counter = Counter(vector)
  leading_ones = len([x for x in vector if x == 1])
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).rstrip('0').replace('0', ''))
  
  return -(sum_elements ** (math.sqrt(len(set(vector))) / min(len(set(vector)), n)) + 
       math.exp(-leading_ones / n) * 
       sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements + 
       (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 265}
#island_id: 1
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n) + (sum(math.sqrt(x) for x in vector) - min(vector))**2




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), 1) / n)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       min(n - leading_ones, n) * np.exp(-leading_ones / n) / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  return -(sum_elements ** (0.5 / len(set(vector))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) ** 0.5 / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements * math.log2(n) - (trailing_zeros / n if n != 0 else 0)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements / (n * math.log2(n)) - (trailing_zeros / (n * math.log2(n)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements * math.log2(n) - trailing_zeros / (n * math.log2(n)) + math.exp(-math.sqrt(sum_elements) / (n * math.log2(n))) - math.cos(trailing_zeros / (n * math.pi))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + math.exp(len([x for x in vector if x]))/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + len([x for x in vector if x]) ** 2 / n) - sum(x**2/n for x in vector) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n + (max(vector) - min(vector)) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + math.exp(len([x for x in vector if x]) / n)) - (str(abs(sum(x for x in vector))).count('0') / n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (-math.log10(n) * bin(int(''.join(map(str, vector)))).count('0'))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + (len(str(bin(int(''.join(map(str, vector)))))[2:]) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - math.log10(n) * (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * math.log10(n+1) * bin(int(''.join(map(str, vector)))).count('0')




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
      sum(x for x in vector) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 259}
#island_id: 3
#version_generated: 3
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
      min(n - sum(1 for elem in vector if elem == 1), n) / n * 
      sum(x for x in vector) / sum(map(abs, vector)))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(abs(x) for x in vector) ** (0.5 / len(set(vector))) + 
         min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
         sum(map(abs, vector)) / sum(abs(x) for x in vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - len(bin(int(''.join(map(str, vector))))[2:]) / n




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((len(vector) // 2 < sum(vector)) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n) - (sum(vector) ** 2) / (n * (n-1)) - (sum(math.sqrt(x) for x in vector)**2) / (n**3)




#score: {'n8_size512.txt': 272}
#island_id: 1
#version_generated: 3
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - len([i for i in bin(int(''.join(map(str, vector))))[2:] if i == '0']) / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time14:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((len(vector) // 2 < sum(vector)) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n) - (sum(vector) ** 2) / (n * (n-1)) + math.exp(-((sum(vector) / n) ** 2))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  trailing_zeros = len(str(sum(1 for elem in vector if elem == 0)))
  return -(sum_elements + 
    max((n - i) / n for i in range(min(n, leading_ones), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum_elements, sum(map(abs, vector))) + 
    (n - trailing_zeros) / n)**2




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
    sum(1 for _ in range(min(n, bin(sum(1 for elem in vector if elem == 1))[2:].count('1')), n)) * 
    sum(map(abs, filter(None, vector))) / min(sum(map(abs, vector)), sum(map(abs, vector))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.log(n) - (trailing_zeros / n) + abs(sum_elements) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  # New term to promote vectors with more zeros
  trailing_zeros_reward = math.exp(-sum_elements / n) * (trailing_zeros ** 2) / (n**3)

  return -sum_elements - trailing_zeros / n + trailing_zeros_reward




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n**2)) + abs(trailing_zeros) / (n**2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / (n ** 2)) + abs(trailing_zeros) / (n ** 3)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * math.log10(n+1) * bin(int(''.join(map(str, vector)))).count('0') - (math.fabs(math.prod(vector) - sum(vector) ** len(vector))) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(bin(int(''.join(map(str, vector))))[2:]) - len(bin(int(''.join(map(str, vector)))).lstrip('0')[2:])
  
  return -sum_elements - (trailing_zeros / n)**2 + math.log10(n+1) * min(trailing_zeros, 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + math.log10(n+1) * (bin(int(''.join(map(str, vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) + math.log10(n+1) * bin(int(''.join(map(str, vector)))).count('0') - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2




#score: {'n8_size512.txt': 294}
#island_id: 2
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + len(str(abs(sum(x for x in vector))))-len(str(abs(sum(x for x in vector))).lstrip('0'))/n - sum(1 for x in sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (len(str(abs(sum(x for x in vector))))-len(str(abs(sum(x for x in vector))).lstrip('0')))/n




#score: {'n8_size512.txt': 314}
#island_id: 2
#version_generated: 3
#generate time14:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - (n - sum(1 for x in vector if x)) ** 2 / (n * (n > 0)) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x+1)**2/n for x in range(min(vector)+1, max(vector)+2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + abs(sum_elements)**(0.5)/(n**2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -(sum_elements ** 2) - ((trailing_zeros / n) * math.exp(-(abs(sum_elements) / n)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -sum_elements * math.exp(-abs(sum_elements) / n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  return -math.log((sum_elements + 1) / (n * math.exp(-abs(sum_elements) / n))) - abs(trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([i for i in vector if i != 0])))
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))

  return -sum_elements - (leading_zeros + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = str(sum([i for i in vector if i == 0])).count('0')
  return -sum_elements - trailing_zeros_count / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  return -sum_elements - (trailing_zeros / n) * math.log10(trailing_zeros + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum((i for i in vector if i == 0))))
  
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(x for x in vector)))) - len(str(abs(sum(x for x in vector))).lstrip('0')))/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) - max(-sum(x for x in vector), 0) - (max(vector) - min(vector)) / n + sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([i for i in vector if i != 0])))
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))

  return -sum_elements - (leading_zeros + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([i for i in vector if i != 0])))
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))

  return -sum_elements - (leading_zeros + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:21
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([i for i in vector if i != 0])))
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))

  return -(sum_elements + (leading_zeros + trailing_zeros) / n) - math.log2(n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 322}
#island_id: 2
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n + abs(sum_vector - 0.5*n)**0.5




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - (n-1)*math.log(n) - trailing_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([math.pow(x / n, 2) for x in vector]) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.sqrt(sum(map(abs, filter(None, vector)))) + 
       (n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1')) / n * 
       sum(map(abs, filter(None, vector)))/min(sum(vector), n))




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, filter(None, vector)))**(0.5/len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(vector)/min(sum(vector), n))




#score: {'n8_size512.txt': 276}
#island_id: 3
#version_generated: 3
#generate time14:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**(0.5/len(set(vector))) + 
       min(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'), n) / n * 
       sum(map(abs, filter(None, vector)))/min(sum(vector), n) + 
       len([x for x in vector if x != 0]) / (n ** 0.5))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + (len([x for x in vector if x == 0]) / len(vector)) * (n / (2 * sum(1 for x in vector))) ** 2




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((len(vector) // 2 < sum(vector)) > 0) * (bin(int(''.join(map(str, vector)))).count('0') / n) - (sum(vector) ** 2) / (n * (n-1)) + max(0, len(set(vector)) / n)**2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0))[2:])
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements * (n + 1) / (n ** 2) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + (abs(sum(vector)-n/2) < 1e-6).astype(int) * (bin(int(''.join(map(str, vector)))).count('0') / n) + sum(x for x in vector if x > 10)




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + sum(1 if i < len(vector) // 2 else -1 for i in range(len(vector)))




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + (abs(sum(vector)-n/2) < 1e-6).astype(int) * (bin(int(''.join(map(str, vector)))).count('0') / n) - sum(x for x in vector if x > math.sqrt(n))




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time14:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) ** 2




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + (abs(sum(vector)-n/2) < 1e-6).astype(int) * (bin(int(''.join(map(str, vector)))).count('0') / n)




#score: {'n8_size512.txt': 280}
#island_id: 1
#version_generated: 3
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(math.sqrt(x) for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + sum(1 if x < math.sqrt(n) else 0 for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  # Calculate the proportion of zeros in the vector
  zero_proportion = len([i for i in vector if i == 0]) / n
  
  # Improve the calculation by considering the distribution of elements in the vector
  element_distribution = Counter(vector)
  distribution_sum = sum(map(lambda x: math.pow(x[1], 2), element_distribution.items()))
  
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + (1 - zero_proportion) ** 2 - distribution_sum / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  # Calculate the proportion of zeros in the vector
  zero_proportion = len([i for i in vector if i == 0]) / n
  
  # Calculate the logarithm of the sum of elements
  log_sum_elements = math.log(sum_elements + 1)
  
  return -sum_elements - (trailing_zeros / n) * math.exp(-abs(log_sum_elements)) + (1 - zero_proportion) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a priority to a vector based on its sum of elements, number of trailing zeros, and proportion of zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  zero_proportion = len([i for i in vector if i == 0]) / n
  
  return -sum_elements * (1 - math.exp(-abs(sum_elements) / n)) - (trailing_zeros / n) * math.exp(-abs(sum_elements) / n) + (1 - zero_proportion) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in reversed(list(vector)) if i == 0])
  
  zero_proportion = len([i for i in vector if i == 0]) / n
  avg = sum_elements / n
  
  return -sum_elements * math.exp(-abs(sum_elements) / (n * avg)) + (1 - zero_proportion) ** 2 - trailing_zeros / n




#score: {'n8_size512.txt': 302}
#island_id: 3
#version_generated: 3
#generate time14:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) ** (0.5 / len(set(vector))) + 
       sum(1 for _ in range(n - bin(sum(1 for elem in vector if elem == 1))[2:].count('1'))))




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n + (len(str(abs(sum(x for x in vector)))) - len(str(abs(sum(x for x in vector))).lstrip('0')))/n




#score: {'n8_size512.txt': 326}
#island_id: 2
#version_generated: 3
#generate time14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - (str(abs(sum(x for x in vector))).count('0') / n) - math.log(n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(x == 0 for x in vector)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(leading_zeros) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - len([x for x in vector if x == 0]) / n + (n - sum(1 for x in vector)) ** 2 / n * 2




#score: {'n8_size512.txt': 278}
#island_id: 2
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - Counter(str(abs(sum(x for x in vector))))['0'] / n




#score: {'n8_size512.txt': 295}
#island_id: 2
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.log(n) - Counter(str(abs(sum(x for x in vector))))['0'] / n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (Counter(str(abs(sum(x for x in vector))))['0'] / n) - math.log(n)




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * math.log10(n) * bin(int(''.join(map(str, vector)))).count('0') - (sum(vector) ** 2) / (n * (n-1))




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (-math.log10(n) * (Counter({str(x): i for i,x in enumerate(vector)}).most_common(1)[0][1] - Counter({str(x): i for i,x in enumerate(vector)}).most_common()[-1][1]))




#score: {'n8_size512.txt': 304}
#island_id: 1
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) - (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2 + ((abs(sum(vector)-n/2) < 1e-6) > 0) * (math.log10(n) * bin(int(''.join(map(str, vector)))).count('0')) - math.exp(-sum(vector)/n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (trailing_zeros / n)
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 319}
#island_id: 2
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum(vector) - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n + (len(str(abs(sum(vector))))-len(str(abs(sum(vector))).lstrip('0')))/n - max(x for x in vector) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(abs(sum_elements))) - len(str(abs(sum_elements)).lstrip('0'))
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min(x**2/n for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(sum(1 for i in range(len(vector)) if vector[i] == 0)) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (trailing_zeros / n) + min((sum_elements - max(vector)) ** 2, (min(vector) - sum_elements) ** 2)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (math.log10(n) * bin(int(''.join(map(str, vector))))[2:].count('0')) - math.exp(-sum(vector)/n)




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.prod([i for i in vector]) * math.log10(n) + (n - sum(vector)) ** 2 / (8 * n)




#score: {'n8_size512.txt': 264}
#island_id: 1
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n) - math.exp(-sum(vector)/n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time14:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + bin(int(''.join(map(str, vector))))[2:].count('0')) + math.exp(-sum(vector)/n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_vector = sum(vector)
  leading_zeros = len([i for i in range(len(vector)) if vector[i] == 0])
  trailing_zeros = len(str(abs(sum_vector))) - len(str(abs(sum_vector)).lstrip('0'))
  
  return -(sum_vector / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_vector - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum_vector, 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(leading_zeros) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n - sum([i for i in range(len(vector)) if not (vector[i] == 0 or (vector[i]%n) !=0)])/(n*(len(vector)-1))




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(sum(vector))) - len(str(sum(vector)).rstrip('0')))/n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum((i for i in vector if i == 0))))
  
  return -sum_elements / (n + math.log2(trailing_zeros))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum((i for i in vector if i == 0))))
  
  return -sum_elements / (n + 1) * math.log2(n + 1) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(Counter(vector).values())
  trailing_zeros = len(str(sum((i for i in vector if i == 0))))
  
  return -sum_elements * math.log10(n) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for i in vector if i != 0)
  trailing_zeros = len(str(sum((i for i in vector if i == 0))))
  
  return -sum_elements * (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([i for i in vector if i != 0])))
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))
  
  return -sum_elements - (leading_zeros + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([i for i in vector if i != 0])))
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))

  return -sum_elements - (leading_zeros + trailing_zeros) / n - math.log2(sum(1 for _ in itertools.groupby(vector))) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum([i for i in vector if i != 0])))
  trailing_zeros = len(str(sum([i for i in vector if i == 0])))

  return -sum_elements + (leading_zeros * math.log2(n) + trailing_zeros * math.log2(n)) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(x**2 for x in filter(lambda x: x != 0, vector)) / sum_elements)




#score: {'n8_size512.txt': 301}
#island_id: 3
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  trailing_zeros = bin(sum(1 for elem in vector if elem == 0))[2:].count('0')
  return -(sum_elements ** (0.5 / unique_elements) + 
      max((n - i) / n for i in range(trailing_zeros, n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  unique_elements = len(set(vector))
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  return -(sum_elements ** (0.5 / unique_elements) + 
       trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(abs(x) for x in vector)
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
      max((n - i) / n for i in range(min(leading_ones, n), n)) * 
      sum(abs(x) for x in filter(lambda x: x != 0, vector)) / sum_elements + 
      sum(x for x in sorted(vector, reverse=True)))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([i for i in vector if i == 0]) / (n * math.log10(n)) - math.exp(-sum(vector)/n)




#score: {'n8_size512.txt': 265}
#island_id: 1
#version_generated: 3
#generate time14:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2 + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)) + math.log10(n) * bin(int(''.join(map(str, vector)))).count('0')




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + len([i for i in vector if i == 0]) * math.log10(n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -math.prod([x for x in vector if x != 0]) * sum([x for x in vector if x == 0]) / (n * len([x for x in vector if x == 0])) + math.log10(n) * Counter(vector)[0]




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) + math.log10(n) * bin(int(''.join(map(str, vector))))[2:].count('0') - math.exp(-sum(vector)/n)




#score: {'n8_size512.txt': 269}
#island_id: 1
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + (bin(int(''.join(map(str, vector))))[2:].count('0') / n)**2) * math.log10(n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(math.fabs(sum(vector) - (n / 2))) + math.log10(n) * bin(int(''.join(map(str, vector))))[2:].count('0') - (math.exp(-sum(vector) / n)) 




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2 + bin(int(''.join(map(str, vector))))[2:].count('0') * math.log10(n)) / (n**2)




#score: {'n8_size512.txt': 326}
#island_id: 3
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(map(abs, vector))
  leading_ones = bin(sum(1 for elem in vector if elem == 1))[2:].count('1')
  return -(sum_elements ** (0.5 / len(set(vector))) + 
     max((n - i) / n for i in range(min(leading_ones, n), n)) * 
     sum(abs(x) for x in filter(lambda x: x != 0, vector)) / min(sum_elements, len(vector)) + 
     sum(abs(x) for x in filter(lambda x: x == 0, vector)) / (n - leading_ones))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -((sum(abs(x) for x in vector) ** 
       (0.5 / len(set(vector)))) + 
      sum(1 for elem in filter(None, vector)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(int(''.join(map(str,vector)))).lstrip('0b').replace('1', '')) or 0
  return -sum_elements * math.log2(n) - (trailing_zeros / n if n != 0 else 0)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements * math.log2(n) - (trailing_zeros / n if n != 0 else 0)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements * math.log2(max(1, n)) - (trailing_zeros / max(1, n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time14:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0')) or 0
  return -sum_elements * math.log2(n + 1) - (trailing_zeros / (n + 1) if n != 0 else 0)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n
  return -(sum_elements / n + (n - len([x for x in vector if x])) ** 2 / n) - (len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) - (len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 331}
#island_id: 2
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum_elements)) - len(str(sum_elements).rstrip('0'))
  
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum_elements - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - trailing_zeros/n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 285}
#island_id: 2
#version_generated: 3
#generate time14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - len([x for x in vector if x])) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - len([x for x in vector if x])) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - sum(x for x in vector)/(n**2) - sum(x for x in vector)/n - (len(str(abs(sum(x for x in vector)))) - len(str(abs(sum(x for x in vector))).lstrip('0')))/n - (sum_elements := sum(vector)) / n




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / n + (n - sum(1 for x in set(vector))) ** 2 / n) + abs(sum(x for x in vector) - n/2) * (n - sum(1 for x in set(vector))) / n - min((x**2/n) for x in set(vector)) + max(-sum(x for x in vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n - math.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 2
#version_generated: 3
#generate time14:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) / n - len([x for x in vector if x == 0]) ** 2 / (n * n)




