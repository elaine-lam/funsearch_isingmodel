#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 00:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements + trailing_zeros) / n




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time: 00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 00:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + min(trailing_zeros, sum_elements)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 00:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 - ((n // 2 - sum_elements) / n) ** 2 + ((trailing_zeros > (n // 4)) > 0) * ((n // 4 - trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  return -sum_elements / (n + 1) - len(str(bin(int(''.join(map(str, vector)))))) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 00:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((trailing_zeros > n // 4) > 0) * (3 * trailing_zeros / n)




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time: 00:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) + ((n // 2 - sum_elements) / n) ** 2 - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 00:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -((n / 2 - sum_elements) / n) ** 2 * (1 + (sum_elements > n // 2)) - abs(sum_elements / len(vector) - n / 2) * sum_elements




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 00:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + min(trailing_zeros, n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 00:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) - (len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time: 00:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 0
#version_generated: 3
#generate time: 00:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n / 2:
    return -(trailing_zeros / n) - (sum_elements * 2 - n) ** 2
  else:
    return -(2 * sum_elements + n - 1) - ((n // 2 - sum_elements) / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 00:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + (trailing_zeros > n // 4) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 00:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) - ((trailing_zeros > len(vector) // 4) > 0) * (len(vector) // 8)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time: 00:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 - (n // 2 - sum_elements) ** 2 + abs(trailing_zeros / n)**1.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 00:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (n - sum_elements) ** 2) / n + (trailing_zeros / n) if sum_elements < n // 2 else -((n - sum_elements) ** 2) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum([x * (10 ** i) for i, x in enumerate(reversed(vector))])))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 00:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) + bin(int(''.join(map(str, vector)))).count('0')) / (n + 1)




#score: {'n8_size512.txt': 261}
#island_id: 1
#version_generated: 3
#generate time: 00:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).rstrip('0').lstrip('0'))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time: 00:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) / (n + 1) - sum(b == '0' for b in bin(int(''.join(map(str, vector))))).bit_length() / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 00:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n // 2:
    return -sum_elements + (n // 2 - sum_elements) ** 2 / n
  else:
    return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) - (len([x for x in vector if x == 0]) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 + (n // 2 - sum_elements) ** 2 + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 00:37
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) / (n * len(vector)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time: 00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / (n * (n + 1) / 2) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(''.join(map(str, vector)).rstrip('0'))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(''.join(map(str, vector)).lstrip('0'))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 00:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n // 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements <= n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 00:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) + min(sum_elements, n // 2) - 1




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum(2**i if ((vector[i] << i) & (vector[i])) else 0 for i in range(len(vector)))).rstrip('0').lstrip('0') or '0')
  return -sum_elements / n - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 00:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  leading_zeros = len(str(n)) - len(str(n).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / (n + 1) - (leading_zeros + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  leading_zeros = len(str(n)) - len(str(n).lstrip('0'))
  return -(sum_elements + leading_zeros) / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  return -sum_elements / (n + 1) - len(str(bin(int(''.join(map(str, vector)))))) // 4




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) - ((n // 2 - sum_elements) / n) ** 2 + (trailing_zeros / n)




#score: {'n8_size512.txt': 300}
#island_id: 0
#version_generated: 3
#generate time: 01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) / (n * len(vector)) - ((n // 2 - sum_elements) / n) ** 2 + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 01:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) + min(sum_elements, n - sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) - (len([x for x in vector if x == 0]) / len(vector))




#score: {'n8_size512.txt': 293}
#island_id: 0
#version_generated: 3
#generate time: 01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  if sum_elements <= n // 2:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((trailing_zeros / n))
  else:
    return sum_elements * (1 - abs((2 * sum_elements / len(vector) - 3) / 2)) + ((sum_elements - n // 2) / n) ** 2 - (trailing_zeros / n)




#score: {'n8_size512.txt': 266}
#island_id: 0
#version_generated: 3
#generate time: 01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) - max(sum_elements, len(vector) - trailing_zeros)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 01:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements + trailing_zeros) / (n * 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(int(''.join(map(str, vector))))) - sum_elements
  return -(sum_elements / (n + 1) + trailing_zeros / n)




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time: 01:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector)))))) - str(bin(int(''.join(map(str, vector))))).rstrip('0').count('0')
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  leading_ones = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements / (n + 1) - (len(vector) - leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  return -sum_elements / (n + 1) - len(str(bin(int(''.join(map(str, vector)))))) // 4




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(2**i if (vector[-1-i]%2) else 0 for i in range(len(vector)))).lstrip('0'))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(''.join(map(str, vector)).rstrip('0'))
  return -(sum_elements / (n + 1)) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0').lstrip('0b'))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements + trailing_zeros) / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(int(''.join(map(str, vector)))).rstrip('0').lstrip('0'))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum(1 << i if v else 0 for i, v in enumerate(vector)))) - len(str(sum(1 << i if v else 0 for i, v in enumerate(vector))).lstrip('0'))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 01:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 01:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements / (n + 1) + trailing_zeros / n)**2




#score: {'n8_size512.txt': 261}
#island_id: 0
#version_generated: 3
#generate time: 01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + (abs(sum_elements - n/2) * trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 01:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements**2 + trailing_zeros) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 01:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 - ((n // 2 - sum_elements) / n) ** 2 + (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 01:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n // 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((n // 2 - sum_elements) / n) ** 2 + (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 01:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) * (2 - abs(2 * sum(1 for x in vector if x) / len(vector) - 1)) - ((n // 2 - sum(1 for x in vector if x)) / n) ** 2 + ((sum(1 for x in vector if x) > n // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0') or '0')
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 01:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / (n + 1) - trailing_zeros / n - sum(1 for x in set(vector)) / n




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).rstrip('0').replace('0', ''))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0'))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 263}
#island_id: 1
#version_generated: 3
#generate time: 01:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).rstrip('0').lstrip('0'))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) + abs(sum_elements - n // 2) / n + ((trailing_zeros > 0) and (sum_elements < n // 2))




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time: 01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * n) + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time: 01:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time: 02:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time: 02:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros ** 2) / (n + 1)




#score: {'n8_size512.txt': 297}
#island_id: 0
#version_generated: 3
#generate time: 02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2/trailing_zeros - (n-sum_elements)**2/n




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time: 02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) + max(-min(vector), 0) / (max(vector) if max(vector) else 1)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time: 02:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time: 02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements ** 2 / (n + 1) + trailing_zeros ** 2 / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements + (n - trailing_zeros)) / (n + 1)**2




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time: 02:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements / (n + 1) + trailing_zeros / n)**3 - abs(sum_elements / (n + 1) - trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) - min(sum_elements, max(vector), key=lambda x: abs(x-n//2))/abs(n//2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) + max(-min(vector), 0) / (max(vector) if max(vector) else 1) - abs(sum_elements - n/2)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  leading_zeros = len(str(n)) - len(str(n).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / (n + 1) - (leading_zeros + trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 02:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) - (sum_elements ** 2) / (len(vector) * n)




#score: {'n8_size512.txt': 263}
#island_id: 1
#version_generated: 3
#generate time: 02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).replace("0b", "").rstrip("0"))
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) - ((len(vector) - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 / (n**2) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / (n + 1) - min(trailing_zeros, len(str(n))) / n




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  leading_zeros = len(str(n)) - len(str(n).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / (n + 1) - (leading_zeros + trailing_zeros) / n




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements + trailing_zeros) / (n + 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x != 0) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - ((n // 2 - sum(vector)) / n) ** 2 + ((sum(vector) > n // 2) > 0) * bin(int(''.join(map(str, vector))))[2:].count('0') / n




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 02:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > n // 2:
    return -trailing_zeros / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) + max(-min(vector), 0) / (max(vector) if max(vector) else 1) - sum(x**2 for x in vector) / len(vector)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time: 02:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  max_value = max(vector)
  min_value = min(vector)
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) + max(-min_value, 0) / (max(max_value, 1))




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / (n + 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / (n + 1) - min(trailing_zeros, len(str(n))) / n




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time: 02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) - 10**-5 * sum((i for i in range(1, len(vector)+1) if vector[i-1] == 0))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time: 02:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 300}
#island_id: 1
#version_generated: 3
#generate time: 02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  leading_zeros = len(str(n)) - len(str(n).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements / (n + 1) - (leading_zeros + trailing_zeros) / n




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * (n + 1) + trailing_zeros) / (n ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  return -sum_elements / (n + 1) - len(str(n).lstrip('0')) * len([x for x in vector if not x]) / n




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time: 02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) - 10**-5 * sum((i for i in range(1, len(vector)+1) if vector[i-1] == 0))




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time: 02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) - 10**-5 * sum((i for i in range(1, len(vector)+1) if vector[i-1] == 0)) + sum(i for i in range(len(vector)//2, -1, -1) if vector[i-1] != 0)




#score: {'n8_size512.txt': 304}
#island_id: 0
#version_generated: 3
#generate time: 02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 02:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 - ((n // 2 - sum_elements) / n) ** 2 + (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) + max(-min(vector), 0) / (max(vector) if max(vector) else 1) - sum(1 for x in vector if x == 0) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 02:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * (trailing_zeros / n) + max(-min(vector), 0) / (max(vector) if max(vector) else 1) - len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 02:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n // 2 - sum_elements) / n) ** 2 + ((sum_elements > n // 2) > 0) * min(trailing_zeros, len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 2
#generate time: 02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(map(int, '0' + ''.join(map(str,vector)))))) - len(''.join(map(str,vector)))
  return -(sum_elements / n) ** 2 - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 2
#generate time: 02:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements ** 2 + (trailing_zeros / n) ** 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len([i for i in vector if i == 1])
  return -sum_elements + leading_ones / n




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 02:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(vector) - len(str(bin(int(''.join(map(str,vector))))).lstrip('0'))
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((leading_ones + trailing_zeros) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * ((leading_ones + trailing_zeros) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(len([x for x in vector if x == 0])))
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 02:53
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements * (n / len(vector)) - trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0'))
  
  # Calculate the priority based on the sum of elements and the number of trailing zeros
  return -(sum_elements ** 2) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 294}
#island_id: 1
#version_generated: 3
#generate time: 02:54
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (-sum_elements/len(vector)**2)




#score: {'n8_size512.txt': 292}
#island_id: 1
#version_generated: 3
#generate time: 03:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(2 * sum_elements / len(vector) - 1)**2 - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  leading_zeros = len([i for i in vector if not i])
  return -sum_elements + leading_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for bit in vector if not bit)).lstrip('0').rstrip('0') or '0')
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector)))).count('0')))//4
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -sum_elements / max(sum_elements, 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector if x != 0) - (vector.count(0) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(len([elem for elem in vector if elem == 0])))
  return -sum_elements / (n or 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements / n + trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements / max(sum_elements, 1) - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).rstrip('0'))
  return -sum_elements / max(sum_elements, 1) - (len(str(n)) - len(str(trailing_zeros))) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (trailing_zeros / n) if sum_elements != 0 else 0




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(len([x for x in vector if x == 0])))
  return -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time: 03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + max(0, len(vector) - trailing_zeros)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for i in vector if not i))) 
  return -sum_elements + trailing_zeros / n




#score: {'n8_size512.txt': 273}
#island_id: 1
#version_generated: 3
#generate time: 03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2) < len(vector) // 4) > 0) * min((trailing_zeros / n), sum_elements)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for bit in vector if not bit)).lstrip('0').rstrip('0') or '0'
  return -sum_elements - len(trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(str(sum(1 for bit in vector if bit)).lstrip('1').rstrip('1') or '0')
  return -sum_elements + (n - leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(bin(sum(1 for bit in vector if not bit)).lstrip('0b').rstrip('0'))
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time: 03:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(map(abs, vector)) + 
       len(set(vector)) - sum(1 for elem in vector if elem == 0) / n + 
       (len(vector) - len(str(sum(map(abs, vector))).rstrip('0'))))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = len(bin(sum(1 for bit in vector if not bit)).lstrip('0b').rstrip('0'))
  return -sum_elements - (n - trailing_zeros_count) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for bit in vector if not bit)).lstrip('0').rstrip('0') or '0'
  return -sum_elements - len(trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = bin(sum(1 for bit in vector if not bit)).count('0')
  return -sum_elements - (n - trailing_zeros_count) / n




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 03:15
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(1 - 2 * sum_elements / len(vector))) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = str(sum(1 for x in vector if not x)).count('0')
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / len(str(n)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(bin(sum(1 for x in vector if not x))[2:]) - sum_elements
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros + 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).rstrip('0'))
  return -sum_elements / max(sum_elements, 1) - (len(bin(n)[2:]) - len(bin(trailing_zeros)[2:])) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = str(sum(1 for x in vector if not x)).count('0')
  return -sum_elements / max(sum_elements, 1) - trailing_zeros / n




#score: {'n8_size512.txt': 288}
#island_id: 1
#version_generated: 3
#generate time: 03:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) ** 0.5 - ((trailing_zeros / n) ** 2) + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time: 03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (abs(sum_elements - len(vector) // 2) / len(vector)) ** 2




#score: {'n8_size512.txt': 257}
#island_id: 1
#version_generated: 3
#generate time: 03:25
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + 1)) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros) - (abs(sum_elements / len(vector) - 0.5) ** 2) * 2




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(len([x for x in vector if x == 0])))
  return -(sum_elements / len(vector)) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x != 0) + len(str(sum([x for x in vector if x == 0]))) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x != 0) + len(str(sum(1 for x in vector if x == 0))) / n




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time: 03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([i for i in vector if i > 0])) / n) ** 2




#score: {'n8_size512.txt': 260}
#island_id: 1
#version_generated: 3
#generate time: 03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements**2 + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time: 03:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return - (trailing_zeros / n) ** 2
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((trailing_zeros / n) > 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5 + (abs(sum_elements - len(vector) // 2) / len(vector)) ** 0.5)




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time: 03:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  zero_count = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + zero_count) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 - sum_elements ** 2




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([i for i in vector if i == 0])) / n) ** 2




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time: 03:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 - sum(i**2 for i in vector) / (n*len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for bit in vector if not bit)).lstrip('0').rstrip('0') or '0'
  return -sum_elements - (len(trailing_zeros) + 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros_count = bin(sum(1 for bit in vector if not bit)).count('0')
  return -sum_elements - (trailing_zeros_count / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for bit in vector if bit)
  trailing_zeros = len(str(sum(1 for bit in vector if not bit)).lstrip('0'))
  return -sum_elements - (trailing_zeros or 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 - sum_elements




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum([i for i in vector if i == 0])) / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 03:39
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**2)/(n*(max(vector)+1)) - (trailing_zeros**(1/3))/n




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 03:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**2)/(n*(max(vector)+1)) - (trailing_zeros**(1/3))/n
  + math.log((n+1)*math.gamma(len(vector)+1)/math.gamma(sum_elements+1),10)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n**1.5))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 03:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements**2)/(n*(max(vector)+1))) - (trailing_zeros**(1/3))/n




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 03:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 - sum(map(lambda x: abs(x), vector)) / (n*(max(vector)+1))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 03:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**2)/(n*(max(vector)+1)) - (trailing_zeros**(1/3))/n
  - sum_elements/(n*math.sqrt(len(vector)))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 03:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**2)/(n*(max(vector)+1)) - (trailing_zeros**(1/3))/n
  - sum_elements/(n*math.sqrt(len(vector)))
  + math.exp(-((abs(sum_elements - len(vector) // 2)) + trailing_zeros)/n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 03:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) / (n*(max(vector)+1)) - ((bin(int(''.join(map(str,vector))))[2:].count('0') or 1) / n)**(1/3)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 03:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 260}
#island_id: 1
#version_generated: 3
#generate time: 03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 + (trailing_zeros / n) ** 2 - (len([i for i in vector if i == 0]) / n) ** 2




#score: {'n8_size512.txt': 258}
#island_id: 1
#version_generated: 3
#generate time: 03:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum((i+1)*x for i,x in enumerate(reversed(vector))) / (n * sum(vector))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 03:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n) 
  + math.exp(-trailing_zeros/n)/(1 + math.exp(-trailing_zeros/n)) * (sum_elements / n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - sum_elements**2/(n*math.sqrt(len(vector))) 
  - trailing_zeros**(1/3)/n 
  + math.log(math.gamma(sum_elements+1),10) - math.log(math.gamma(len(vector)+1),10)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - math.gamma(sum_elements+1)/math.gamma(len(vector)+1) if sum_elements < len(vector)//2 else 0
  - math.log((n+1)*math.gamma(len(vector)+1),10)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:00
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - math.exp(-minimize_scalar(lambda x: sum((v-x)**2 for v in vector), method='brent').x) / (1 + math.exp(-minimize_scalar(lambda x: sum((v-x)**2 for v in vector), method='brent').x))
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - math.sqrt(sum([i**2 for i in vector]))/(n*len(vector)) * trailing_zeros




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - math.gamma(sum_elements+1)/math.gamma(len(vector)+1) if sum_elements < len(vector)//2 else 0
  - math.log((n+1)*math.gamma(len(vector)+1),10)
  + math.sqrt(sum_elements*len(vector))/n
  - math.exp(-trailing_zeros/n)/(1 + math.exp(-trailing_zeros/n)) * (sum_elements / n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - math.gamma(sum_elements+1)/math.gamma(len(vector)+1) if sum_elements < len(vector)//2 else 0
  - math.log((n+1)*math.gamma(len(vector)+1),10)
  - math.pow(math.e, -sum_elements/n)/math.e * (trailing_zeros / n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - math.gamma(sum_elements+1)/math.gamma(len(vector)+1) if sum_elements < len(vector)//2 else 0
  - math.log((n+1)*math.gamma(len(vector)+1),10)
  - math.pow(math.e, -sum_elements/n)/math.e * (trailing_zeros / n)
  + sum([i**3 for i in vector])**(-0.5) / n 
  - math.sin(sum_elements/len(vector)) / (2*n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - math.sqrt(sum_elements/(n*math.gamma(len(vector)+1))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - math.gamma(sum_elements+1)/math.gamma(len(vector)+1) if sum_elements < len(vector)//2 else 0
  - math.log((n+1)*math.gamma(len(vector)+1),10)
  - math.pow(math.e, -sum_elements/n)/math.e * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([elem for elem in reversed(vector) if elem == 0])
  return -sum_elements / (n or 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = str(sum([1 for elem in vector if elem == 0])).count('0')
  return -sum_elements / (n or 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:05
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len([i for i in range(len(vector) - 1, -1, -1) if vector[i] == 0][::-1])
  return -(sum_elements / (n or 1)) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum([1 for elem in vector if elem == 0])))-len(str(sum([1 for elem in vector if elem == 0])).rstrip('0'))
  return -sum_elements / (n or 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum([1 for elem in vector if elem == 0])))-len(str(sum([1 for elem in vector if elem == 0])).rstrip('0'))
  return -sum_elements / (n or 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:06
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = str(sum([1 for elem in vector if elem == 0])).count('0')
  return -sum_elements / (n or 1) - trailing_zeros / n




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - minimize_scalar(lambda x: sum((v-x)**2 for v in vector), method='brent').x / (1 + minimize_scalar(lambda x: sum((v-x)**2 for v in vector), method='brent').x)
  - minimize_scalar(lambda x: math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n) + math.sqrt(sum([i**2 for i in vector]))/(n*len(vector)) * trailing_zeros, method='brent').x
  - sum_elements/(n*math.sqrt(len(vector)))
  - math.exp(-((abs(sum_elements - len(vector) // 2)) + trailing_zeros)/n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - (len(str(trailing_zeros)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -sum_elements / (n + 1) - trailing_zeros




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0'))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(sum(1 for x in vector if not x))).rstrip('0'))
  return -sum_elements - (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) / max(sum(x for x in vector), 1)) - (str(sum(1 for x in vector if not x)).count('0') / len(str(n)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = str(sum(1 for x in vector if not x)).count('0')
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / len(str(n))) + len([i for i in range(len(vector)) if vector[i] == 0 and i < len(str(n)) - trailing_zeros])




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x) + sum(1 for x in str(n).rjust(len(str(n)))[::-1] if not x)) / max(sum(1 for x in vector if x), 1)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - math.log(math.gamma(sum_elements+1)/math.gamma(len(vector)+1),10)
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**3)/(n*(max(vector)+1)**2) - (trailing_zeros**(1/4))/n
  + math.log((n+1)*math.gamma(len(vector)+1)/math.gamma(sum_elements+1),10)
  - math.exp(-sum_elements/(n*math.sqrt(len(vector)))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time: 04:18
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2 
  - math.log10(len(vector)+1) * (sum_elements/(n*math.sqrt(len(vector)))) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  median_value = sorted(vector)[len(vector) // 2]
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**2)/(n*(max(vector)+1)) - (trailing_zeros**(1/3))/n
  - sum_elements/(n*math.sqrt(len(vector)))
  + math.exp(-((abs(sum_elements - len(vector) // 2)) + trailing_zeros)/n)
  + math.log(Counter({i: vector.count(i) for i in set(vector)}).most_common()[0][1]/len(vector))
  - (math.log10(n+1))/n




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**2)/(n*(max(vector)+1)) - (trailing_zeros**(1/3))/n
  - sum_elements/(n*math.sqrt(len(vector)))
  + math.exp(-((abs(sum_elements - len(vector) // 2)) + trailing_zeros)/n)
  - operator.mul(math.log10(n), math.fsum(1 for i in vector if i > 0))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - sum_elements**3 / (n*(max(vector)+1)**2)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**3)/(n*(max(vector)+1)**2) - (trailing_zeros**(1/4))/n
  + math.log((n+1)*math.gamma(len(vector)+1)/math.gamma(sum_elements+1),10)
  - math.exp(-sum_elements/(n*math.sqrt(len(vector)))) * (trailing_zeros / n)
  - sum([i for i in vector if i > 0]) * (len(vector) // 2)**(1/4) / n
  - math.sin(sum_elements/math.pi) * trailing_zeros**(1/5) / n




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**3)/(n*(max(vector)+1)**2) - (trailing_zeros**(1/4))/n
  + entropy(vector, base=2).mean() - math.exp(-sum_elements/(n*math.sqrt(len(vector)))) * (trailing_zeros / n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**4)/(n*(max(vector)+1)**3) - (trailing_zeros**(1/5))/n
  + math.log((n+1)*math.gamma(len(vector)+1)/math.gamma(sum_elements+1),10)
  - math.exp(-sum_elements/(n*math.sqrt(len(vector)))) * (trailing_zeros / n)
  - sum(1/np.log2(i+1) if i > 0 else 0 for i in Counter(vector).values())




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem)
  trailing_zeros = len(str(sum([1 for elem in vector if not elem])))-len(str(sum([1 for elem in vector if not elem])).rstrip('0'))
  return -sum_elements / (n or 1) - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  return -sum_elements / (n or 1) - sum([1 for elem in vector]).bit_length() / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for elem in vector if elem != 0)
  trailing_zeros = len(str(sum([1 for elem in vector if elem == 0])))-len(str(sum([1 for elem in vector if elem == 0])).rstrip('0'))
  return -sum_elements / (n or 1) - trailing_zeros / n




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time: 04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(vector) * (2 - abs(2 * sum(vector) / len(vector) - 1)) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + ((sum(vector) > len(vector) // 2) > 0) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - math.sqrt(sum(vector)/(n*math.gamma(len(vector)+1))) 
  - bin(int(''.join(map(str,vector))))[2:].count('0')/(n*len(vector)**1.5) 
  - math.exp(-sum(vector)/n)/(1 + math.exp(-sum(vector)/n)) * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)
  - Counter(vector).most_common(1)[0][1] if sum(vector) < len(vector)//2 else 0
  - math.log((n+1)*math.gamma(len(vector)+1),10)
  - math.pow(math.e, -sum(vector)/n)/math.e * (bin(int(''.join(map(str,vector))))[2:].count('0') / n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - math.exp(-trailing_zeros/n)/(1 + math.exp(-trailing_zeros/n)) * (sum_elements / n) 
  - math.exp(-(sum_elements+trailing_zeros)/n)/(1 + math.exp(-(sum_elements+trailing_zeros)/n))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n) 
  + math.exp(-trailing_zeros/n)/(1 + math.exp(-trailing_zeros/n)) * (sum_elements / n)
  - sum(Counter(vector).values())/(n*math.sqrt(len(vector))) 
  - len([i for i in Counter(vector).values() if i == 0]) / n ** 1.5




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 04:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - math.log(gamma(sum_elements+1)/gamma(len(vector)+1),10)
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  + (math.e**-sum_elements)/(n*gamma(n+len(vector)))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 04:56
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) 
  - norm.pdf(sum_elements, loc=len(vector)/2, scale=math.sqrt(len(vector))) * sum_elements
  - trailing_zeros/(n*len(vector)**1.5)
  - math.log(math.gamma(sum_elements+1)/math.gamma(len(vector)+1),10)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for bit in vector if not bit)).lstrip('1').rstrip('1') or '0')
  return -sum_elements + (n - trailing_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_ones = len(bin(sum(1 for bit in vector if bit)).lstrip('1').rstrip('1') or '0')
  return -sum_elements + (n - leading_ones) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum(1 for bit in vector if not bit)).lstrip('0').rstrip('0') or '0')
  return -sum_elements + (n - leading_zeros) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  return -sum_elements / (n + 1) - len(str(sum(1 for x in vector if not x))) // len(str(n))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 04:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  leading_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements / (n + 1) - leading_zeros




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - math.sqrt(sum_elements/(n*math.gamma(len(vector)+1))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - (math.gamma(sum_elements+1)/math.gamma(len(vector)+1) if sum_elements < len(vector)//2 else 0)
  - math.log((n+1)*math.gamma(len(vector)+1),10)
  - math.pow(math.e, -sum_elements/n)/math.e * (trailing_zeros / n)
  + math.sin(sum_elements/len(vector)) * trailing_zeros/(n*len(vector)**1.5) 
  - math.cos(2 * sum_elements / len(vector) - 1) * math.sqrt(trailing_zeros/(n*math.gamma(len(vector)+1))) 
  - (sum_elements > len(vector) // 2) * math.asin(sum_elements/len(vector)) * trailing_zeros/(n*len(vector)**1.5)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - math.sqrt(sum_elements/(n*math.gamma(len(vector)+1))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - math.gamma(sum_elements+1)/math.gamma(len(vector)+1) if sum_elements < len(vector)//2 else 0
  - math.log((n+1)*math.gamma(len(vector)+1),10)
  - math.pow(math.e, -sum_elements/n)/math.e * (trailing_zeros / n)
  + ((-sum_elements - trailing_zeros / n)**2) / (2*(len(vector)**2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for bit in vector if not bit)).lstrip('0').rstrip('0') or '0')
  return -(sum_elements + (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**2)/(n*(max(vector)+1)) - (trailing_zeros**(1/3))/n
  + entropy(list(map(int, [bin(i).count('0') for i in vector])), base=2)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**2)/(n*(max(vector)+1)) - (trailing_zeros**(1/3))/n
  - gamma.logpdf(len(vector), sum_elements, loc=0).item()




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:14
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  return -(sum_elements / max(sum_elements, 1) + len(str(sum(1 for x in vector if not x))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str, vector))))).lstrip('0').replace('0', ''))
  return -sum_elements - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(sum(1 for x in vector if x == 0)).count('0')
  return -(sum_elements * (n - trailing_zeros)) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).zfill(n))
  return -(sum_elements * (n - trailing_zeros)) / n




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  median_value = sorted(vector)[len(vector) // 2]
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - sum((x-x.mean())**2 for x in [vector[:len(vector)//2], vector[len(vector)//2:]])/(n*(max(vector)+1))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  median_value = sorted(vector)[len(vector) // 2]
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - sum_elements/(n*math.sqrt(len(vector))) 
  - math.exp(-((abs(sum_elements - len(vector) // 2)) + trailing_zeros)/n) 
  - math.log10(n+1)/n
  - (max(vector)**(3/2))/n
  - sum(abs(i-median_value) for i in vector)/(len(vector)*median_value)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - Counter({i: vector.count(i) for i in set(vector)}).most_common()[0][1]/(2*n*math.sqrt(len(vector)))




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time: 05:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len([i for i in vector if i == 0])) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) - len(str(sum(x == 0 for x in vector))) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + len(str(sum(1 for x in vector if x == 0))) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  return -(sum_elements + len(str(sum(1 for x in vector if not x))) - 1) / max(sum_elements, 1) - (len(str(sum(1 for x in vector if not x))) - 1) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  leading_zeros = len(str(sum(1 for x in vector if not x))) - len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements / max(sum_elements, 1) - leading_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements ** 2) / (n * max(sum_elements, 1)) - (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - sum_elements/(n*math.sqrt(len(vector)))
  - math.exp(-((abs(sum_elements - len(vector) // 2)) + trailing_zeros)/n)
  - math.log(1 + math.exp(-(sum_elements/n)**0.5))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - minimize_scalar(lambda x: sum((v-x)**2 for v in vector), method='brent').x / (1 + minimize_scalar(lambda x: sum((v-x)**2 for v in vector), method='brent').x)
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n) + math.sqrt(sum([i**2 for i in vector]))/(n*len(vector)) * trailing_zeros
  - sum_elements/(n*math.sqrt(len(vector)))
  - math.exp(-((abs(sum_elements - len(vector) // 2)) + trailing_zeros)/n)
  + (math.log(n)/n) * (trailing_zeros / n) * math.sqrt(sum([i**2 for i in vector]))/len(vector)
  + sum(map(math.log, Counter(vector).values()))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - minimize_scalar(lambda x: sum((v-x)**2 for v in vector), method='brent').x / (1 + minimize_scalar(lambda x: sum((v-x)**2 for v in vector), method='brent').x)
  - minimize_scalar(lambda x: math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n) + math.sqrt(sum([i**2 for i in vector]))/(n*len(vector)) * trailing_zeros, method='brent').x
  - sum_elements/(n*math.sqrt(len(vector)))
  - math.exp(-((abs(sum_elements - len(vector) // 2)) + trailing_zeros)/n)
  - minimize_scalar(lambda x: np.abs(x-sum_elements)/(n*np.sqrt(len(vector))), method='brent').x / (1 + minimize_scalar(lambda x: np.abs(x-sum_elements)/(n*np.sqrt(len(vector))), method='brent').x)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum(1 - x for x in vector)))
  return -(sum_elements / max(sum_elements, 1) + (trailing_zeros / n)) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -(sum_elements ** 2) / (max(sum_elements, 1) * n) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)))
  return -sum_elements / max(sum_elements, 1) * (n - trailing_zeros) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:41
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements / max(sum_elements, 1) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - sum_elements/(n*math.sqrt(len(vector))) 
  - math.exp(-((abs(sum_elements - len(vector) // 2)) + trailing_zeros)/n) 
  - math.log10(n+1)/n
  - (max(vector)**(3/2))/n
  - sum(abs(i-median(vector)) for i in vector)/(len(vector)*median(vector))
  - min(vector)**(5/2)/(n*len(vector)**1.5)
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n) 
  + math.exp(-trailing_zeros/n)/(1 + math.exp(-trailing_zeros/n)) * (sum_elements / n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  median_value = sorted(vector)[len(vector) // 2]
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n) 
  + math.exp(-trailing_zeros/n)/(1 + math.exp(-trailing_zeros/n)) * (sum_elements / n)
  - sum(Counter(vector).values())/(n*math.sqrt(len(vector))) 
  - len([i for i in Counter(vector).values() if i == 0]) / n ** 1.5
  - math.log10(n+1)/n
  - max(vector)/(2*n) 
  + (sum(abs(i-median_value) for i in vector))/(len(vector)*median_value)
  - (math.sqrt(sum(x**2 for x in vector)))/(n*math.sqrt(len(vector))) 
  - sum(1 for i in vector if i < median_value) / n ** 0.5




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  leading_zeros = len([i for i in vector if not i])
  return -sum_elements + (leading_zeros / n) * (n - 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  return -sum_elements + (n - len([i for i in vector if not i])) / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 if x else 0 for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)))
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = str(sum(1 for x in vector if x == 0)).count('0')
  return -sum_elements - trailing_zeros / n




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x != 0)
  trailing_zeros = len(str(sum(1 for x in vector if x == 0)).lstrip('0') or '0')
  return -(sum_elements / len(vector)) - (len(str(trailing_zeros)) / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 2
#generate time: 05:50
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x != 0)
  trailing_zeros = len(str(len([x for x in vector if x == 0]))).bit_length()
  return -(sum_elements / len(vector)) - (trailing_zeros / n)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 2
#generate time: 05:51
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements / max(sum_elements, 1) ** 2 - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  + math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n) 
  - math.exp(-trailing_zeros/n)/(1 + math.exp(-trailing_zeros/n)) * (sum_elements / n)
  - sum(Counter(vector).values())/(n*math.sqrt(len(vector))) 
  - len([i for i in Counter(vector).values() if i == 0]) / n ** 1.5
  - sum(map(lambda x: math.exp(-x/n)/(1 + math.exp(-x/n)), Counter(vector).values()))/n




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time: 05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2 
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n) 
  + math.exp(-trailing_zeros/n)/(1 + math.exp(-trailing_zeros/n)) * (sum_elements / n)
  - sum(Counter(vector).values())/(n*math.sqrt(len(vector))) 
  - len([i for i in Counter(vector).values() if i == 0]) / n ** 1.5
  + math.log(n+1)/10




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements ** 2 / (n * max(sum_elements, 1)) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time: 05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements / max(sum_elements, 1) ** 2 - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 05:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements / (max(sum_elements, 1) ** 3 + 1e-6) - (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - sum_elements**2/(n*math.sqrt(len(vector))) 
  - trailing_zeros**(1/3)/n 
  + math.log(gamma(sum_elements+1),10) - math.log(gamma(len(vector)+1),10)
  - abs((sum_elements / len(vector)) - 0.5) * sum_elements




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  median_value = sorted(vector)[len(vector) // 2]
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - sum((x-x.mean())**2 for x in [vector[:len(vector)//2], vector[len(vector)//2:]])/(n*(max(vector)+1))
  - 0.5*math.log(len(vector))*abs(sum_elements-n*median_value)/math.sqrt(n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  median_value = sorted(vector)[len(vector) // 2]
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - sum((x-x.mean())**2 for x in [vector[:len(vector)//2], vector[len(vector)//2:]])/(n*(max(vector)+1))
  - sum_elements ** 4 / (n * (max(vector) + 1) ** 3)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 05:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  median_value = sorted(vector)[len(vector) // 2]
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - sum((x-x.mean())**2 for x in [Counter(vector)[:len(vector)//2].elements(), Counter(vector)[len(vector)//2:].elements()])/(n*(max(vector)+1))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - math.log(math.gamma(sum_elements+1)/math.gamma(len(vector)+1),10)
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - ((max(vector)-min(vector))/(max(vector)+1))**3




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - math.log(math.gamma(sum_elements+1)/math.gamma(len(vector)+1),10)
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - sum((x-x.mean())**2 for x in [vector[:len(vector)//2], vector[len(vector)//2:]])/(n*(max(vector)+1))
  - sum_elements ** 4 / (n * (max(vector) + 1) ** 3)

  # Apply gradient descent to find the optimal parameters
  res = minimize(lambda p: priority(p[0]*vector, n), [1.], method="BFGS")
  
  return -res.fun




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:01
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - math.log(math.gamma(sum_elements+1)/math.gamma(len(vector)+1),10)
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - entropy(Counter(vector).values(), base=2) / math.log(n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:02
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - operator.sub(math.gamma(sum_elements+1),math.gamma(len(vector)+1)) if sum_elements < len(vector)//2 else 0
  - math.log((n+1)*math.gamma(len(vector)+1),10)
  - math.pow(math.e, -sum_elements/n)/math.e * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements ** 2 / (max(sum_elements, 1) * n) - ((trailing_zeros + 1) / (n + 1)) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 06:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements ** 2 / (max(sum_elements, 1) ** 2 + 1) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements ** 2 / (max(sum_elements, 1) ** 2 + max(trailing_zeros, 1)) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 06:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements ** 2 / (n * max(sum_elements, 1)) - ((trailing_zeros + 1) / n) ** 3




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time: 06:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2
  - math.exp(-sum_elements/(n*math.sqrt(len(vector)))) * (trailing_zeros / n)
  - math.exp(-trailing_zeros/(n*len(vector)**1.5)) * (sum_elements / n)
  - sum(Counter(vector).values())/(n*math.sqrt(len(vector)))
  - len([i for i in Counter(vector).values() if i == 0]) / n ** 1.5
  + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - math.log(gamma(sum_elements+1)/gamma(len(vector)+1),10)
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  + (math.e**-sum_elements)/(n*gamma(n+len(vector)))
  - 0.2 * math.sin(sum_elements / len(vector))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:12
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - math.log(gamma(sum_elements+1)/gamma(len(vector)+1),10)
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  + (math.e**-sum_elements)/(n*gamma(n+len(vector)))
  - sum_elements / len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 06:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements ** 2 / (max(sum_elements, 1) * max(trailing_zeros, 1)) - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time: 06:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements / max(sum_elements, 1) ** 2 - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**3)/(n*(max(vector)+1)**2) - (trailing_zeros**(1/4))/n
  + entropy(vector, base=2).mean() * (math.log(n)/math.log(len(vector))) 
  - math.exp(-sum_elements/(n*math.sqrt(len(vector)))) * (trailing_zeros / n)
  - sum_elements**2/(n*math.sqrt(len(vector))) 
  - trailing_zeros**(1/3)/n
  + math.log(math.gamma(sum_elements+1),10) - math.log(math.gamma(len(vector)+1),10)
  - abs((sum_elements / len(vector)) - 0.5) * sum_elements




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**3)/(n*(max(vector)+1)**2) - (trailing_zeros**(1/4))/n
  + log10(reduce(mul, map(lambda x: 2 if x > 0 else 1, vector), initial=1))
  - sum_elements**2/(n*math.sqrt(len(vector))) 
  - trailing_zeros**(1/3)/n 
  + log10(stats.gamma.sum_elements+1) - log10(stats.gamma.len(vector)+1)
  - abs((sum_elements / len(vector)) - 0.5) * sum_elements




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**3)/(n*(max(vector)+1)**2) - (trailing_zeros**(1/4))/n
  + entropy(vector, base=2).mean() 
  - math.exp(-sum_elements/(n*math.sqrt(len(vector)))) * (trailing_zeros / n)
  - sum_elements**2/(n*math.sqrt(len(vector))) 
  - trailing_zeros**(1/3)/n 
  - abs((sum_elements / len(vector)) - 0.5) * sum_elements
  + math.log(math.gamma(sum_elements+1),10) - math.log(math.gamma(len(vector)+1),10)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - gmean([x for x in vector]) * 2
  - sum((x-x.mean())**2 for x in [vector[:len(vector)//2], vector[len(vector)//2:]])/(n*(max(vector)+1))




#score: {'n8_size512.txt': 257}
#island_id: 0
#version_generated: 3
#generate time: 06:22
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(x for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements / max(sum_elements, 1) ** 2 * (trailing_zeros + 1) / (n + 1)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time: 06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements ** (n / max(sum_elements, 1)) - (trailing_zeros / n) ** (max(len(vector), 1) + 2)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(bin(sum(1 for x in vector if not x))[2:]) - 1
  return -(sum_elements ** 2 / max(sum_elements, 1)) - ((trailing_zeros / n) ** 3)




#score: {'n8_size512.txt': 262}
#island_id: 0
#version_generated: 3
#generate time: 06:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -sum_elements / max(sum_elements, 1) ** 2 - (trailing_zeros / n) ** 3




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**2)/(n*(max(vector)+1)) - (trailing_zeros**(1/3))/n
  - sum_elements/(n*math.sqrt(len(vector)))
  + math.exp(-((abs(sum_elements - len(vector) // 2)) + trailing_zeros)/n)
  - min(1, abs(sum_elements - n) / sum_elements) * max(trailing_zeros/n, sum_elements/n)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time: 06:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -(sum_elements ** (n / max(sum_elements, 1)) + (trailing_zeros / n) ** (max(len(vector), 1) + 2))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 06:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(sum(1 for x in vector if not x)).lstrip('0'))
  return -pow(sum_elements * (n / max(sum_elements, 1)), 0.5) - pow(trailing_zeros / n, 2)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time: 06:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector if x) ** (n / max(sum(1 for x in vector if x), 1)) - len(str(sum(1 for x in vector if not x)).lstrip('0')) / n




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time: 06:31
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(bin(sum(1 for x in vector if not x))[2:].lstrip('0'))
  return -(sum_elements ** (n / max(sum_elements, 1)) + (trailing_zeros / n) ** (max(len(vector), 1) + 2))




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time: 06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(bin(sum(1 for x in vector if not x))[2:].lstrip('0'))
  return -(sum_elements ** (n / max(sum_elements, 1)) + (trailing_zeros / n) ** (max(len(vector), 1) + 2))




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time: 06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(bin(sum(1 for x in vector if not x))[2:].lstrip('0'))
  return -(sum_elements ** (n / max(sum_elements, 1)) + (trailing_zeros / n) ** (max(len(vector), 1) + 2))




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time: 06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(str(bin(sum(1 for x in vector if not x))[2:].zfill(n)).lstrip('0'))
  return -(sum_elements ** (n / max(sum_elements, 1)) + (trailing_zeros / n) ** (max(len(vector), 1) + 2))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - math.exp(-minimize_scalar(lambda x: sum((v-x)**2 for v in vector), method='brent').x) / (1 + math.exp(-minimize_scalar(lambda x: sum((v-x)**2 for v in vector), method='brent').x))
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - math.sqrt(sum([i**2 for i in vector]))/(n*len(vector)) * trailing_zeros
  - sum_elements ** 0.5 / (n * len(vector) ** 1.5) * trailing_zeros
  - min(x for x in set(vector)) / max(x for x in set(vector)) * math.exp(-minimize_scalar(lambda x: sum((v-x)**2 for v in vector), method='brent').x)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - math.exp(-minimize_scalar(lambda x: sum((v-x)**2 for v in vector), method='brent').x) / (1 + math.exp(-minimize_scalar(lambda x: sum((v-x)**2 for v in vector), method='brent').x))
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - math.sqrt(sum([i**2 for i in vector]))/(n*len(vector)) * trailing_zeros
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  - ((max(vector)-min(vector))/(max(vector)+1))**3
  - math.log(math.gamma(sum_elements+1)/math.gamma(len(vector)+1),10)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:32
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - math.exp(-minimize_scalar(lambda x: sum((v-x)**2 for v in vector), method='brent').x) / (1 + math.exp(-minimize_scalar(lambda x: sum((v-x)**2 for v in vector), method='brent').x))
  - math.exp(-sum_elements/n)/(1 + math.exp(-sum_elements/n)) * (trailing_zeros / n)
  - math.sqrt(sum([i**2 for i in vector]))/(n*len(vector)) * trailing_zeros
  - math.log(math.gamma(sum_elements+1)/math.gamma(len(vector)+1),10) - sum_elements/(n*math.sqrt(len(vector)))
  - trailing_zeros/(n*len(vector)**1.5) 
  - ((max(vector)-min(vector))/(max(vector)+1))**3
  - (sum_elements > len(vector) // 2) * math.log(1 + math.exp(-sum_elements / n))




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  median_value = sorted(vector)[len(vector) // 2]
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - sum_elements/(n*math.sqrt(len(vector)))
  - trailing_zeros**(1/3)/n
  + math.exp(-((abs(sum_elements - len(vector) // 2)) + trailing_zeros)/n)
  - math.log10(n+1)/n
  + math.log(Counter({i: vector.count(i) for i in set(vector)}).most_common()[0][1]/len(vector))
  - sum_elements**3/(n*(max(vector)+1)**2)
  + (sum_elements > median_value) * (trailing_zeros / n)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  median_value = sorted(vector)[len(vector) // 2]
  max_deviation = abs(sum_elements - len(vector) // 2)
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (max_deviation / math.sqrt(len(vector))) 
  + math.exp(-((abs(sum_elements - len(vector) // 2)) + trailing_zeros)/n)
  + math.log(Counter({i: vector.count(i) for i in set(vector)}).most_common()[0][1]/len(vector))
  - (math.log10(n+1))/n




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:33
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  median_value = sorted(vector)[len(vector) // 2]
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2
  - (sum_elements**2)/(n*(max(vector)+1)) - (trailing_zeros**(1/3))/n
  - sum_elements/(n*math.sqrt(len(vector)))
  + math.exp(-((abs(sum_elements - len(vector) // 2)) + trailing_zeros)/n)
  + math.log(Counter({i: vector.count(i) for i in set(vector)}).most_common()[0][1]/len(vector))
  - (math.log10(n+1))/n
  + ((sum_elements > median_value) > 0) * (trailing_zeros / n) - sum_elements/(n*math.sqrt(len(vector)))




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time: 06:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for x in vector if x)) ** (n / max(sum(1 for x in vector if x), 1)) - ((len(str(sum(1 for x in vector if not x)).lstrip('0'))/n) ** (max(len(vector), 1)))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 06:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(1 for x in vector) ** (n / max(sum(1 for x in vector), 1)) - (len(str(sum(1 for x in vector if not x)).lstrip('0')) / n) ** (max(len(vector), 1) + 2)




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time: 06:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(bin(sum(1 for x in vector if not x))[2:].lstrip('0'))
  return -(sum_elements ** (n / max(sum_elements, 1)) + (trailing_zeros / n) ** (max(len(vector), 1) + 2))




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time: 06:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(sum(1 for x in vector if not x))[2:].count('0')
  return -(sum_elements ** (n / max(sum_elements, 1)) + (trailing_zeros / n) ** (max(len(vector), 1) + 2))




#score: {'n8_size512.txt': 302}
#island_id: 0
#version_generated: 3
#generate time: 06:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = bin(sum(1 for x in vector if not x)).count('0')
  return -(sum_elements ** (n / max(sum_elements, 1)) + (trailing_zeros / n) ** (max(len(vector), 1) + 2))




#score: {'n8_size512.txt': 310}
#island_id: 0
#version_generated: 3
#generate time: 06:40
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(1 for x in vector if x)
  trailing_zeros = len(bin(sum(1 for x in vector if not x))[2:].lstrip('0'))
  return -(sum_elements ** (n / max(sum_elements, 1)) + (trailing_zeros / n) ** (max(len(vector), 1) + 2)) * min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - math.log(gamma(sum_elements+1)/gamma(len(vector)+1),10)
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  + (math.e**-sum_elements)/(n*gamma(n+len(vector)))
  - 0.5 * math.log(sum_elements+1) if sum_elements > 0 else 0




#score: {'n8_size512.txt': 306}
#island_id: 1
#version_generated: 3
#generate time: 06:43
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - (len([i for i in vector if i == 0]) / n) ** 2 
  - math.log(gamma(sum_elements+1)/gamma(len(vector)+1),10)
  - sum_elements/(n*math.sqrt(len(vector))) 
  - trailing_zeros/(n*len(vector)**1.5) 
  + (math.e**-sum_elements)/(n*gamma(n+len(vector)))




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time: 06:45
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in set(vector))/n - len([i for i in range(1, max(vector)+1) if i not in vector])/n




#score: {'n8_size512.txt': 266}
#island_id: 1
#version_generated: 2
#generate time: 06:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(trailing_zeros, sum_elements)




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 2
#generate time: 07:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 266}
#island_id: 1
#version_generated: 3
#generate time: 07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - min(sum_elements, trailing_zeros)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 07:04
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 / len(vector)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min((trailing_zeros / n), (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time: 07:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) - abs(sum_elements / len(vector) - 0.5)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 07:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / (n + len(vector))) ** 2




#score: {'n8_size512.txt': 272}
#island_id: 0
#version_generated: 3
#generate time: 07:11
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(bin(int(''.join(map(str,vector))))).lstrip('0b').rstrip('0'))
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / n) ** 2




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 07:13
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Use this value to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 07:23
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) - trailing_zeros) / n) ** 2




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 07:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n - trailing_zeros) / n) ** 2 + (sum_elements > len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((trailing_zeros / n) < 0.5) * (-trailing_zeros / n)




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time: 07:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) - ((n - trailing_zeros) / n) * ((sum_elements > len(vector) // 2) > 0)




#score: {'n8_size512.txt': 292}
#island_id: 0
#version_generated: 3
#generate time: 07:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(vector)) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time: 07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Use this value to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) - (abs(sum_elements - n/2) / n)




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time: 07:52
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Use this value to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) - sum_elements**2/len(vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 08:07
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Use this value to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + n) / (n * 2)) ** 2 - ((avg > 0.5) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 298}
#island_id: 0
#version_generated: 3
#generate time: 08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n) + (abs(sum_elements - n) < 1e-6) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Use this value to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) + sum((x for x in vector if x < 0))




#score: {'n8_size512.txt': 298}
#island_id: 1
#version_generated: 3
#generate time: 08:08
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) - ((n - trailing_zeros) / n) * ((sum_elements > len(vector) // 2) > 0) + sum_elements / max(sum_elements, 1)




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time: 08:09
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum([i**2 for i in vector]) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + sum((x for x in vector if x > 0))




#score: {'n8_size512.txt': 268}
#island_id: 0
#version_generated: 3
#generate time: 08:20
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((abs(sum_elements - len(vector) // 2)) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 08:26
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  if sum_elements > len(vector) // 2:
    return -trailing_zeros / n
  else:
    return -(sum_elements ** 2 + trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Use this value to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) + sum((x for x in vector if x < 0))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Use this value to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) + sum((x for x in vector if x < 0)) - sum((x for x in vector if x > 0))




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')

  # Calculate the average of vector elements
  avg = sum_elements / len(vector)

  # Use this value to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) - sum(abs(x) for x in vector)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 08:27
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - (bin(int(''.join(map(str,vector)))).count('0') / n) ** 2 + (sum(x>0.5 for x in vector) > 0) * (bin(int(''.join(map(str,vector)))).count('0') / n)




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time: 08:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Calculate the variance of vector elements
  var = (sum((i - avg) ** 2 for i in vector) / len(vector))
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) + var




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 08:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Use this value to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 0.5 + (avg > 0.5)) * (trailing_zeros / n)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time: 08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')

  # Calculate the average and variance of vector elements
  avg = sum_elements / len(vector)
  var = sum((x - avg) ** 2 for x in vector) / len(vector)

  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) + sum((x for x in vector if x < 0)) - var




#score: {'n8_size512.txt': 270}
#island_id: 1
#version_generated: 3
#generate time: 08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Use this value to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) - abs(sum_elements - avg) * (abs(avg - 0.5))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 08:35
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  avg = sum_elements / len(vector)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((avg > 0.5) > 0) * (trailing_zeros / n) - sum((x for x in vector if x < 0)) * min(avg, (sum_elements / len(vector)))




#score: {'n8_size512.txt': 295}
#island_id: 1
#version_generated: 3
#generate time: 08:42
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2 + (n - trailing_zeros) / (n * (n - 1))) * min(sum_elements, n)




#score: {'n8_size512.txt': 278}
#island_id: 0
#version_generated: 3
#generate time: 08:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum(map(int, map(str, vector))) % n) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 08:55
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) + sum(10**i.bit_length() for i in range(len(vector)) if not vector[i])) / n




#score: {'n8_size512.txt': 284}
#island_id: 0
#version_generated: 3
#generate time: 08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2) / (len(vector) * n) - ((trailing_zeros / n) ** 2) + abs(sum_elements - len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 289}
#island_id: 0
#version_generated: 3
#generate time: 08:57
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  if sum_elements < 0.5 * len(vector):
    return -sum_elements - (trailing_zeros / n) ** 2
  elif sum_elements > 0.5 * len(vector):
    return sum_elements + (trailing_zeros / n) ** 2
  else:
    return -(trailing_zeros / n) ** 2 + (abs(sum_elements - 0.5 * len(vector)) * trailing_zeros / n)




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time: 08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Use this value to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) - ((n - trailing_zeros) / n) * ((sum_elements > len(vector) // 2) > 0) + (1 - abs(avg - 0.5)) * ((n - trailing_zeros) / n)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time: 08:58
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  avg = sum_elements / len(vector)
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) - ((n - trailing_zeros) / n) * ((sum_elements > len(vector) // 2) > 0) + (sum_elements % 3)




#score: {'n8_size512.txt': 260}
#island_id: 0
#version_generated: 3
#generate time: 09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 + (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 * (1 - abs(1 - 2 * sum_elements / len(vector))) - ((trailing_zeros > len(vector) // 4) > 0) * ((trailing_zeros / n) ** 2 + (n / trailing_zeros) ** 2)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 09:03
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) * (1 - abs(sum_elements / len(vector) - 0.5))




#score: {'n8_size512.txt': 296}
#island_id: 1
#version_generated: 3
#generate time: 09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average and variance of vector elements
  avg = sum_elements / len(vector)
  var = sum([x**2 for x in vector]) / len(vector) - avg**2
  
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) + var) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 287}
#island_id: 1
#version_generated: 3
#generate time: 09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Use this value to improve the calculation
  if avg > 0.5:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (trailing_zeros / n)
  else:
    return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 - (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 1
#version_generated: 3
#generate time: 09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Use this value to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((avg > 0.5) > 0) * (trailing_zeros / n) + (abs(avg - 0.5) / 0.5) ** 2




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time: 09:10
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average and variance of vector elements
  avg = sum_elements / len(vector)
  var = (sum((x - avg) ** 2 for x in vector) / len(vector))
  
  # Use these values to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) - var * (trailing_zeros / n)




#score: {'n8_size512.txt': 286}
#island_id: 0
#version_generated: 3
#generate time: 09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / len(vector) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + trailing_zeros) / (n * len(vector))




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len(str(vector).rstrip('0').lstrip('0').replace('0', '')) if str(vector).count('0') > 0 else 0
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 09:16
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -(sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1))) - ((trailing_zeros / n) ** 2 + (abs(sum_elements - n) < 1e-6) * (trailing_zeros / n))




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 09:17
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) * (2 - abs(2 * sum(x for x in vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 2 + ((sum(x for x in vector) / len(vector)) > 0.5) * ((bin(int(''.join(map(str,vector))))).count('0') / n)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 09:19
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * min(trailing_zeros, (n - trailing_zeros) / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = len([i for i in vector if i == 0])
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((len(vector) - trailing_zeros) / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 290}
#island_id: 0
#version_generated: 3
#generate time: 09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((n-trailing_zeros)/n)**2 + (sum_elements > n/2)*((trailing_zeros)/n)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Use this value to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) + sum((x for x in vector if x < 0)) - sum_elements




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 09:24
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Use this value to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) + sum(x for x in vector if x < 0)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Use this value to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) - sum(x for x in vector if x < 0)




#score: {'n8_size512.txt': 274}
#island_id: 1
#version_generated: 3
#generate time: 09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) * (2 - abs(2 * sum(x for x in vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 2 + ((sum(x for x in vector) > 0.5*len(vector)) > 0) * (-(sum(x for x in vector) / len(vector)) + 1)




#score: {'n8_size512.txt': 267}
#island_id: 0
#version_generated: 3
#generate time: 09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + sum_elements) / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 09:28
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -(sum_elements ** 2 + (trailing_zeros / n) ** 2) - ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 291}
#island_id: 0
#version_generated: 3
#generate time: 09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + len(bin(len(vector)))) / n) ** 2 + (sum_elements > len(vector) // 2) * (trailing_zeros / n)




#score: {'n8_size512.txt': 295}
#island_id: 0
#version_generated: 3
#generate time: 09:29
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (n * len(vector)) - ((trailing_zeros / n) ** 2 + abs(sum_elements - len(vector) // 2))




#score: {'n8_size512.txt': 283}
#island_id: 0
#version_generated: 3
#generate time: 09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements ** 2 / (len(vector) * max(sum_elements, len(vector))) - (trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) * (2 - abs(2 * sum(x for x in vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 2 + ((sum(x for x in vector) / len(vector)) > 0.5) * ((bin(int(''.join(map(str,vector))))).count('0') / n) - sum(1 for x in vector if x < 0)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  avg = sum(x for x in vector) / len(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum(x for x in vector) * (2 - abs(2 * sum(x for x in vector) / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((avg > 0.5) > 0) * (trailing_zeros / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) * (2 - abs(2 * sum(x for x in vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 2 + ((sum(x for x in vector) / len(vector)) > 0.5) * ((bin(int(''.join(map(str,vector))))).count('0') / n) + sum(x for x in vector if x < 0)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 09:30
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) * (2 - abs(2 * sum(x for x in vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 2 + ((sum(x for x in vector) / len(vector)) > 0.5) * ((bin(int(''.join(map(str,vector))))).count('0') / n) - sum(1 for x in vector if x < 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 09:34
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)
  
  return -sum(x for x in vector) * (2 - abs(2 * sum(x for x in vector) / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((avg > 0.5) > 0) * (trailing_zeros / n) - sum((x for x in vector if x < 0)) * min(avg, sum_elements / len(vector)) - abs(sum(x for x in vector) - n / 2)




#score: {'n8_size512.txt': 262}
#island_id: 1
#version_generated: 3
#generate time: 09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector) ** 2 / len(vector)) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 2 + (1 if sum(x for x in vector) > 0.5 else 0) * ((bin(int(''.join(map(str,vector))))).count('0') / n)




#score: {'n8_size512.txt': 299}
#island_id: 1
#version_generated: 3
#generate time: 09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) * (2 - abs(2 * sum(x for x in vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 2 + ((sum(x for x in vector) / len(vector)) > 0.5) * ((bin(int(''.join(map(str,vector))))).count('0') / n)




#score: {'n8_size512.txt': 290}
#island_id: 1
#version_generated: 3
#generate time: 09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(x for x in vector)**2) * (2 - abs(2 * sum(x for x in vector) / len(vector) - 1)) + ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 2 + ((sum(x for x in vector) / len(vector)) > 0.5) * ((bin(int(''.join(map(str,vector))))).count('0') / n) - sum(1 for x in vector if x < 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 09:36
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector) ** 2) - (bin(int(''.join(map(str,vector))))).count('0') / n + ((sum(x for x in vector) > 0.5 * len(vector)) > 0)




#score: {'n8_size512.txt': 274}
#island_id: 0
#version_generated: 3
#generate time: 09:38
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros + 1) / (n + 1)) ** 2




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time: 09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average of vector elements
  avg = sum_elements / len(vector)
  
  # Use this value to improve the calculation
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) - ((n - trailing_zeros) / n) * ((sum_elements > len(vector) // 2) > 0) + sum(x for x in vector if x < 0)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 09:44
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x**2 for x in vector) - len([i for i,x in enumerate(reversed(vector)) if x == 0]) / n




#score: {'n8_size512.txt': 297}
#island_id: 1
#version_generated: 3
#generate time: 09:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average and variance of vector elements
  avg = sum_elements / len(vector)
  var = sum((x - avg) ** 2 for x in vector) / len(vector)
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) - sum(x for x in vector if x < 0) + var




#score: {'n8_size512.txt': 283}
#island_id: 1
#version_generated: 3
#generate time: 09:46
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  
  # Calculate the average and median of vector elements
  avg = sum_elements / len(vector)
  median = sorted(vector)[len(vector) // 2]
  
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + ((avg > 0.5) > 0) * (trailing_zeros / n) - sum(x for x in vector if x < median)




#score: {'n8_size512.txt': 291}
#island_id: 1
#version_generated: 3
#generate time: 09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) * (2 - abs(2 * sum(x for x in vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 2 + ((sum(x for x in vector) / len(vector)) > 0.5) * ((bin(int(''.join(map(str,vector))))).count('0') / n) - (1 - (sum(x for x in vector) > len(vector) // 2)) * (len(vector) - (bin(int(''.join(map(str,vector))))).count('0')) / n




#score: {'n8_size512.txt': 267}
#island_id: 1
#version_generated: 3
#generate time: 09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) * (2 - abs(2 * sum(x for x in vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 2 + ((sum(x for x in vector) / len(vector)) > 0.5) * ((bin(int(''.join(map(str,vector))))).count('0') / n) - (n - ((bin(int(''.join(map(str,vector))))).count('0'))) * ((sum(x for x in vector) / len(vector)) < 0.5)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time: 09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)

  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((avg > 0.5) > 0) * ((trailing_zeros / n) * avg) - ((n - trailing_zeros) / n) * ((sum_elements > len(vector) // 2) > 0) + sum_elements / max(sum_elements, 1)




#score: {'n8_size512.txt': 293}
#island_id: 1
#version_generated: 3
#generate time: 09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -sum(x for x in vector) * (2 - abs(2 * sum(x for x in vector) / len(vector) - 1)) - ((bin(int(''.join(map(str,vector))))).count('0') / n) ** 2 + ((sum(x for x in vector) / len(vector)) > 0.5) * ((bin(int(''.join(map(str,vector))))).count('0') / n) - (max(1, sum(x for x in vector) // 2) - (sum(x for x in vector) // 2)) * (n - (bin(int(''.join(map(str,vector))))).count('0')) / n




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time: 09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)

  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (avg > 0.5) * ((trailing_zeros / n) * avg) - ((n - trailing_zeros) / n) * ((sum_elements > len(vector) // 2) > 0) + sum_elements / max(sum_elements, 1) - abs(sum_elements / len(vector) - 1)




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(vector)**2) - (bin(int(''.join(map(str,vector))))[2:].count('0') / n) ** 2 + (sum_elements := sum(vector)) / max(sum_elements, 1)




#score: {'n8_size512.txt': 301}
#island_id: 1
#version_generated: 3
#generate time: 09:47
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)

  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + ((avg > 0.5) > 0) * ((trailing_zeros / n) * avg) - ((n - trailing_zeros) / n) * ((sum_elements > len(vector) // 2) > 0) + sum_elements / max(sum_elements, 1)




#score: {'n8_size512.txt': 256}
#island_id: 3
#version_generated: 3
#generate time: 09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  return -(sum(1 for elem in set(vector)) + len([i for i in range(1, max(vector)+1) if i not in vector]) / n)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time: 09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)

  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (avg > 0.5) * ((trailing_zeros / n) * avg) - ((n - trailing_zeros) / n) * ((sum_elements > len(vector) // 2) > 0) + sum_elements / max(sum_elements, 1) - abs(sum_elements / len(vector) - 1)
  if sum_elements < 3:
    return sum_elements
  if sum_elements > len(vector):
    return trailing_zeros / n
  if avg > 0.5 and sum_elements % 2 == 0:
    return avg * trailing_zeros / n
  if abs(sum_elements / len(vector) - 1) < 0.5:
    return (trailing_zeros / n) ** 2




#score: {'n8_size512.txt': 256}
#island_id: 1
#version_generated: 3
#generate time: 09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str, vector)))).count('0')
  avg = sum_elements / len(vector)

  return -sum_elements * (1 - abs(2 * sum_elements / len(vector) - 1)) - (trailing_zeros / n) ** 2 + (avg > 0.5) * ((trailing_zeros / n) * avg)




#score: {'n8_size512.txt': 305}
#island_id: 1
#version_generated: 3
#generate time: 09:48
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  avg = sum_elements / len(vector)

  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - ((trailing_zeros / n) ** 2) + (avg > 0.5) * ((trailing_zeros / n) * avg) - ((n - trailing_zeros) / n) * ((sum_elements > len(vector) // 2) > 0) + sum_elements / max(sum_elements, 1) - abs(sum_elements / len(vector) - 1)




#score: {'n8_size512.txt': 256}
#island_id: 0
#version_generated: 3
#generate time: 09:49
program:
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  trailing_zeros = bin(int(''.join(map(str,vector)))).count('0')
  return -sum_elements * (2 - abs(2 * sum_elements / len(vector) - 1)) - 0.5 * ((trailing_zeros / n) ** 2 + ((sum_elements > len(vector) // 2) > 0) * (trailing_zeros / n))




#score: {'n8_size512.txt': 386}
#island_id: None
#version_generated: None
#generate time: 09:58
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: None
#version_generated: None
#generate time: 10:00
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: None
#version_generated: None
#generate time: 10:06
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: None
#version_generated: None
#generate time: 10:08
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: None
#version_generated: None
#generate time: 10:08
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: None
#version_generated: None
#generate time: 10:16
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 368}
#island_id: 0
#version_generated: 3
#generate time: 10:17
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a higher priority to vectors with lower sum of elements and more trailing zeros.
  
  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set
  
  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  trailing_zeros = len(str(sum_elements).zfill(n)) - len(str(sum_elements))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.mean(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: None
#version_generated: None
#generate time: 10:19
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time: 10:22
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = ((sum(x**2 for x in vector) - sum_elements**2 / n) / n)**0.5

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + np.sqrt(len([i for i in range(len(vector)) if vector[i] == 0])) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = return_value + (variance/np.std(vector)) + ((sum_elements - median) / np.median(abs(np.diff(vector))))
  return_value += math.exp(-(sum_elements + (n - sum(1 for x in vector if x))) / n) * (max_freq/min_freq)**2
  return return_value

  if sum(1 for x in vector if x) > len(set(vector)):
    return sum_elements
  else:
    return max_freq**2/(min_freq*n)




#score: {'n8_size512.txt': 386}
#island_id: None
#version_generated: None
#generate time: 10:28
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: None
#version_generated: None
#generate time: 10:31
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 261}
#island_id: 2
#version_generated: 3
#generate time: 10:32
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  # Calculate the priority based on the sum of elements, number of trailing zeros and uniqueness of elements
  return -(sum_elements / n) + (n - sum(1 for x in vector if x)) ** 2 / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio




#score: {'n8_size512.txt': 261}
#island_id: 2
#version_generated: 3
#generate time: 10:32
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  weighted_variance = variance / math.sqrt(variance * (n-1) + sum_elements**2 / n)
  return -(sum_elements / n) + (n - sum(1 for x in vector if x)) ** 2 / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time: 10:32
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = len(str(sum_elements).zfill(n)) - leading_zeros
  if not trailing_zeros:
    trailing_zeros = 1

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Calculate the priority based on the sum of elements, number of trailing zeros and uniqueness of elements
  return -(sum_elements / n) + (n - sum(1 for x in vector if x)) ** 2 / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2




#score: {'n8_size512.txt': 386}
#island_id: 0
#version_generated: 3
#generate time: 10:33
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  """
  Assigns a higher priority to vectors with lower sum of elements and more trailing zeros.
  
  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set
  
  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and np.sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and np.sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - np.sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - np.sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - np.sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time: 10:34
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time: 10:34
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = np.sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return np.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -np.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + np.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + np.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(np.sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)
  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + np.sqrt(n)
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time: 10:34
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + math.sqrt(n)
  return return_value




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time: 10:34
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value = -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  return_value += (sum(set(vector)) - min(vector)) / len(vector) - max(frequency.values()) / len(frequency) + math.sqrt(n)
  return return_valu




#score: {'n8_size512.txt': 386}
#island_id: None
#version_generated: None
#generate time: 10:35
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
from scipy.stats import gmean
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 320}
#island_id: 1
#version_generated: 3
#generate time: 10:36
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
from scipy.stats import gmean
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  # New improvements
  skewness = (3 * (sum(x**3 for x in vector) - 3 * sum(x for x in vector)**2) / (n ** 2.5)) 
  kurtosis = ((n + 1) * sum((x - median) ** 4 for x in vector) / (n * variance ** 2) - 3) / (n - 1)

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n) + skewness ** 2 + kurtosis




#score: {'n8_size512.txt': 386}
#island_id: 2
#version_generated: 3
#generate time: 10:37
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
from scipy.stats import gmean
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)

  # Calculate the priority based on the sum of elements, number of trailing zeros and uniqueness of elements
  return -(sum_elements / n) + (n - sum(1 for x in vector if x)) ** 2 / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2




#score: {'n8_size512.txt': 267}
#island_id: 2
#version_generated: 3
#generate time: 10:37
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
from scipy.stats import gmean
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))

  trailing_zeros = str(sum_elements).zfill(n).count('0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - variance + math.sqrt(trailing_zeros) * n / len(vector) - leading_zeros/n - zero_ratio - unique_elements / n




#score: {'n8_size512.txt': 294}
#island_id: 0
#version_generated: 3
#generate time: 10:38
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
from scipy.stats import gmean
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  # Calculate the priority
  return -((sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) * math.sqrt(trailing_zeros) + 
       abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n + 
       min((x**2/n) for x in vector) + max(-sum(vector), 0) + 
       (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + 
       abs(median - sum_elements/len(vector)) + 
       min(vector)**3/(n**2) - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) + 
       abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n)




#score: {'n8_size512.txt': 386}
#island_id: 0
#version_generated: 3
#generate time: 10:38
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
from scipy.stats import gmean
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = sum(vector) / len(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: 0
#version_generated: 3
#generate time: 10:38
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
from scipy.stats import gmean
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)

  # Additional improvements
  if sum_elements < n/2 and len(set(vector)) > 1:
    return math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  elif sum_elements > n/2 and len(set(vector)) > 1:
    return -math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n
  else:
    return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2)




#score: {'n8_size512.txt': 335}
#island_id: 3
#version_generated: 3
#generate time: 10:39
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
from scipy.stats import gmean
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = np.count_nonzero(vector == 0) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + variance) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.mean(sorted(vector)[::-1]) + math.sqrt(trailing_zeros) * n / len(vector) - sum(set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * np.count_nonzero([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 368}
#island_id: 3
#version_generated: 3
#generate time: 10:39
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
from scipy.stats import gmean
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.mean(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - np.mean([x for x in set(vector)]) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 368}
#island_id: 3
#version_generated: 3
#generate time: 10:39
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
from scipy.stats import gmean
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = np.var(vector)

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - np.mean(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 386}
#island_id: 3
#version_generated: 3
#generate time: 10:40
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
from scipy.stats import gmean
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)

  # New calculation
  return -(sum_elements/n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n + min((x**2/n) for x in vector) - max(-sum(vector), 0) - (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) - math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2)




#score: {'n8_size512.txt': 386}
#island_id: 3
#version_generated: 3
#generate time: 10:40
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
from scipy.stats import gmean
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




#score: {'n8_size512.txt': 317}
#island_id: 3
#version_generated: 3
#generate time: 10:41
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
from scipy.stats import gmean
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))

  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  res = minimize(lambda x: -(sum(x)/n + (n - sum(x)) ** 2 / n) + abs(sum(x) - n/2) * (n - sum(x)) / n - min((x**2/n) for x in x) + max(-sum(x), 0) + (max(x) - min(x)) / n - sum(sorted(x)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(x) - sum(x for x in set(x)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum(x)/len(x)) - min(x)**3/(n**2) + math.exp(-n/(sum(x) + (n - sum(x)))) - abs(sum(x**6/(n*n*n*n*n) for x in x)) * len([i for i in range(len(x)) if x[i] == 0]) / n - max_freq**3/(min_freq**2), np.array([-1.]), method="SLSQP").x[0]
  return res




#score: {'n8_size512.txt': 386}
#island_id: None
#version_generated: None
#generate time: 10:49
program:
import numpy as np
import seaborn as sns
from scipy.optimize import minimize
import itertools
import math
from collections import Counter
from evaluate import evaluate
from scipy.stats import gmean
import funsearch

@funsearch.run
def evaluate(n: int, priority) -> int:
  """Returns the size of an `n`-dimensional cap set."""
  capset = None
  try:
    capset = solve(n, priority)
  except Exception as e:
    log(e)
  finally:
    return len(capset)


def priority(vector, n):
  """
  Assigns a priority to a vector based on its sum of elements and the number of trailing zeros.

  Args:
  vector (tuple): A vector in the cap set
  n (int): The size of the cap set

  Returns:
  float: The priority of the vector
  """
  sum_elements = sum(vector)
  leading_zeros = len(str(sum_elements).lstrip('0'))
  
  frequency = Counter(vector)
  max_freq = max(frequency.values())
  min_freq = min(frequency.values())

  if (sum_elements <= n/2 and sum(1 for x in vector if x) >= n//2):
    return math.sqrt(n)
  elif (sum_elements > n/2 and sum(1 for x in vector if x) < n//2):
    return -math.sqrt(n)

  variance = sum((x - sum_elements/n)**2 for x in vector) / n

  zero_ratio = len([i for i in range(len(vector)) if vector[i] == 0]) / len(vector)
  unique_elements = len(set(vector))
  median = np.median(vector)

  # Improved calculation of trailing zeros
  trailing_zeros = sum(1 for x in str(sum_elements).zfill(n) if x == '0')

  return -(sum_elements / n + (n - sum(1 for x in vector if x)) ** 2 / n) + abs(sum_elements - n/2) * (n - sum(1 for x in vector if x)) / n - min((x**2/n) for x in vector) + max(-sum(vector), 0) + (max(vector) - min(vector)) / n - sum(sorted(vector)[::-1]) / n + math.sqrt(trailing_zeros) * n / len(vector) - sum(x for x in set(vector)) / n - leading_zeros/n - max_freq/min_freq - (max_freq/min_freq)**2 + zero_ratio + (unique_elements - 1) / n + abs(median - sum_elements/len(vector)) - min(vector)**3/(n**2) + math.exp(-n/(sum_elements + (n - sum(1 for x in vector if x)))) - abs(sum(x**6/(n*n*n*n*n) for x in vector)) * len([i for i in range(len(vector)) if vector[i] == 0]) / n - max_freq**3/(min_freq**2) - math.sqrt(n)




